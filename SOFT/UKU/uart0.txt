; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\uart0.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\uart0.d --feedback=.\EXE\UKU_VD_WG12232A.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_VD -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x -DWG12232A --omf_browse=.\EXE\uart0.crf uart0.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  crc_87 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  7803              LDRB     r3,[r0,#0]
;;;83     
;;;84     for(j=1;j<num;j++)
000004  f04f0201          MOV      r2,#1
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  4c07              LDR      r4,|L1.40|
00000a  e008              B        |L1.30|
                  |L1.12|
00000c  f1000001          ADD      r0,r0,#1              ;86
000010  5ce3              LDRB     r3,[r4,r3]
000012  7805              LDRB     r5,[r0,#0]
000014  ea850303          EOR      r3,r5,r3
000018  f1020201          ADD      r2,r2,#1              ;84
00001c  b2d2              UXTB     r2,r2                 ;84
                  |L1.30|
00001e  428a              CMP      r2,r1                 ;84
000020  d3f4              BCC      |L1.12|
;;;88     	}
;;;89     
;;;90     return r;	
000022  4618              MOV      r0,r3
;;;91     } 
000024  bd30              POP      {r4,r5,pc}
;;;92     
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      Table87

                          AREA ||area_number.2||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.2||, ||.text||
                  crc_95 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  7803              LDRB     r3,[r0,#0]
;;;83     
;;;84     for(j=1;j<num;j++)
000004  f04f0201          MOV      r2,#1
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  4c07              LDR      r4,|L2.40|
00000a  e008              B        |L2.30|
                  |L2.12|
00000c  f1000001          ADD      r0,r0,#1              ;86
000010  5ce3              LDRB     r3,[r4,r3]
000012  7805              LDRB     r5,[r0,#0]
000014  ea850303          EOR      r3,r5,r3
000018  f1020201          ADD      r2,r2,#1              ;84
00001c  b2d2              UXTB     r2,r2                 ;84
                  |L2.30|
00001e  428a              CMP      r2,r1                 ;84
000020  d3f4              BCC      |L2.12|
;;;88     	}
;;;89     
;;;90     return r;	
000022  4618              MOV      r0,r3
;;;91     } 
000024  bd30              POP      {r4,r5,pc}
;;;92     
                          ENDP

000026  0000              DCW      0x0000
                  |L2.40|
                          DCD      Table95

                          AREA ||area_number.3||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.3||, ||.text||
                  putchar0 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b530              PUSH     {r4,r5,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  4b0e              LDR      r3,|L3.60|
;;;83     
;;;84     for(j=1;j<num;j++)
000004  f44f6480          MOV      r4,#0x400
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  89d9              LDRH     r1,[r3,#0xe]
                  |L3.10|
00000a  42a1              CMP      r1,r4                 ;84
00000c  d0fd              BEQ      |L3.10|
00000e  b931              CBNZ     r1,|L3.30|
000010  4a0b              LDR      r2,|L3.64|
000012  7d15              LDRB     r5,[r2,#0x14]
000014  f0150f60          TST      r5,#0x60
000018  d001              BEQ      |L3.30|
00001a  7010              STRB     r0,[r2,#0]            ;84
00001c  bd30              POP      {r4,r5,pc}            ;84
                  |L3.30|
00001e  4d09              LDR      r5,|L3.68|
000020  895a              LDRH     r2,[r3,#0xa]          ;84  ; tx_wr_index0
;;;88     	}
;;;89     
;;;90     return r;	
000022  54a8              STRB     r0,[r5,r2]
;;;91     } 
000024  1c52              ADDS     r2,r2,#1
000026  b290              UXTH     r0,r2
000028  8158              STRH     r0,[r3,#0xa]
00002a  42a0              CMP      r0,r4
00002c  d102              BNE      |L3.52|
00002e  f04f0000          MOV      r0,#0
000032  8158              STRH     r0,[r3,#0xa]
                  |L3.52|
000034  f1010101          ADD      r1,r1,#1
000038  81d9              STRH     r1,[r3,#0xe]
00003a  bd30              POP      {r4,r5,pc}
;;;92     
                          ENDP

                  |L3.60|
                          DCD      ||.data||
                  |L3.64|
                          DCD      0x4000c000
                  |L3.68|
                          DCD      ||.bss||+0x464

                          AREA ||area_number.4||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.4||, ||.text||
                  uart_out0 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b5ff              PUSH     {r0-r7,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  ad09              ADD      r5,sp,#0x24
;;;83     
;;;84     for(j=1;j<num;j++)
000004  cde0              LDM      r5,{r5-r7}
000006  f04f0400          MOV      r4,#0
00000a  f88d1000          STRB     r1,[sp,#0]
;;;85     	{
;;;86          ptr++;
00000e  f88d2001          STRB     r2,[sp,#1]
;;;87     	r=((*ptr)^Table87[r]);
000012  f88d3002          STRB     r3,[sp,#2]
000016  f88d5003          STRB     r5,[sp,#3]
00001a  f88d6004          STRB     r6,[sp,#4]            ;84
00001e  f88d7005          STRB     r7,[sp,#5]            ;84
;;;88     	}
;;;89     
;;;90     return r;	
000022  4621              MOV      r1,r4
;;;91     } 
000024  466d              MOV      r5,sp
000026  e005              B        |L4.52|
                  |L4.40|
000028  5c6a              LDRB     r2,[r5,r1]
00002a  ea820404          EOR      r4,r2,r4
00002e  f1010101          ADD      r1,r1,#1
000032  b2c9              UXTB     r1,r1
                  |L4.52|
000034  4281              CMP      r1,r0
000036  d3f7              BCC      |L4.40|
000038  5428              STRB     r0,[r5,r0]
00003a  ea800204          EOR      r2,r0,r4
00003e  eb050100          ADD      r1,r5,r0
000042  704a              STRB     r2,[r1,#1]
000044  f04f020a          MOV      r2,#0xa
000048  708a              STRB     r2,[r1,#2]
00004a  f04f0400          MOV      r4,#0
00004e  f1000603          ADD      r6,r0,#3
000052  e005              B        |L4.96|
                  |L4.84|
000054  5d28              LDRB     r0,[r5,r4]
000056  f7fffffe          BL       putchar0
00005a  f1040401          ADD      r4,r4,#1
00005e  b2e4              UXTB     r4,r4
                  |L4.96|
000060  42b4              CMP      r4,r6
000062  d3f7              BCC      |L4.84|
000064  bdff              POP      {r0-r7,pc}
;;;92     
                          ENDP


                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  uart_out_buff0 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b570              PUSH     {r4-r6,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;83     
;;;84     for(j=1;j<num;j++)
000004  460d              MOV      r5,r1
000006  f04f0200          MOV      r2,#0
00000a  466e              MOV      r6,sp
;;;85     	{
;;;86          ptr++;
00000c  e004              B        |L5.24|
                  |L5.14|
00000e  5c81              LDRB     r1,[r0,r2]
;;;87     	r=((*ptr)^Table87[r]);
000010  54b1              STRB     r1,[r6,r2]
000012  f1020201          ADD      r2,r2,#1
000016  b2d2              UXTB     r2,r2
                  |L5.24|
000018  42aa              CMP      r2,r5                 ;84
00001a  d3f8              BCC      |L5.14|
00001c  f04f0400          MOV      r4,#0                 ;84
000020  e005              B        |L5.46|
                  |L5.34|
;;;88     	}
;;;89     
;;;90     return r;	
000022  5d30              LDRB     r0,[r6,r4]
;;;91     } 
000024  f7fffffe          BL       putchar0
000028  f1040401          ADD      r4,r4,#1
00002c  b2e4              UXTB     r4,r4
                  |L5.46|
00002e  42ac              CMP      r4,r5
000030  d3f7              BCC      |L5.34|
000032  b00f              ADD      sp,sp,#0x3c
000034  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.6||, ||.text||
                  uart_out_adr0 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b570              PUSH     {r4-r6,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;83     
;;;84     for(j=1;j<num;j++)
000004  f04f0300          MOV      r3,#0
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  461a              MOV      r2,r3
00000a  466d              MOV      r5,sp                 ;84
00000c  e006              B        |L6.28|
                  |L6.14|
00000e  5c84              LDRB     r4,[r0,r2]            ;86
000010  54ac              STRB     r4,[r5,r2]
000012  ea840303          EOR      r3,r4,r3
000016  f1020201          ADD      r2,r2,#1
00001a  b2d2              UXTB     r2,r2                 ;84
                  |L6.28|
00001c  428a              CMP      r2,r1                 ;84
00001e  d3f6              BCC      |L6.14|
000020  f04f00c8          MOV      r0,#0xc8              ;84
;;;88     	}
;;;89     
;;;90     return r;	
;;;91     } 
000024  f88d000a          STRB     r0,[sp,#0xa]
000028  5469              STRB     r1,[r5,r1]
00002a  ea830301          EOR      r3,r3,r1
00002e  eb050001          ADD      r0,r5,r1
000032  7043              STRB     r3,[r0,#1]
000034  f04f020a          MOV      r2,#0xa
000038  7082              STRB     r2,[r0,#2]
00003a  f04f0400          MOV      r4,#0
00003e  f1010603          ADD      r6,r1,#3
000042  e005              B        |L6.80|
                  |L6.68|
000044  5d28              LDRB     r0,[r5,r4]
000046  f7fffffe          BL       putchar0
00004a  f1040401          ADD      r4,r4,#1
00004e  b2e4              UXTB     r4,r4
                  |L6.80|
000050  42b4              CMP      r4,r6
000052  d3f7              BCC      |L6.68|
000054  b00f              ADD      sp,sp,#0x3c
000056  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP


                          AREA ||area_number.7||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.7||, ||.text||
                  uart_out_adr_block PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  b09a              SUB      sp,sp,#0x68
;;;83     
;;;84     for(j=1;j<num;j++)
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  f04f0164          MOV      r1,#0x64
00000c  a801              ADD      r0,sp,#4              ;86
00000e  f7fffffe          BL       __aeabi_memclr4
000012  f04f0016          MOV      r0,#0x16
000016  f7fffffe          BL       putchar0
00001a  f04f000a          MOV      r0,#0xa               ;84
00001e  f7fffffe          BL       putchar0
;;;88     	}
;;;89     
;;;90     return r;	
000022  f89d0068          LDRB     r0,[sp,#0x68]
;;;91     } 
000026  f080051c          EOR      r5,r0,#0x1c
00002a  f7fffffe          BL       putchar0
00002e  f89d0069          LDRB     r0,[sp,#0x69]
000032  ea850500          EOR      r5,r5,r0
000036  f7fffffe          BL       putchar0
00003a  f89d006a          LDRB     r0,[sp,#0x6a]
00003e  ea850500          EOR      r5,r5,r0
000042  f7fffffe          BL       putchar0
000046  f89d006b          LDRB     r0,[sp,#0x6b]
00004a  ea850500          EOR      r5,r5,r0
00004e  f7fffffe          BL       putchar0
000052  f04f0400          MOV      r4,#0
000056  e006              B        |L7.102|
                  |L7.88|
000058  5d38              LDRB     r0,[r7,r4]
00005a  ea850500          EOR      r5,r5,r0
00005e  f7fffffe          BL       putchar0
000062  f1040401          ADD      r4,r4,#1
                  |L7.102|
000066  42b4              CMP      r4,r6
000068  d3f6              BCC      |L7.88|
00006a  f1060606          ADD      r6,r6,#6
00006e  b2f0              UXTB     r0,r6
000070  ea850500          EOR      r5,r5,r0
000074  f7fffffe          BL       putchar0
000078  4628              MOV      r0,r5
00007a  f7fffffe          BL       putchar0
00007e  b01d              ADD      sp,sp,#0x74
000080  200a              MOVS     r0,#0xa
000082  e8bd40f0          POP      {r4-r7,lr}
000086  f7ffbffe          B.W      putchar0
;;;92     
                          ENDP


                          AREA ||area_number.8||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.text||
                  rs232_data_out_1 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;83     
;;;84     for(j=1;j<num;j++)
000004  481e              LDR      r0,|L8.128|
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  481d              LDR      r0,|L8.132|
00000e  7800              LDRB     r0,[r0,#0]            ;86  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  481c              LDR      r0,|L8.136|
000016  8800              LDRH     r0,[r0,#0]  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;84
00001c  481b              LDR      r0,|L8.140|
00001e  8800              LDRH     r0,[r0,#0]            ;84  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]            ;84
;;;88     	}
;;;89     
;;;90     return r;	
;;;91     } 
000024  481a              LDR      r0,|L8.144|
000026  8800              LDRH     r0,[r0,#0]  ; net_U
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  4819              LDR      r0,|L8.148|
00002e  8800              LDRH     r0,[r0,#0]  ; net_F
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  4818              LDR      r0,|L8.152|
000036  8800              LDRH     r0,[r0,#0]  ; t_ext
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  4817              LDR      r0,|L8.156|
00003e  6801              LDR      r1,[r0,#0]  ; bps
000040  f8ad100e          STRH     r1,[sp,#0xe]
000044  6881              LDR      r1,[r0,#8]  ; bps
000046  f8ad1010          STRH     r1,[sp,#0x10]
00004a  68c1              LDR      r1,[r0,#0xc]  ; bps
00004c  f8ad1012          STRH     r1,[sp,#0x12]
000050  f8101c1b          LDRB     r1,[r0,#-0x1b]  ; bps
000054  f8ad1014          STRH     r1,[sp,#0x14]
000058  6e81              LDR      r1,[r0,#0x68]  ; bps
00005a  f8ad1016          STRH     r1,[sp,#0x16]
00005e  6f01              LDR      r1,[r0,#0x70]  ; bps
000060  f8ad1018          STRH     r1,[sp,#0x18]
000064  6f41              LDR      r1,[r0,#0x74]  ; bps
000066  f8ad101a          STRH     r1,[sp,#0x1a]
00006a  f890004d          LDRB     r0,[r0,#0x4d]  ; bps
00006e  f8ad001c          STRH     r0,[sp,#0x1c]
000072  211e              MOVS     r1,#0x1e
000074  4668              MOV      r0,sp
000076  f7fffffe          BL       uart_out_adr0
00007a  b00f              ADD      sp,sp,#0x3c
00007c  bd00              POP      {pc}
;;;92     
                          ENDP

00007e  0000              DCW      0x0000
                  |L8.128|
                          DCD      avar_stat
                  |L8.132|
                          DCD      spc_stat
                  |L8.136|
                          DCD      load_U
                  |L8.140|
                          DCD      load_I
                  |L8.144|
                          DCD      net_U
                  |L8.148|
                          DCD      net_F
                  |L8.152|
                          DCD      t_ext
                  |L8.156|
                          DCD      bps+0x1c

                          AREA ||area_number.9||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.text||
                  rs232_data_out PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;83     
;;;84     for(j=1;j<num;j++)
000004  4822              LDR      r0,|L9.144|
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  4821              LDR      r0,|L9.148|
00000e  7800              LDRB     r0,[r0,#0]            ;86  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  4820              LDR      r0,|L9.152|
000016  8800              LDRH     r0,[r0,#0]  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;84
00001c  481f              LDR      r0,|L9.156|
00001e  8800              LDRH     r0,[r0,#0]            ;84  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]            ;84
;;;88     	}
;;;89     
;;;90     return r;	
;;;91     } 
000024  481e              LDR      r0,|L9.160|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  481d              LDR      r0,|L9.164|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  481c              LDR      r0,|L9.168|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  481b              LDR      r0,|L9.172|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  481a              LDR      r0,|L9.176|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  4819              LDR      r0,|L9.180|
00004e  6801              LDR      r1,[r0,#0]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6881              LDR      r1,[r0,#8]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  68c1              LDR      r1,[r0,#0xc]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  f8101c1b          LDRB     r1,[r0,#-0x1b]  ; bps
000064  f8ad1018          STRH     r1,[sp,#0x18]
000068  6e81              LDR      r1,[r0,#0x68]  ; bps
00006a  f8ad101a          STRH     r1,[sp,#0x1a]
00006e  6f01              LDR      r1,[r0,#0x70]  ; bps
000070  f8ad101c          STRH     r1,[sp,#0x1c]
000074  6f41              LDR      r1,[r0,#0x74]  ; bps
000076  f8ad101e          STRH     r1,[sp,#0x1e]
00007a  f890004d          LDRB     r0,[r0,#0x4d]  ; bps
00007e  f8ad0020          STRH     r0,[sp,#0x20]
000082  2122              MOVS     r1,#0x22
000084  4668              MOV      r0,sp
000086  f7fffffe          BL       uart_out_adr0
00008a  b00f              ADD      sp,sp,#0x3c
00008c  bd00              POP      {pc}
;;;92     
                          ENDP

00008e  0000              DCW      0x0000
                  |L9.144|
                          DCD      avar_stat
                  |L9.148|
                          DCD      spc_stat
                  |L9.152|
                          DCD      load_U
                  |L9.156|
                          DCD      load_I
                  |L9.160|
                          DCD      net_Ua
                  |L9.164|
                          DCD      net_Ub
                  |L9.168|
                          DCD      net_Uc
                  |L9.172|
                          DCD      net_F3
                  |L9.176|
                          DCD      t_ext
                  |L9.180|
                          DCD      bps+0x1c

                          AREA ||area_number.10||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.text||
                  rs232_data_out_tki PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b500              PUSH     {lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  b08f              SUB      sp,sp,#0x3c
;;;83     
;;;84     for(j=1;j<num;j++)
000004  4834              LDR      r0,|L10.216|
000006  6800              LDR      r0,[r0,#0]  ; avar_stat
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  f8ad0000          STRH     r0,[sp,#0]
00000c  4833              LDR      r0,|L10.220|
00000e  7800              LDRB     r0,[r0,#0]            ;86  ; spc_stat
000010  f8ad0002          STRH     r0,[sp,#2]
000014  4832              LDR      r0,|L10.224|
000016  8800              LDRH     r0,[r0,#0]  ; load_U
000018  f8ad0004          STRH     r0,[sp,#4]            ;84
00001c  4831              LDR      r0,|L10.228|
00001e  8800              LDRH     r0,[r0,#0]            ;84  ; load_I
000020  f8ad0006          STRH     r0,[sp,#6]            ;84
;;;88     	}
;;;89     
;;;90     return r;	
;;;91     } 
000024  4830              LDR      r0,|L10.232|
000026  8800              LDRH     r0,[r0,#0]  ; net_Ua
000028  f8ad0008          STRH     r0,[sp,#8]
00002c  482f              LDR      r0,|L10.236|
00002e  8800              LDRH     r0,[r0,#0]  ; net_Ub
000030  f8ad000a          STRH     r0,[sp,#0xa]
000034  482e              LDR      r0,|L10.240|
000036  8800              LDRH     r0,[r0,#0]  ; net_Uc
000038  f8ad000c          STRH     r0,[sp,#0xc]
00003c  482d              LDR      r0,|L10.244|
00003e  8800              LDRH     r0,[r0,#0]  ; net_F3
000040  f8ad000e          STRH     r0,[sp,#0xe]
000044  482c              LDR      r0,|L10.248|
000046  8800              LDRH     r0,[r0,#0]  ; t_ext
000048  f8ad0010          STRH     r0,[sp,#0x10]
00004c  482b              LDR      r0,|L10.252|
00004e  6801              LDR      r1,[r0,#0]  ; bps
000050  f8ad1012          STRH     r1,[sp,#0x12]
000054  6881              LDR      r1,[r0,#8]  ; bps
000056  f8ad1014          STRH     r1,[sp,#0x14]
00005a  68c1              LDR      r1,[r0,#0xc]  ; bps
00005c  f8ad1016          STRH     r1,[sp,#0x16]
000060  f8101c1b          LDRB     r1,[r0,#-0x1b]  ; bps
000064  f8ad1018          STRH     r1,[sp,#0x18]
000068  6e81              LDR      r1,[r0,#0x68]  ; bps
00006a  f8ad101a          STRH     r1,[sp,#0x1a]
00006e  6f01              LDR      r1,[r0,#0x70]  ; bps
000070  f8ad101c          STRH     r1,[sp,#0x1c]
000074  6f41              LDR      r1,[r0,#0x74]  ; bps
000076  f8ad101e          STRH     r1,[sp,#0x1e]
00007a  f890104d          LDRB     r1,[r0,#0x4d]  ; bps
00007e  f8ad1020          STRH     r1,[sp,#0x20]
000082  f8d010d0          LDR      r1,[r0,#0xd0]  ; bps
000086  f8ad1022          STRH     r1,[sp,#0x22]
00008a  f8d010d8          LDR      r1,[r0,#0xd8]  ; bps
00008e  f8ad1024          STRH     r1,[sp,#0x24]
000092  f8d010dc          LDR      r1,[r0,#0xdc]  ; bps
000096  f8ad1026          STRH     r1,[sp,#0x26]
00009a  f89010b5          LDRB     r1,[r0,#0xb5]  ; bps
00009e  f8ad1028          STRH     r1,[sp,#0x28]
0000a2  f8d01138          LDR      r1,[r0,#0x138]  ; bps
0000a6  f8ad102a          STRH     r1,[sp,#0x2a]
0000aa  f8d01140          LDR      r1,[r0,#0x140]  ; bps
0000ae  f8ad102c          STRH     r1,[sp,#0x2c]
0000b2  f8d01144          LDR      r1,[r0,#0x144]  ; bps
0000b6  f8ad102e          STRH     r1,[sp,#0x2e]
0000ba  f890011d          LDRB     r0,[r0,#0x11d]  ; bps
0000be  f8ad0030          STRH     r0,[sp,#0x30]
0000c2  480f              LDR      r0,|L10.256|
0000c4  8800              LDRH     r0,[r0,#0]  ; Ib_ips_termokompensat
0000c6  f8ad0032          STRH     r0,[sp,#0x32]
0000ca  2134              MOVS     r1,#0x34
0000cc  4668              MOV      r0,sp
0000ce  f7fffffe          BL       uart_out_adr0
0000d2  b00f              ADD      sp,sp,#0x3c
0000d4  bd00              POP      {pc}
;;;92     
                          ENDP

0000d6  0000              DCW      0x0000
                  |L10.216|
                          DCD      avar_stat
                  |L10.220|
                          DCD      spc_stat
                  |L10.224|
                          DCD      load_U
                  |L10.228|
                          DCD      load_I
                  |L10.232|
                          DCD      net_Ua
                  |L10.236|
                          DCD      net_Ub
                  |L10.240|
                          DCD      net_Uc
                  |L10.244|
                          DCD      net_F3
                  |L10.248|
                          DCD      t_ext
                  |L10.252|
                          DCD      bps+0x1c
                  |L10.256|
                          DCD      Ib_ips_termokompensat

                          AREA ||area_number.11||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.text||
                  UARTInit PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
;;;83     
;;;84     for(j=1;j<num;j++)
000004  4abc              LDR      r2,|L11.760|
000006  f8df82e8          LDR      r8,|L11.752|
00000a  f8df92e8          LDR      r9,|L11.756|
;;;85     	{
;;;86          ptr++;
00000e  6812              LDR      r2,[r2,#0]
;;;87     	r=((*ptr)^Table87[r]);
000010  2603              MOVS     r6,#3
000012  2783              MOVS     r7,#0x83
000014  2507              MOVS     r5,#7
000016  0893              LSRS     r3,r2,#2
000018  0854              LSRS     r4,r2,#1              ;84
00001a  ea4f0cd2          LSR      r12,r2,#3             ;84
00001e  b120              CBZ      r0,|L11.42|
000020  2801              CMP      r0,#1                 ;84
;;;88     	}
;;;89     
;;;90     return r;	
000022  d030              BEQ      |L11.134|
;;;91     } 
000024  2000              MOVS     r0,#0
                  |L11.38|
000026  e8bd87f0          POP      {r4-r10,pc}
                  |L11.42|
00002a  f8d80000          LDR      r0,[r8,#0]
00002e  f02000f0          BIC      r0,r0,#0xf0
000032  f8c80000          STR      r0,[r8,#0]
000036  f8d80000          LDR      r0,[r8,#0]
00003a  f0400050          ORR      r0,r0,#0x50
00003e  f8c80000          STR      r0,[r8,#0]
000042  f8d901a8          LDR      r0,[r9,#0x1a8]
000046  f3c01081          UBFX     r0,r0,#6,#2
00004a  2801              CMP      r0,#1
00004c  d008              BEQ      |L11.96|
00004e  2802              CMP      r0,#2
000050  d003              BEQ      |L11.90|
000052  2803              CMP      r0,#3
000054  d003              BEQ      |L11.94|
000056  461a              MOV      r2,r3
000058  e002              B        |L11.96|
                  |L11.90|
00005a  4622              MOV      r2,r4
00005c  e000              B        |L11.96|
                  |L11.94|
00005e  4662              MOV      r2,r12
                  |L11.96|
000060  4ca6              LDR      r4,|L11.764|
000062  7327              STRB     r7,[r4,#0xc]
000064  ea4f1012          LSR      r0,r2,#4
000068  fbb0f0f1          UDIV     r0,r0,r1
00006c  ea4f2110          LSR      r1,r0,#8
000070  7121              STRB     r1,[r4,#4]
000072  7020              STRB     r0,[r4,#0]
000074  7326              STRB     r6,[r4,#0xc]
000076  7225              STRB     r5,[r4,#8]
000078  f04f0005          MOV      r0,#5
00007c  f7fffffe          BL       NVIC_EnableIRQ
000080  6065              STR      r5,[r4,#4]
000082  2001              MOVS     r0,#1
000084  e7cf              B        |L11.38|
                  |L11.134|
000086  f8d80010          LDR      r0,[r8,#0x10]
00008a  f020000f          BIC      r0,r0,#0xf
00008e  f8c80010          STR      r0,[r8,#0x10]
000092  f8d80010          LDR      r0,[r8,#0x10]
000096  f040000a          ORR      r0,r0,#0xa
00009a  f8c80010          STR      r0,[r8,#0x10]
00009e  f8d901a8          LDR      r0,[r9,#0x1a8]
0000a2  f3c02001          UBFX     r0,r0,#8,#2
0000a6  2801              CMP      r0,#1
0000a8  d008              BEQ      |L11.188|
0000aa  2802              CMP      r0,#2
0000ac  d003              BEQ      |L11.182|
0000ae  2803              CMP      r0,#3
0000b0  d003              BEQ      |L11.186|
0000b2  461a              MOV      r2,r3
0000b4  e002              B        |L11.188|
                  |L11.182|
0000b6  4622              MOV      r2,r4
0000b8  e000              B        |L11.188|
                  |L11.186|
0000ba  4662              MOV      r2,r12
                  |L11.188|
0000bc  4c90              LDR      r4,|L11.768|
0000be  7327              STRB     r7,[r4,#0xc]
0000c0  ea4f1012          LSR      r0,r2,#4
0000c4  fbb0f0f1          UDIV     r0,r0,r1
0000c8  ea4f2110          LSR      r1,r0,#8
0000cc  7121              STRB     r1,[r4,#4]
0000ce  7020              STRB     r0,[r4,#0]
0000d0  7326              STRB     r6,[r4,#0xc]
0000d2  7225              STRB     r5,[r4,#8]
0000d4  f04f0006          MOV      r0,#6
0000d8  f7fffffe          BL       NVIC_EnableIRQ
0000dc  6065              STR      r5,[r4,#4]
0000de  2001              MOVS     r0,#1
0000e0  e7a1              B        |L11.38|
;;;92     
                          ENDP

                  UART0_IRQHandler PROC
;;;488    //***********************************************
;;;489    void UART0_IRQHandler (void) 
0000e2  e92d4ff8          PUSH     {r3-r11,lr}
;;;490    {
;;;491    uint8_t IIRValue, LSRValue;
;;;492    uint8_t Dummy = Dummy;
;;;493    char /*status,u0iir,*/data;
;;;494    
;;;495    plazma_uart0++;
0000e6  4e87              LDR      r6,|L11.772|
0000e8  78f0              LDRB     r0,[r6,#3]  ; plazma_uart0
0000ea  f1000001          ADD      r0,r0,#1
0000ee  70f0              STRB     r0,[r6,#3]
;;;496    
;;;497    
;;;498    			
;;;499    IIRValue = LPC_UART0->IIR;
0000f0  4982              LDR      r1,|L11.764|
0000f2  6888              LDR      r0,[r1,#8]
;;;500        
;;;501    IIRValue >>= 1;			/* skip pending bit in IIR */
0000f4  ea4f0050          LSR      r0,r0,#1
;;;502    IIRValue &= 0x07;			/* check bit 1~3, interrupt identification */
0000f8  f0000007          AND      r0,r0,#7
;;;503    if ( IIRValue == IIR_RLS )		/* Receive Line Status */
;;;504      	{
;;;505    	LSRValue = LPC_UART0->LSR;
;;;506    
;;;507    	/* Receive Line Status */
;;;508    	if ( LSRValue & (LSR_OE|LSR_PE|LSR_FE|LSR_RXFE|LSR_BI) )
;;;509    		{
;;;510    	  	/* There are errors or break interrupt */
;;;511    	  	/* Read LSR will clear the interrupt */
;;;512    	  	UART0Status = LSRValue;
;;;513    	  	Dummy = LPC_UART0->RBR;		/* Dummy read on RX to clear 
;;;514    							interrupt, then bail out */
;;;515    	  	return;
;;;516    		}
;;;517    	if ( LSRValue & LSR_RDR )	/* Receive Data Ready */			
;;;518    		{
;;;519    		
;;;520    		data=LPC_UART0->RBR;
;;;521    		rx_buffer0[rx_wr_index0]=data;
0000fc  f8dfb208          LDR      r11,|L11.776|
;;;522       		bRXIN0=1;
;;;523       		if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
000100  f44f6a80          MOV      r10,#0x400
000104  f04f0901          MOV      r9,#1                 ;522
000108  f04f0400          MOV      r4,#0
00010c  2803              CMP      r0,#3                 ;503
00010e  d023              BEQ      |L11.344|
;;;524       		if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;525          		{
;;;526          		rx_counter0=0;
;;;527          		rx_buffer_overflow0=1;
;;;528          		}
;;;529    
;;;530    		
;;;531    		}
;;;532      	}
;;;533    else if ( IIRValue == IIR_RDA )	/* Receive Data Available */
000110  2802              CMP      r0,#2
000112  d040              BEQ      |L11.406|
;;;534      	{
;;;535    	plazma_bat_drv0++;
;;;536    	modbus_plazma++;
;;;537    	while((LPC_UART0->LSR)&0x0001) {	
;;;538    	data=LPC_UART0->RBR;
;;;539    	rx_buffer0[rx_wr_index0]=data;
;;;540       	bRXIN0=1;
;;;541       	if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;;;542       	if (++rx_counter0 == RX_BUFFER_SIZE0)
;;;543          	{
;;;544          	rx_counter0=0;
;;;545          	rx_buffer_overflow0=1;
;;;546          	}
;;;547    	modbus_rx_buffer[modbus_rx_buffer_ptr]=data;
;;;548    	modbus_rx_buffer_ptr++;
;;;549    	modbus_timeout_cnt=0;
;;;550    
;;;551    
;;;552    
;;;553    	
;;;554    
;;;555    	if(data==0x7e)
;;;556    		{
;;;557    		bat_drv_rx_cnt=0;
;;;558    		bat_drv_rx_cnt=0;
;;;559    		}
;;;560    	//if(bat_drv_rx_cnt<50)
;;;561    	bat_drv_rx_buff[bat_drv_rx_cnt++]=data;
;;;562    	//if(bat_drv_rx_cnt==50) bat_drv_rx_in=1; 
;;;563    
;;;564    	if(data==0x0d)
;;;565    		{
;;;566    		if(BAT_TYPE==2)
;;;567    			{
;;;568    			if(sacredSunRequestPhase==0)	mem_copy (liBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;569    			else if(sacredSunRequestPhase==1)	mem_copy (&liBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;570    			sacredSunSilentCnt=0;
;;;571    			}
;;;572    		else if (BAT_TYPE==3)
;;;573    			{
;;;574    			numOfPacks_=((ascii2halFhex(bat_drv_rx_buff[15]))<<4)+((ascii2halFhex(bat_drv_rx_buff[16])));
;;;575    			if(numOfPacks_)numOfPacks_--;
;;;576    		   	if(numOfPacks_<0)numOfPacks_=0;
;;;577    			if(numOfPacks_>NUMBAT)numOfPacks_=0;
;;;578    			zTTSilentCnt[numOfPacks_]=50;
;;;579    
;;;580    			if(zTTRequestPhase==0)	mem_copy (liBatteryInBuff, bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;581    			else if(zTTRequestPhase==1)	mem_copy (&liBatteryInBuff[150], bat_drv_rx_buff,  bat_drv_rx_cnt);
;;;582    			//zTTSilentCnt=0;
;;;583    			}
;;;584    		}
;;;585    
;;;586    	}
;;;587      	}
;;;588    else if ( IIRValue == IIR_CTI )	/* Character timeout indicator */
000114  2806              CMP      r0,#6
000116  d07e              BEQ      |L11.534|
;;;589      	{
;;;590    	/* Character Time-out indicator */
;;;591    	UART0Status |= 0x100;		/* Bit 9 as the CTI error */
;;;592      	}
;;;593    else if ( IIRValue == IIR_THRE )	/* THRE, transmit holding register empty */
000118  2801              CMP      r0,#1
00011a  d11b              BNE      |L11.340|
;;;594      	{
;;;595    	/* THRE interrupt */
;;;596    	
;;;597    	plazma_bat_drv1++;
00011c  487b              LDR      r0,|L11.780|
00011e  8802              LDRH     r2,[r0,#0]  ; plazma_bat_drv1
000120  f1020201          ADD      r2,r2,#1
000124  8002              STRH     r2,[r0,#0]
;;;598    	LSRValue = LPC_UART0->LSR;		/* Check status in the LSR to see if
000126  7d08              LDRB     r0,[r1,#0x14]
;;;599    									valid data in U0THR or not */
;;;600    	if ( LSRValue & LSR_THRE )
000128  0680              LSLS     r0,r0,#26
00012a  d575              BPL      |L11.536|
;;;601    		{
;;;602    	  	UART0TxEmpty = 1;
00012c  f8869000          STRB     r9,[r6,#0]
;;;603    		if (tx_counter0)
000130  89f0              LDRH     r0,[r6,#0xe]  ; tx_counter0
000132  2800              CMP      r0,#0
000134  d00e              BEQ      |L11.340|
;;;604       			{
;;;605       			--tx_counter0;
000136  f1a00001          SUB      r0,r0,#1
00013a  81f0              STRH     r0,[r6,#0xe]
;;;606       			LPC_UART0->THR=tx_buffer0[tx_rd_index0];
00013c  89b0              LDRH     r0,[r6,#0xc]  ; tx_rd_index0
00013e  f50b6280          ADD      r2,r11,#0x400
000142  5c12              LDRB     r2,[r2,r0]
000144  700a              STRB     r2,[r1,#0]
;;;607       			if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000146  f1000001          ADD      r0,r0,#1
00014a  b280              UXTH     r0,r0
00014c  81b0              STRH     r0,[r6,#0xc]
00014e  4550              CMP      r0,r10
000150  d100              BNE      |L11.340|
000152  81b4              STRH     r4,[r6,#0xc]
                  |L11.340|
;;;608       			}
;;;609    		}
;;;610    	else
;;;611    		{
;;;612    	  	UART0TxEmpty = 0;
;;;613    		}
;;;614      	}
;;;615    }
000154  e8bd8ff8          POP      {r3-r11,pc}
                  |L11.344|
000158  7d08              LDRB     r0,[r1,#0x14]         ;505
00015a  f0100f9e          TST      r0,#0x9e              ;508
00015e  d002              BEQ      |L11.358|
000160  6130              STR      r0,[r6,#0x10]         ;512  ; UART0Status
000162  7808              LDRB     r0,[r1,#0]            ;513
000164  e7f6              B        |L11.340|
                  |L11.358|
000166  07c0              LSLS     r0,r0,#31             ;517
000168  d0f4              BEQ      |L11.340|
00016a  7809              LDRB     r1,[r1,#0]            ;520
00016c  88b0              LDRH     r0,[r6,#4]            ;521  ; rx_wr_index0
00016e  f80b1000          STRB     r1,[r11,r0]           ;521
000172  f8869001          STRB     r9,[r6,#1]            ;522
000176  1c40              ADDS     r0,r0,#1              ;523
000178  b280              UXTH     r0,r0                 ;523
00017a  80b0              STRH     r0,[r6,#4]            ;523
00017c  4550              CMP      r0,r10                ;523
00017e  d100              BNE      |L11.386|
000180  80b4              STRH     r4,[r6,#4]            ;523
                  |L11.386|
000182  8930              LDRH     r0,[r6,#8]            ;524  ; rx_counter0
000184  1c40              ADDS     r0,r0,#1              ;524
000186  b280              UXTH     r0,r0                 ;524
000188  8130              STRH     r0,[r6,#8]            ;524
00018a  4550              CMP      r0,r10                ;524
00018c  d1e2              BNE      |L11.340|
00018e  8134              STRH     r4,[r6,#8]            ;526
000190  f8869002          STRB     r9,[r6,#2]            ;527
000194  e7de              B        |L11.340|
                  |L11.406|
000196  4a5e              LDR      r2,|L11.784|
000198  8810              LDRH     r0,[r2,#0]            ;535  ; plazma_bat_drv0
00019a  f1000001          ADD      r0,r0,#1              ;535
00019e  8010              STRH     r0,[r2,#0]            ;535
0001a0  485c              LDR      r0,|L11.788|
0001a2  8802              LDRH     r2,[r0,#0]            ;536  ; modbus_plazma
0001a4  f1020201          ADD      r2,r2,#1              ;536
0001a8  8002              STRH     r2,[r0,#0]            ;536
0001aa  485d              LDR      r0,|L11.800|
0001ac  f8df8168          LDR      r8,|L11.792|
0001b0  4d5a              LDR      r5,|L11.796|
0001b2  9000              STR      r0,[sp,#0]            ;537
0001b4  e07f              B        |L11.694|
                  |L11.438|
0001b6  7800              LDRB     r0,[r0,#0]            ;538
0001b8  88b1              LDRH     r1,[r6,#4]            ;539  ; rx_wr_index0
0001ba  f80b0001          STRB     r0,[r11,r1]           ;539
0001be  f8869001          STRB     r9,[r6,#1]            ;540
0001c2  1c49              ADDS     r1,r1,#1              ;541
0001c4  b289              UXTH     r1,r1                 ;541
0001c6  80b1              STRH     r1,[r6,#4]            ;541
0001c8  4551              CMP      r1,r10                ;541
0001ca  d100              BNE      |L11.462|
0001cc  80b4              STRH     r4,[r6,#4]            ;541
                  |L11.462|
0001ce  8931              LDRH     r1,[r6,#8]            ;542  ; rx_counter0
0001d0  1c49              ADDS     r1,r1,#1              ;542
0001d2  b289              UXTH     r1,r1                 ;542
0001d4  8131              STRH     r1,[r6,#8]            ;542
0001d6  4551              CMP      r1,r10                ;542
0001d8  d102              BNE      |L11.480|
0001da  8134              STRH     r4,[r6,#8]            ;544
0001dc  f8869002          STRB     r9,[r6,#2]            ;545
                  |L11.480|
0001e0  4a51              LDR      r2,|L11.808|
0001e2  4b50              LDR      r3,|L11.804|
0001e4  7811              LDRB     r1,[r2,#0]            ;547  ; modbus_rx_buffer_ptr
0001e6  5458              STRB     r0,[r3,r1]            ;547
0001e8  f1010101          ADD      r1,r1,#1              ;548
0001ec  7011              STRB     r1,[r2,#0]            ;548
0001ee  494f              LDR      r1,|L11.812|
0001f0  700c              STRB     r4,[r1,#0]            ;549
0001f2  287e              CMP      r0,#0x7e              ;555
0001f4  d100              BNE      |L11.504|
0001f6  802c              STRH     r4,[r5,#0]            ;557
                  |L11.504|
0001f8  8829              LDRH     r1,[r5,#0]            ;561  ; bat_drv_rx_cnt
0001fa  f1010201          ADD      r2,r1,#1              ;561
0001fe  b292              UXTH     r2,r2                 ;561
000200  802a              STRH     r2,[r5,#0]            ;561
000202  f8080001          STRB     r0,[r8,r1]            ;561
000206  280d              CMP      r0,#0xd               ;564
000208  d155              BNE      |L11.694|
00020a  4849              LDR      r0,|L11.816|
00020c  f9b00000          LDRSH    r0,[r0,#0]            ;566  ; BAT_TYPE
000210  2802              CMP      r0,#2                 ;566
000212  d005              BEQ      |L11.544|
000214  e001              B        |L11.538|
                  |L11.534|
000216  e054              B        |L11.706|
                  |L11.536|
000218  e058              B        |L11.716|
                  |L11.538|
00021a  2803              CMP      r0,#3                 ;572
00021c  d14b              BNE      |L11.694|
00021e  e012              B        |L11.582|
                  |L11.544|
000220  4844              LDR      r0,|L11.820|
000222  7800              LDRB     r0,[r0,#0]            ;568  ; sacredSunRequestPhase
000224  b110              CBZ      r0,|L11.556|
000226  2801              CMP      r0,#1                 ;569
000228  d006              BEQ      |L11.568|
00022a  e009              B        |L11.576|
                  |L11.556|
00022c  483c              LDR      r0,|L11.800|
00022e  493a              LDR      r1,|L11.792|
000230  3896              SUBS     r0,r0,#0x96           ;568
000232  f7fffffe          BL       mem_copy
000236  e003              B        |L11.576|
                  |L11.568|
000238  4937              LDR      r1,|L11.792|
00023a  9800              LDR      r0,[sp,#0]            ;569
00023c  f7fffffe          BL       mem_copy
                  |L11.576|
000240  483d              LDR      r0,|L11.824|
000242  8004              STRH     r4,[r0,#0]            ;570
000244  e037              B        |L11.694|
                  |L11.582|
000246  f8980010          LDRB     r0,[r8,#0x10]         ;574  ; bat_drv_rx_buff
00024a  f7fffffe          BL       ascii2halFhex
00024e  4607              MOV      r7,r0                 ;574
000250  f898000f          LDRB     r0,[r8,#0xf]          ;574  ; bat_drv_rx_buff
000254  f7fffffe          BL       ascii2halFhex
000258  4938              LDR      r1,|L11.828|
00025a  eb071000          ADD      r0,r7,r0,LSL #4       ;574
00025e  b200              SXTH     r0,r0                 ;574
000260  8008              STRH     r0,[r1,#0]            ;574
000262  b110              CBZ      r0,|L11.618|
000264  f1a00001          SUB      r0,r0,#1              ;575
000268  8008              STRH     r0,[r1,#0]            ;575
                  |L11.618|
00026a  f9b10000          LDRSH    r0,[r1,#0]            ;576  ; numOfPacks_
00026e  2800              CMP      r0,#0                 ;576
000270  da00              BGE      |L11.628|
000272  800c              STRH     r4,[r1,#0]            ;576
                  |L11.628|
000274  4a32              LDR      r2,|L11.832|
000276  f9b10000          LDRSH    r0,[r1,#0]            ;577  ; numOfPacks_
00027a  f9b22000          LDRSH    r2,[r2,#0]            ;577  ; NUMBAT
00027e  4290              CMP      r0,r2                 ;577
000280  dd00              BLE      |L11.644|
000282  800c              STRH     r4,[r1,#0]            ;577
                  |L11.644|
000284  4a2f              LDR      r2,|L11.836|
000286  f9b11000          LDRSH    r1,[r1,#0]            ;578  ; numOfPacks_
00028a  f04f0032          MOV      r0,#0x32              ;578
00028e  f8220011          STRH     r0,[r2,r1,LSL #1]     ;578
000292  482d              LDR      r0,|L11.840|
000294  7800              LDRB     r0,[r0,#0]            ;580  ; zTTRequestPhase
000296  b110              CBZ      r0,|L11.670|
000298  2801              CMP      r0,#1                 ;581
00029a  d10c              BNE      |L11.694|
00029c  e006              B        |L11.684|
                  |L11.670|
00029e  4820              LDR      r0,|L11.800|
0002a0  882a              LDRH     r2,[r5,#0]            ;580  ; bat_drv_rx_cnt
0002a2  491d              LDR      r1,|L11.792|
0002a4  3896              SUBS     r0,r0,#0x96           ;580
0002a6  f7fffffe          BL       mem_copy
0002aa  e004              B        |L11.694|
                  |L11.684|
0002ac  882a              LDRH     r2,[r5,#0]            ;581  ; bat_drv_rx_cnt
0002ae  491a              LDR      r1,|L11.792|
0002b0  9800              LDR      r0,[sp,#0]            ;581
0002b2  f7fffffe          BL       mem_copy
                  |L11.694|
0002b6  4811              LDR      r0,|L11.764|
0002b8  7d01              LDRB     r1,[r0,#0x14]         ;537
0002ba  07c9              LSLS     r1,r1,#31             ;537
0002bc  f47faf7b          BNE      |L11.438|
0002c0  e748              B        |L11.340|
                  |L11.706|
0002c2  6930              LDR      r0,[r6,#0x10]         ;591  ; UART0Status
0002c4  f4407080          ORR      r0,r0,#0x100          ;591
0002c8  6130              STR      r0,[r6,#0x10]         ;591  ; UART0Status
0002ca  e743              B        |L11.340|
                  |L11.716|
0002cc  7034              STRB     r4,[r6,#0]            ;612
0002ce  e741              B        |L11.340|
;;;616    
                          ENDP

                  NVIC_EnableIRQ PROC
;;;1095    */
;;;1096   static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
0002d0  f000021f          AND      r2,r0,#0x1f
;;;1097   {
;;;1098     NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
0002d4  f04f0101          MOV      r1,#1
0002d8  fa01f102          LSL      r1,r1,r2
0002dc  ea4f1050          LSR      r0,r0,#5
0002e0  f04f22e0          MOV      r2,#0xe000e000
0002e4  eb020080          ADD      r0,r2,r0,LSL #2
0002e8  f8c01100          STR      r1,[r0,#0x100]
;;;1099   }
0002ec  4770              BX       lr
;;;1100   
                          ENDP

0002ee  0000              DCW      0x0000
                  |L11.752|
                          DCD      0x4002c000
                  |L11.756|
                          DCD      0x400fc000
                  |L11.760|
                          DCD      SystemFrequency
                  |L11.764|
                          DCD      0x4000c000
                  |L11.768|
                          DCD      0x40010000
                  |L11.772|
                          DCD      ||.data||
                  |L11.776|
                          DCD      ||.bss||+0x64
                  |L11.780|
                          DCD      plazma_bat_drv1
                  |L11.784|
                          DCD      plazma_bat_drv0
                  |L11.788|
                          DCD      modbus_plazma
                  |L11.792|
                          DCD      bat_drv_rx_buff
                  |L11.796|
                          DCD      bat_drv_rx_cnt
                  |L11.800|
                          DCD      liBatteryInBuff+0x96
                  |L11.804|
                          DCD      modbus_rx_buffer
                  |L11.808|
                          DCD      modbus_rx_buffer_ptr
                  |L11.812|
                          DCD      modbus_timeout_cnt
                  |L11.816|
                          DCD      BAT_TYPE
                  |L11.820|
                          DCD      sacredSunRequestPhase
                  |L11.824|
                          DCD      sacredSunSilentCnt
                  |L11.828|
                          DCD      numOfPacks_
                  |L11.832|
                          DCD      NUMBAT
                  |L11.836|
                          DCD      zTTSilentCnt
                  |L11.840|
                          DCD      zTTRequestPhase

                          AREA ||area_number.12||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.text||
                  getchar0 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  4b09              LDR      r3,|L12.40|
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  8919              LDRH     r1,[r3,#8]
                  |L12.4|
;;;83     
;;;84     for(j=1;j<num;j++)
000004  2900              CMP      r1,#0
000006  d0fd              BEQ      |L12.4|
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  4808              LDR      r0,|L12.44|
00000a  88da              LDRH     r2,[r3,#6]            ;84  ; rx_rd_index0
00000c  5c80              LDRB     r0,[r0,r2]            ;86
00000e  1c52              ADDS     r2,r2,#1              ;86
000010  b292              UXTH     r2,r2
000012  80da              STRH     r2,[r3,#6]
000014  f5b26f80          CMP      r2,#0x400
000018  d102              BNE      |L12.32|
00001a  f04f0200          MOV      r2,#0                 ;84
00001e  80da              STRH     r2,[r3,#6]            ;84
                  |L12.32|
000020  f1a10101          SUB      r1,r1,#1              ;84
;;;88     	}
;;;89     
;;;90     return r;	
;;;91     } 
000024  8119              STRH     r1,[r3,#8]
000026  4770              BX       lr
;;;92     
                          ENDP

                  |L12.40|
                          DCD      ||.data||
                  |L12.44|
                          DCD      ||.bss||+0x64

                          AREA ||area_number.13||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.text||
                  uart_in_an0 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b5f0              PUSH     {r4-r7,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  b089              SUB      sp,sp,#0x24
;;;83     
;;;84     for(j=1;j<num;j++)
000004  4c6f              LDR      r4,|L13.452|
000006  2672              MOVS     r6,#0x72
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  2765              MOVS     r7,#0x65
00000a  7820              LDRB     r0,[r4,#0]            ;84  ; UIB0
00000c  2872              CMP      r0,#0x72              ;86
00000e  d16a              BNE      |L13.230|
000010  7860              LDRB     r0,[r4,#1]  ; UIB0
000012  2865              CMP      r0,#0x65
000014  d167              BNE      |L13.230|
000016  78a0              LDRB     r0,[r4,#2]  ; UIB0
000018  2861              CMP      r0,#0x61              ;84
00001a  d164              BNE      |L13.230|
00001c  78e0              LDRB     r0,[r4,#3]            ;84  ; UIB0
00001e  2864              CMP      r0,#0x64              ;84
000020  d161              BNE      |L13.230|
;;;88     	}
;;;89     
;;;90     return r;	
000022  2106              MOVS     r1,#6
;;;91     } 
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       crc_87
00002a  79a1              LDRB     r1,[r4,#6]  ; UIB0
00002c  4288              CMP      r0,r1
00002e  d15a              BNE      |L13.230|
000030  2106              MOVS     r1,#6
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       crc_95
000038  79e1              LDRB     r1,[r4,#7]  ; UIB0
00003a  4288              CMP      r0,r1
00003c  d153              BNE      |L13.230|
00003e  7920              LDRB     r0,[r4,#4]  ; UIB0
000040  7961              LDRB     r1,[r4,#5]  ; UIB0
000042  eb002001          ADD      r0,r0,r1,LSL #8
000046  b280              UXTH     r0,r0
000048  4605              MOV      r5,r0
00004a  9008              STR      r0,[sp,#0x20]
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       lc640_read_long
000052  9007              STR      r0,[sp,#0x1c]
000054  1d28              ADDS     r0,r5,#4
000056  f7fffffe          BL       lc640_read_long
00005a  9006              STR      r0,[sp,#0x18]
00005c  f88d6004          STRB     r6,[sp,#4]
000060  f88d7005          STRB     r7,[sp,#5]
000064  f04f0061          MOV      r0,#0x61
000068  f88d0006          STRB     r0,[sp,#6]
00006c  f04f0064          MOV      r0,#0x64
000070  f88d0007          STRB     r0,[sp,#7]
000074  f89d0020          LDRB     r0,[sp,#0x20]
000078  f88d0008          STRB     r0,[sp,#8]
00007c  f89d0021          LDRB     r0,[sp,#0x21]
000080  f88d0009          STRB     r0,[sp,#9]
000084  f89d001c          LDRB     r0,[sp,#0x1c]
000088  f88d000a          STRB     r0,[sp,#0xa]
00008c  f89d001d          LDRB     r0,[sp,#0x1d]
000090  f88d000b          STRB     r0,[sp,#0xb]
000094  f89d001e          LDRB     r0,[sp,#0x1e]
000098  f88d000c          STRB     r0,[sp,#0xc]
00009c  f89d001f          LDRB     r0,[sp,#0x1f]
0000a0  f88d000d          STRB     r0,[sp,#0xd]
0000a4  f89d0018          LDRB     r0,[sp,#0x18]
0000a8  f88d000e          STRB     r0,[sp,#0xe]
0000ac  f89d0019          LDRB     r0,[sp,#0x19]
0000b0  f88d000f          STRB     r0,[sp,#0xf]
0000b4  f89d001a          LDRB     r0,[sp,#0x1a]
0000b8  f88d0010          STRB     r0,[sp,#0x10]
0000bc  f89d001b          LDRB     r0,[sp,#0x1b]
0000c0  f88d0011          STRB     r0,[sp,#0x11]
0000c4  f04f010e          MOV      r1,#0xe
0000c8  a801              ADD      r0,sp,#4
0000ca  f7fffffe          BL       crc_87
0000ce  f88d0012          STRB     r0,[sp,#0x12]
0000d2  210e              MOVS     r1,#0xe
0000d4  a801              ADD      r0,sp,#4
0000d6  f7fffffe          BL       crc_95
0000da  f88d0013          STRB     r0,[sp,#0x13]
0000de  2110              MOVS     r1,#0x10
0000e0  a801              ADD      r0,sp,#4
0000e2  f7fffffe          BL       uart_out_adr0
                  |L13.230|
0000e6  7820              LDRB     r0,[r4,#0]  ; UIB0
0000e8  2877              CMP      r0,#0x77
0000ea  d169              BNE      |L13.448|
0000ec  7860              LDRB     r0,[r4,#1]  ; UIB0
0000ee  2872              CMP      r0,#0x72
0000f0  d166              BNE      |L13.448|
0000f2  78a0              LDRB     r0,[r4,#2]  ; UIB0
0000f4  2869              CMP      r0,#0x69
0000f6  d163              BNE      |L13.448|
0000f8  78e0              LDRB     r0,[r4,#3]  ; UIB0
0000fa  2874              CMP      r0,#0x74
0000fc  d160              BNE      |L13.448|
0000fe  7920              LDRB     r0,[r4,#4]  ; UIB0
000100  2865              CMP      r0,#0x65
000102  d15d              BNE      |L13.448|
000104  210f              MOVS     r1,#0xf
000106  482f              LDR      r0,|L13.452|
000108  f7fffffe          BL       crc_87
00010c  7be1              LDRB     r1,[r4,#0xf]  ; UIB0
00010e  4288              CMP      r0,r1
000110  d156              BNE      |L13.448|
000112  210f              MOVS     r1,#0xf
000114  482b              LDR      r0,|L13.452|
000116  f7fffffe          BL       crc_95
00011a  7c21              LDRB     r1,[r4,#0x10]  ; UIB0
00011c  4288              CMP      r0,r1
00011e  d14f              BNE      |L13.448|
000120  7960              LDRB     r0,[r4,#5]  ; UIB0
000122  79a1              LDRB     r1,[r4,#6]  ; UIB0
000124  eb002001          ADD      r0,r0,r1,LSL #8
000128  b280              UXTH     r0,r0
00012a  4605              MOV      r5,r0
00012c  9008              STR      r0,[sp,#0x20]
00012e  79e0              LDRB     r0,[r4,#7]  ; UIB0
000130  f88d001c          STRB     r0,[sp,#0x1c]
000134  7a20              LDRB     r0,[r4,#8]  ; UIB0
000136  f88d001d          STRB     r0,[sp,#0x1d]
00013a  7a60              LDRB     r0,[r4,#9]  ; UIB0
00013c  f88d001e          STRB     r0,[sp,#0x1e]
000140  7aa0              LDRB     r0,[r4,#0xa]  ; UIB0
000142  f88d001f          STRB     r0,[sp,#0x1f]
000146  7ae0              LDRB     r0,[r4,#0xb]  ; UIB0
000148  f88d0018          STRB     r0,[sp,#0x18]
00014c  7b20              LDRB     r0,[r4,#0xc]  ; UIB0
00014e  f88d0019          STRB     r0,[sp,#0x19]
000152  7b60              LDRB     r0,[r4,#0xd]  ; UIB0
000154  f88d001a          STRB     r0,[sp,#0x1a]
000158  7ba0              LDRB     r0,[r4,#0xe]  ; UIB0
00015a  f88d001b          STRB     r0,[sp,#0x1b]
00015e  4628              MOV      r0,r5
000160  9907              LDR      r1,[sp,#0x1c]
000162  f7fffffe          BL       lc640_write_long
000166  1d28              ADDS     r0,r5,#4
000168  9906              LDR      r1,[sp,#0x18]
00016a  f7fffffe          BL       lc640_write_long
00016e  f04f0077          MOV      r0,#0x77
000172  f88d0004          STRB     r0,[sp,#4]
000176  f88d6005          STRB     r6,[sp,#5]
00017a  f04f0069          MOV      r0,#0x69
00017e  f88d0006          STRB     r0,[sp,#6]
000182  f04f0074          MOV      r0,#0x74
000186  f88d0007          STRB     r0,[sp,#7]
00018a  f88d7008          STRB     r7,[sp,#8]
00018e  f89d0020          LDRB     r0,[sp,#0x20]
000192  f88d0009          STRB     r0,[sp,#9]
000196  f89d0021          LDRB     r0,[sp,#0x21]
00019a  f88d000a          STRB     r0,[sp,#0xa]
00019e  f04f0107          MOV      r1,#7
0001a2  a801              ADD      r0,sp,#4
0001a4  f7fffffe          BL       crc_87
0001a8  f88d000b          STRB     r0,[sp,#0xb]
0001ac  2107              MOVS     r1,#7
0001ae  a801              ADD      r0,sp,#4
0001b0  f7fffffe          BL       crc_95
0001b4  f88d000c          STRB     r0,[sp,#0xc]
0001b8  2109              MOVS     r1,#9
0001ba  a801              ADD      r0,sp,#4
0001bc  f7fffffe          BL       uart_out_adr0
                  |L13.448|
0001c0  b009              ADD      sp,sp,#0x24
0001c2  bdf0              POP      {r4-r7,pc}
;;;92     
                          ENDP

                  |L13.452|
                          DCD      ||.bss||

                          AREA ||area_number.14||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.14||, ||.text||
                  index_offset0 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  4408              ADD      r0,r0,r1
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  b200              SXTH     r0,r0
;;;83     
;;;84     for(j=1;j<num;j++)
000004  f5b06f80          CMP      r0,#0x400
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  db02              BLT      |L14.16|
00000a  f5a06080          SUB      r0,r0,#0x400          ;84
00000e  b200              SXTH     r0,r0                 ;86
                  |L14.16|
000010  2800              CMP      r0,#0
000012  da02              BGE      |L14.26|
000014  f5006080          ADD      r0,r0,#0x400
000018  b200              SXTH     r0,r0                 ;84
                  |L14.26|
00001a  4770              BX       lr                    ;84
;;;88     	}
;;;89     
;;;90     return r;	
;;;91     } 
;;;92     
                          ENDP


                          AREA ||area_number.15||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.text||
                  control_check0 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  b570              PUSH     {r4-r6,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
000002  4606              MOV      r6,r0
;;;83     
;;;84     for(j=1;j<num;j++)
000004  f04f0200          MOV      r2,#0
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  4d12              LDR      r5,|L15.84|
00000a  5da8              LDRB     r0,[r5,r6]            ;84
00000c  280a              CMP      r0,#0xa               ;86
00000e  d11e              BNE      |L15.78|
000010  1e91              SUBS     r1,r2,#2
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       index_offset0
000018  5c2c              LDRB     r4,[r5,r0]            ;84
00001a  f04f0300          MOV      r3,#0                 ;84
00001e  e00a              B        |L15.54|
                  |L15.32|
000020  1b11              SUBS     r1,r2,r4              ;84
;;;88     	}
;;;89     
;;;90     return r;	
000022  1e89              SUBS     r1,r1,#2
;;;91     } 
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       index_offset0
00002a  5c28              LDRB     r0,[r5,r0]
00002c  ea800303          EOR      r3,r0,r3
000030  f1020201          ADD      r2,r2,#1
000034  b2d2              UXTB     r2,r2
                  |L15.54|
000036  42a2              CMP      r2,r4
000038  d9f2              BLS      |L15.32|
00003a  f04f31ff          MOV      r1,#0xffffffff
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       index_offset0
000044  5c28              LDRB     r0,[r5,r0]
000046  4298              CMP      r0,r3
000048  d101              BNE      |L15.78|
00004a  2001              MOVS     r0,#1
00004c  bd70              POP      {r4-r6,pc}
                  |L15.78|
00004e  2000              MOVS     r0,#0
000050  bd70              POP      {r4-r6,pc}
;;;92     
                          ENDP

000052  0000              DCW      0x0000
                  |L15.84|
                          DCD      ||.bss||+0x64

                          AREA ||area_number.16||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.text||
                  uart_in0 PROC
;;;78     //-----------------------------------------------
;;;79     char crc_87(char* ptr,char num)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;80     {
;;;81     char r,j;
;;;82     r=*ptr;
;;;83     
;;;84     for(j=1;j<num;j++)
000004  4d24              LDR      r5,|L16.152|
000006  2600              MOVS     r6,#0
;;;85     	{
;;;86          ptr++;
;;;87     	r=((*ptr)^Table87[r]);
000008  78a8              LDRB     r0,[r5,#2]  ; rx_buffer_overflow0
00000a  b118              CBZ      r0,|L16.20|
00000c  80ae              STRH     r6,[r5,#4]            ;86
00000e  80ee              STRH     r6,[r5,#6]            ;86
000010  812e              STRH     r6,[r5,#8]
000012  70ae              STRB     r6,[r5,#2]
                  |L16.20|
000014  8928              LDRH     r0,[r5,#8]  ; rx_counter0
000016  2800              CMP      r0,#0
000018  d03b              BEQ      |L16.146|
00001a  88a8              LDRH     r0,[r5,#4]            ;84  ; rx_wr_index0
00001c  f04f32ff          MOV      r2,#0xffffffff        ;84
000020  4611              MOV      r1,r2                 ;84
;;;88     	}
;;;89     
;;;90     return r;	
000022  b200              SXTH     r0,r0
;;;91     } 
000024  f7fffffe          BL       index_offset0
000028  4f1c              LDR      r7,|L16.156|
00002a  5c38              LDRB     r0,[r7,r0]
00002c  280a              CMP      r0,#0xa
00002e  d130              BNE      |L16.146|
000030  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000032  f06f0102          MVN      r1,#2
000036  b200              SXTH     r0,r0
000038  f7fffffe          BL       index_offset0
00003c  5c3c              LDRB     r4,[r7,r0]
00003e  2c64              CMP      r4,#0x64
000040  d227              BCS      |L16.146|
000042  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000044  4611              MOV      r1,r2
000046  b200              SXTH     r0,r0
000048  f7fffffe          BL       index_offset0
00004c  f7fffffe          BL       control_check0
000050  2800              CMP      r0,#0
000052  d01e              BEQ      |L16.146|
000054  1ce0              ADDS     r0,r4,#3
000056  4241              RSBS     r1,r0,#0
000058  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
00005a  b200              SXTH     r0,r0
00005c  f7fffffe          BL       index_offset0
000060  80e8              STRH     r0,[r5,#6]
000062  f04f0200          MOV      r2,#0
000066  f1a70364          SUB      r3,r7,#0x64
00006a  e009              B        |L16.128|
                  |L16.108|
00006c  88e8              LDRH     r0,[r5,#6]  ; rx_rd_index0
00006e  4611              MOV      r1,r2
000070  b200              SXTH     r0,r0
000072  f7fffffe          BL       index_offset0
000076  5c38              LDRB     r0,[r7,r0]
000078  5498              STRB     r0,[r3,r2]
00007a  f1020201          ADD      r2,r2,#1
00007e  b2d2              UXTB     r2,r2
                  |L16.128|
000080  42a2              CMP      r2,r4
000082  d3f3              BCC      |L16.108|
000084  88a8              LDRH     r0,[r5,#4]  ; rx_wr_index0
000086  80e8              STRH     r0,[r5,#6]
000088  812e              STRH     r6,[r5,#8]
00008a  e8bd41f0          POP      {r4-r8,lr}
00008e  f7ffbffe          B.W      uart_in_an0
                  |L16.146|
000092  e8bd81f0          POP      {r4-r8,pc}
;;;92     
                          ENDP

000096  0000              DCW      0x0000
                  |L16.152|
                          DCD      ||.data||
                  |L16.156|
                          DCD      ||.bss||+0x64

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  UIB0
                          %        100
                  rx_buffer0
                          %        1024
                  tx_buffer0
                          %        1024

                          AREA ||area_number.19||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.19||, ||.bss||
                  memo_out
                          %        50

                          AREA ||area_number.20||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.20||, ||.bss||
                  data_rs
                          %        50

                          AREA ||area_number.21||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.21||, ||.bss||
                  data_rs0
                          %        50

                          AREA ||area_number.22||, DATA, NOINIT, ALIGN=1

                          EXPORTAS ||area_number.22||, ||.bss||
                  rs232_data_out_buff
                          %        60

                          AREA ||.data||, DATA, ALIGN=2

                  UART0TxEmpty
000000  01                DCB      0x01
                  bRXIN0
000001  00                DCB      0x00
                  rx_buffer_overflow0
000002  00                DCB      0x00
                  plazma_uart0
000003  00                DCB      0x00
                  rx_wr_index0
000004  0000              DCB      0x00,0x00
                  rx_rd_index0
000006  0000              DCB      0x00,0x00
                  rx_counter0
000008  0000              DCB      0x00,0x00
                  tx_wr_index0
00000a  0000              DCB      0x00,0x00
                  tx_rd_index0
00000c  0000              DCB      0x00,0x00
                  tx_counter0
00000e  0000              DCB      0x00,0x00
                  UART0Status
                          DCD      0x00000000

                          AREA ||area_number.25||, DATA, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.data||
                  UART0Count
                          DCD      0x00000000

                          AREA ||area_number.26||, DATA, ALIGN=0

                          EXPORTAS ||area_number.26||, ||.data||
                  flag0
000000  00                DCB      0x00
