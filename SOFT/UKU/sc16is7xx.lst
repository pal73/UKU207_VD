L 1 "sc16is7xx.c"
N
N#include "sc16is7xx.h"
L 1 "sc16is7xx.h" 1
N#include "stdint.h"
L 1 "C:\Keil\ARM\RV31\INC\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999 */
N/* All rights reserved */
N
N/*
N * RCS $Revision: 137748 $
N * Checkin $Date: 2008-09-11 17:34:24 +0100 (Thu, 11 Sep 2008) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N * '__int64' is used instead of 'long long' so that this header
N * can be used in --strict mode.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed       __int64 intmax_t;
Ntypedef unsigned       __int64 uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __ESCAPE__(~0x7fffffffffffffffll) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#define INTPTR_MIN (~0x7fffffff)
N
N    /* maximum value of pointer-holding signed integer type */
N#define INTPTR_MAX   2147483647
N
N    /* maximum value of pointer-holding unsigned integer type */
N#define UINTPTR_MAX  4294967295u
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#define PTRDIFF_MIN (~0x7fffffff)
N#define PTRDIFF_MAX   2147483647
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#define SIZE_MAX 4294967295u
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32)
X#if 0L
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __ESCAPE__(x ## ll)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __ESCAPE__(x ## ull)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif 
N  #endif /* __cplusplus */
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
N
N
L 2 "sc16is7xx.h" 2
N
N#define CS16IS7xx_RHR	0x00
N#define CS16IS7xx_THR	0x00
N#define CS16IS7xx_IER	0x01
N#define CS16IS7xx_IIR	0x02
N#define CS16IS7xx_FCR	0x02
N#define CS16IS7xx_LCR	0x03
N#define CS16IS7xx_MCR	0x04
N#define CS16IS7xx_LSR	0x05
N#define CS16IS7xx_SPR	0x07
N#define CS16IS7xx_TXLVL	0x08
N#define CS16IS7xx_RXLVL	0x09
N#define CS16IS7xx_EFCR	0x0f
N
N
N#define CS16IS7xx_DLL	0x00
N#define CS16IS7xx_DLH	0x01
N#define CS16IS7xx_EFR	0x02
N
N#define sc16is700_CS_ON  LPC_GPIO0->FIODIR|=(1<<0);LPC_GPIO0->FIOCLR|=(1<<0);
N#define sc16is700_CS_OFF LPC_GPIO0->FIODIR|=(1<<0);LPC_GPIO0->FIOSET|=(1<<0);
N
N//Размер программного буфера передачи
N#define TX_BUFFER_SIZE_SC16IS700	32
N
N//Длительность в миллисекундах свободности ФИФО передачи для возможности начала новой передачи
N#define SC16IS700TXFIFOEMPTYCNTMAX		5
N
Nextern char sc16is700ByteAvailable;
Nextern char sc16is700TxFifoLevel;
Nextern char tx_buffer_sc16is700[TX_BUFFER_SIZE_SC16IS700]; //программный буфер передачи
Xextern char tx_buffer_sc16is700[32]; 
Nextern char tx_wr_index_sc16is700;//указатель записи в программный буфер передачи
Nextern char tx_rd_index_sc16is700;//указатель чтения из программного буфера передачи
Nextern char sc16is700TxFifoEmptyCnt; //Временной счетчик свободности ФИФО передачи
Nextern char sc16is700TxPossibleFlag;//Флаг возможности передачи
N
N
Nvoid sc16is700_init(uint32_t baudrate);
Nvoid sc16is700_wr_byte(char reg_num,char data);
Nchar sc16is700_rd_byte(char reg_num);
N//----------------------------------------------- 
N//Отправка num байт из программного буфера передачи в sc16is700
Nvoid sc16is700_wr_buff(char reg_num,char num);
Nvoid putchar_sc16is700(char out_byte);
Nvoid sc16is700_uart_hndl(void);
N
L 3 "sc16is7xx.c" 2
N#include <LPC17xx.H>
L 1 "C:\Keil\ARM\INC\NXP\LPC17xx\LPC17xx.H" 1
N/******************************************************************************
N * @file:    LPC17xx.h
N * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File for 
N *           NXP LPC17xx Device Series 
N * @version: V1.09
N * @date:    17. March 2010
N *----------------------------------------------------------------------------
N *
N * Copyright (C) 2008 ARM Limited. All rights reserved.
N *
N * ARM Limited (ARM) is supplying this software for use with Cortex-M3 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N
N#ifndef __LPC17xx_H__
N#define __LPC17xx_H__
N
N/*
N * ==========================================================================
N * ---------- Interrupt Number Definition -----------------------------------
N * ==========================================================================
N */
N
Ntypedef enum IRQn
N{
N/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/
N  NonMaskableInt_IRQn           = -14,      /*!< 2 Non Maskable Interrupt                         */
N  MemoryManagement_IRQn         = -12,      /*!< 4 Cortex-M3 Memory Management Interrupt          */
N  BusFault_IRQn                 = -11,      /*!< 5 Cortex-M3 Bus Fault Interrupt                  */
N  UsageFault_IRQn               = -10,      /*!< 6 Cortex-M3 Usage Fault Interrupt                */
N  SVCall_IRQn                   = -5,       /*!< 11 Cortex-M3 SV Call Interrupt                   */
N  DebugMonitor_IRQn             = -4,       /*!< 12 Cortex-M3 Debug Monitor Interrupt             */
N  PendSV_IRQn                   = -2,       /*!< 14 Cortex-M3 Pend SV Interrupt                   */
N  SysTick_IRQn                  = -1,       /*!< 15 Cortex-M3 System Tick Interrupt               */
N
N/******  LPC17xx Specific Interrupt Numbers *******************************************************/
N  WDT_IRQn                      = 0,        /*!< Watchdog Timer Interrupt                         */
N  TIMER0_IRQn                   = 1,        /*!< Timer0 Interrupt                                 */
N  TIMER1_IRQn                   = 2,        /*!< Timer1 Interrupt                                 */
N  TIMER2_IRQn                   = 3,        /*!< Timer2 Interrupt                                 */
N  TIMER3_IRQn                   = 4,        /*!< Timer3 Interrupt                                 */
N  UART0_IRQn                    = 5,        /*!< UART0 Interrupt                                  */
N  UART1_IRQn                    = 6,        /*!< UART1 Interrupt                                  */
N  UART2_IRQn                    = 7,        /*!< UART2 Interrupt                                  */
N  UART3_IRQn                    = 8,        /*!< UART3 Interrupt                                  */
N  PWM1_IRQn                     = 9,        /*!< PWM1 Interrupt                                   */
N  I2C0_IRQn                     = 10,       /*!< I2C0 Interrupt                                   */
N  I2C1_IRQn                     = 11,       /*!< I2C1 Interrupt                                   */
N  I2C2_IRQn                     = 12,       /*!< I2C2 Interrupt                                   */
N  SPI_IRQn                      = 13,       /*!< SPI Interrupt                                    */
N  SSP0_IRQn                     = 14,       /*!< SSP0 Interrupt                                   */
N  SSP1_IRQn                     = 15,       /*!< SSP1 Interrupt                                   */
N  PLL0_IRQn                     = 16,       /*!< PLL0 Lock (Main PLL) Interrupt                   */
N  RTC_IRQn                      = 17,       /*!< Real Time Clock Interrupt                        */
N  EINT0_IRQn                    = 18,       /*!< External Interrupt 0 Interrupt                   */
N  EINT1_IRQn                    = 19,       /*!< External Interrupt 1 Interrupt                   */
N  EINT2_IRQn                    = 20,       /*!< External Interrupt 2 Interrupt                   */
N  EINT3_IRQn                    = 21,       /*!< External Interrupt 3 Interrupt                   */
N  ADC_IRQn                      = 22,       /*!< A/D Converter Interrupt                          */
N  BOD_IRQn                      = 23,       /*!< Brown-Out Detect Interrupt                       */
N  USB_IRQn                      = 24,       /*!< USB Interrupt                                    */
N  CAN_IRQn                      = 25,       /*!< CAN Interrupt                                    */
N  DMA_IRQn                      = 26,       /*!< General Purpose DMA Interrupt                    */
N  I2S_IRQn                      = 27,       /*!< I2S Interrupt                                    */
N  ENET_IRQn                     = 28,       /*!< Ethernet Interrupt                               */
N  RIT_IRQn                      = 29,       /*!< Repetitive Interrupt Timer Interrupt             */
N  MCPWM_IRQn                    = 30,       /*!< Motor Control PWM Interrupt                      */
N  QEI_IRQn                      = 31,       /*!< Quadrature Encoder Interface Interrupt           */
N  PLL1_IRQn                     = 32,       /*!< PLL1 Lock (USB PLL) Interrupt                    */
N  USBActivity_IRQn              = 33,       /* USB Activity interrupt                             */
N  CANActivity_IRQn              = 34,       /* CAN Activity interrupt                             */
N} IRQn_Type;
N
N
N/*
N * ==========================================================================
N * ----------- Processor and Core Peripheral Section ------------------------
N * ==========================================================================
N */
N
N/* Configuration of the Cortex-M3 Processor and Core Peripherals */
N#define __MPU_PRESENT             1         /*!< MPU present or not                               */
N#define __NVIC_PRIO_BITS          5         /*!< Number of Bits used for Priority Levels          */
N#define __Vendor_SysTickConfig    0         /*!< Set to 1 if different SysTick Config is used     */
N
N
N#include <core_cm3.h>                       /* Cortex-M3 processor and core peripherals           */
L 1 "C:\Keil\ARM\RV31\INC\core_cm3.h" 1
N/******************************************************************************
N * @file:    core_cm3.h
N * @purpose: CMSIS Cortex-M3 Core Peripheral Access Layer Header File
N * @version: V1.20
N * @date:    22. May 2009
N *----------------------------------------------------------------------------
N *
N * Copyright (C) 2009 ARM Limited. All rights reserved.
N *
N * ARM Limited (ARM) is supplying this software for use with Cortex-Mx 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CM3_CORE_H__
N#define __CM3_CORE_H__
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
N#define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!< [31:16] CMSIS HAL main version */
N#define __CM3_CMSIS_VERSION_SUB   (0x20)                                                       /*!< [15:0]  CMSIS HAL sub version  */
N#define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!< CMSIS HAL version number       */
N
N#define __CORTEX_M                (0x03)                                                       /*!< Cortex core                    */
N
N/**
N *  Lint configuration \n
N *  ----------------------- \n
N *
N *  The following Lint messages will be suppressed and not shown: \n
N *  \n
N *    --- Error 10: --- \n
N *    register uint32_t __regBasePri         __asm("basepri"); \n
N *    Error 10: Expecting ';' \n
N *     \n
N *    --- Error 530: --- \n
N *    return(__regBasePri); \n
N *    Warning 530: Symbol '__regBasePri' (line 264) not initialized \n
N *     \n
N *    --- Error 550: --- \n
N *      __regBasePri = (basePri & 0x1ff); \n
N *    } \n
N *    Warning 550: Symbol '__regBasePri' (line 271) not accessed \n
N *     \n
N *    --- Error 754: --- \n
N *    uint32_t RESERVED0[24]; \n
N *    Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) not referenced \n
N *     \n
N *    --- Error 750: --- \n
N *    #define __CM3_CORE_H__ \n
N *    Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced \n
N *     \n
N *    --- Error 528: --- \n
N *    static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
N *    Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referenced \n
N *     \n
N *    --- Error 751: --- \n
N *    } InterruptType_Type; \n
N *    Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced \n
N * \n
N * \n
N *    Note:  To re-enable a Message, insert a space before 'lint' * \n
N *
N */
N
N/*lint -save */
N/*lint -e10  */
N/*lint -e530 */
N/*lint -e550 */
N/*lint -e754 */
N/*lint -e750 */
N/*lint -e528 */
N/*lint -e751 */
N
N
N#include <stdint.h>                           /* Include standard types */
N
N#if defined (__ICCARM__)
X#if 0L
S  #include <intrinsics.h>                     /* IAR Intrinsics   */
N#endif
N
N
N#ifndef __NVIC_PRIO_BITS
S  #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
N#endif
N
N
N
N
N/**
N * IO definitions
N *
N * define access restrictions to peripheral registers
N */
N
N#ifdef __cplusplus
S#define     __I     volatile                  /*!< defines 'read only' permissions      */
N#else
N#define     __I     volatile const            /*!< defines 'read only' permissions      */
N#endif
N#define     __O     volatile                  /*!< defines 'write only' permissions     */
N#define     __IO    volatile                  /*!< defines 'read / write' permissions   */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N ******************************************************************************/
N
N
N/* System Reset */
N#define NVIC_VECTRESET              0         /*!< Vector Reset Bit             */
N#define NVIC_SYSRESETREQ            2         /*!< System Reset Request         */
N#define NVIC_AIRCR_VECTKEY    (0x5FA << 16)   /*!< AIRCR Key for write access   */
N#define NVIC_AIRCR_ENDIANESS        15        /*!< Endianess                    */
N
N/* Core Debug */
N#define CoreDebug_DEMCR_TRCENA (1 << 24)      /*!< DEMCR TRCENA enable          */
N#define ITM_TCR_ITMENA              1         /*!< ITM enable                   */
N
N
N
N
N/* memory mapping struct for Nested Vectored Interrupt Controller (NVIC) */
Ntypedef struct
N{
N  __IO uint32_t ISER[8];                      /*!< Interrupt Set Enable Register            */
X  volatile uint32_t ISER[8];                       
N       uint32_t RESERVED0[24];
N  __IO uint32_t ICER[8];                      /*!< Interrupt Clear Enable Register          */
X  volatile uint32_t ICER[8];                       
N       uint32_t RSERVED1[24];
N  __IO uint32_t ISPR[8];                      /*!< Interrupt Set Pending Register           */
X  volatile uint32_t ISPR[8];                       
N       uint32_t RESERVED2[24];
N  __IO uint32_t ICPR[8];                      /*!< Interrupt Clear Pending Register         */
X  volatile uint32_t ICPR[8];                       
N       uint32_t RESERVED3[24];
N  __IO uint32_t IABR[8];                      /*!< Interrupt Active bit Register            */
X  volatile uint32_t IABR[8];                       
N       uint32_t RESERVED4[56];
N  __IO uint8_t  IP[240];                      /*!< Interrupt Priority Register, 8Bit wide   */
X  volatile uint8_t  IP[240];                       
N       uint32_t RESERVED5[644];
N  __O  uint32_t STIR;                         /*!< Software Trigger Interrupt Register      */
X  volatile  uint32_t STIR;                          
N}  NVIC_Type;
N
N
N/* memory mapping struct for System Control Block */
Ntypedef struct
N{
N  __I  uint32_t CPUID;                        /*!< CPU ID Base Register                                     */
X  volatile const  uint32_t CPUID;                         
N  __IO uint32_t ICSR;                         /*!< Interrupt Control State Register                         */
X  volatile uint32_t ICSR;                          
N  __IO uint32_t VTOR;                         /*!< Vector Table Offset Register                             */
X  volatile uint32_t VTOR;                          
N  __IO uint32_t AIRCR;                        /*!< Application Interrupt / Reset Control Register           */
X  volatile uint32_t AIRCR;                         
N  __IO uint32_t SCR;                          /*!< System Control Register                                  */
X  volatile uint32_t SCR;                           
N  __IO uint32_t CCR;                          /*!< Configuration Control Register                           */
X  volatile uint32_t CCR;                           
N  __IO uint8_t  SHP[12];                      /*!< System Handlers Priority Registers (4-7, 8-11, 12-15)    */
X  volatile uint8_t  SHP[12];                       
N  __IO uint32_t SHCSR;                        /*!< System Handler Control and State Register                */
X  volatile uint32_t SHCSR;                         
N  __IO uint32_t CFSR;                         /*!< Configurable Fault Status Register                       */
X  volatile uint32_t CFSR;                          
N  __IO uint32_t HFSR;                         /*!< Hard Fault Status Register                               */
X  volatile uint32_t HFSR;                          
N  __IO uint32_t DFSR;                         /*!< Debug Fault Status Register                              */
X  volatile uint32_t DFSR;                          
N  __IO uint32_t MMFAR;                        /*!< Mem Manage Address Register                              */
X  volatile uint32_t MMFAR;                         
N  __IO uint32_t BFAR;                         /*!< Bus Fault Address Register                               */
X  volatile uint32_t BFAR;                          
N  __IO uint32_t AFSR;                         /*!< Auxiliary Fault Status Register                          */
X  volatile uint32_t AFSR;                          
N  __I  uint32_t PFR[2];                       /*!< Processor Feature Register                               */
X  volatile const  uint32_t PFR[2];                        
N  __I  uint32_t DFR;                          /*!< Debug Feature Register                                   */
X  volatile const  uint32_t DFR;                           
N  __I  uint32_t ADR;                          /*!< Auxiliary Feature Register                               */
X  volatile const  uint32_t ADR;                           
N  __I  uint32_t MMFR[4];                      /*!< Memory Model Feature Register                            */
X  volatile const  uint32_t MMFR[4];                       
N  __I  uint32_t ISAR[5];                      /*!< ISA Feature Register                                     */
X  volatile const  uint32_t ISAR[5];                       
N} SCB_Type;
N
N
N/* memory mapping struct for SysTick */
Ntypedef struct
N{
N  __IO uint32_t CTRL;                         /*!< SysTick Control and Status Register */
X  volatile uint32_t CTRL;                          
N  __IO uint32_t LOAD;                         /*!< SysTick Reload Value Register       */
X  volatile uint32_t LOAD;                          
N  __IO uint32_t VAL;                          /*!< SysTick Current Value Register      */
X  volatile uint32_t VAL;                           
N  __I  uint32_t CALIB;                        /*!< SysTick Calibration Register        */
X  volatile const  uint32_t CALIB;                         
N} SysTick_Type;
N
N
N/* memory mapping structur for ITM */
Ntypedef struct
N{
N  __O  union  
X  volatile  union  
N  {
N    __O  uint8_t    u8;                       /*!< ITM Stimulus Port 8-bit               */
X    volatile  uint8_t    u8;                        
N    __O  uint16_t   u16;                      /*!< ITM Stimulus Port 16-bit              */
X    volatile  uint16_t   u16;                       
N    __O  uint32_t   u32;                      /*!< ITM Stimulus Port 32-bit              */
X    volatile  uint32_t   u32;                       
N  }  PORT [32];                               /*!< ITM Stimulus Port Registers           */
N       uint32_t RESERVED0[864];
N  __IO uint32_t TER;                          /*!< ITM Trace Enable Register             */
X  volatile uint32_t TER;                           
N       uint32_t RESERVED1[15];
N  __IO uint32_t TPR;                          /*!< ITM Trace Privilege Register          */
X  volatile uint32_t TPR;                           
N       uint32_t RESERVED2[15];
N  __IO uint32_t TCR;                          /*!< ITM Trace Control Register            */
X  volatile uint32_t TCR;                           
N       uint32_t RESERVED3[29];
N  __IO uint32_t IWR;                          /*!< ITM Integration Write Register        */
X  volatile uint32_t IWR;                           
N  __IO uint32_t IRR;                          /*!< ITM Integration Read Register         */
X  volatile uint32_t IRR;                           
N  __IO uint32_t IMCR;                         /*!< ITM Integration Mode Control Register */
X  volatile uint32_t IMCR;                          
N       uint32_t RESERVED4[43];
N  __IO uint32_t LAR;                          /*!< ITM Lock Access Register              */
X  volatile uint32_t LAR;                           
N  __IO uint32_t LSR;                          /*!< ITM Lock Status Register              */
X  volatile uint32_t LSR;                           
N       uint32_t RESERVED5[6];
N  __I  uint32_t PID4;                         /*!< ITM Product ID Registers              */
X  volatile const  uint32_t PID4;                          
N  __I  uint32_t PID5;
X  volatile const  uint32_t PID5;
N  __I  uint32_t PID6;
X  volatile const  uint32_t PID6;
N  __I  uint32_t PID7;
X  volatile const  uint32_t PID7;
N  __I  uint32_t PID0;
X  volatile const  uint32_t PID0;
N  __I  uint32_t PID1;
X  volatile const  uint32_t PID1;
N  __I  uint32_t PID2;
X  volatile const  uint32_t PID2;
N  __I  uint32_t PID3;
X  volatile const  uint32_t PID3;
N  __I  uint32_t CID0;
X  volatile const  uint32_t CID0;
N  __I  uint32_t CID1;
X  volatile const  uint32_t CID1;
N  __I  uint32_t CID2;
X  volatile const  uint32_t CID2;
N  __I  uint32_t CID3;
X  volatile const  uint32_t CID3;
N} ITM_Type;
N
N
N/* memory mapped struct for Interrupt Type */
Ntypedef struct
N{
N       uint32_t RESERVED0;
N  __I  uint32_t ICTR;                         /*!< Interrupt Control Type Register  */
X  volatile const  uint32_t ICTR;                          
N#if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
X#if ((0L) && (__CM3_REV >= 0x200))
S  __IO uint32_t ACTLR;                        /*!< Auxiliary Control Register       */
N#else
N       uint32_t RESERVED1;
N#endif
N} InterruptType_Type;
N
N
N/* Memory Protection Unit */
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
X#if 1L && (1 == 1)
Ntypedef struct
N{
N  __I  uint32_t TYPE;                         /*!< MPU Type Register                               */
X  volatile const  uint32_t TYPE;                          
N  __IO uint32_t CTRL;                         /*!< MPU Control Register                            */
X  volatile uint32_t CTRL;                          
N  __IO uint32_t RNR;                          /*!< MPU Region RNRber Register                      */
X  volatile uint32_t RNR;                           
N  __IO uint32_t RBAR;                         /*!< MPU Region Base Address Register                */
X  volatile uint32_t RBAR;                          
N  __IO uint32_t RASR;                         /*!< MPU Region Attribute and Size Register          */
X  volatile uint32_t RASR;                          
N  __IO uint32_t RBAR_A1;                      /*!< MPU Alias 1 Region Base Address Register        */
X  volatile uint32_t RBAR_A1;                       
N  __IO uint32_t RASR_A1;                      /*!< MPU Alias 1 Region Attribute and Size Register  */
X  volatile uint32_t RASR_A1;                       
N  __IO uint32_t RBAR_A2;                      /*!< MPU Alias 2 Region Base Address Register        */
X  volatile uint32_t RBAR_A2;                       
N  __IO uint32_t RASR_A2;                      /*!< MPU Alias 2 Region Attribute and Size Register  */
X  volatile uint32_t RASR_A2;                       
N  __IO uint32_t RBAR_A3;                      /*!< MPU Alias 3 Region Base Address Register        */
X  volatile uint32_t RBAR_A3;                       
N  __IO uint32_t RASR_A3;                      /*!< MPU Alias 3 Region Attribute and Size Register  */
X  volatile uint32_t RASR_A3;                       
N} MPU_Type;
N#endif
N
N
N/* Core Debug Register */
Ntypedef struct
N{
N  __IO uint32_t DHCSR;                        /*!< Debug Halting Control and Status Register       */
X  volatile uint32_t DHCSR;                         
N  __O  uint32_t DCRSR;                        /*!< Debug Core Register Selector Register           */
X  volatile  uint32_t DCRSR;                         
N  __IO uint32_t DCRDR;                        /*!< Debug Core Register Data Register               */
X  volatile uint32_t DCRDR;                         
N  __IO uint32_t DEMCR;                        /*!< Debug Exception and Monitor Control Register    */
X  volatile uint32_t DEMCR;                         
N} CoreDebug_Type;
N
N
N/* Memory mapping of Cortex-M3 Hardware */
N#define SCS_BASE            (0xE000E000)                              /*!< System Control Space Base Address    */
N#define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address                     */
N#define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address              */
N#define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address                 */
N#define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address                    */
N#define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Base Address    */
N
N#define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register              */
N#define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct             */
N#define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration struct         */
N#define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struct            */
N#define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct             */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct      */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
X#if 1L && (1 == 1)
N  #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit               */
N  #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit               */
N#endif
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N ******************************************************************************/
N
N
N#if defined ( __CC_ARM   )
X#if 1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler          */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler       */
N
N#elif defined ( __ICCARM__ )
S  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler           */
S  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
S
S#elif defined   (  __GNUC__  )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler       */
S
S#elif defined   (  __TASKING__  )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler          */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler       */
S
N#endif
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N
N#if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N#define __enable_fault_irq                __enable_fiq
N#define __disable_fault_irq               __disable_fiq
N
N#define __NOP                             __nop
N#define __WFI                             __wfi
N#define __WFE                             __wfe
N#define __SEV                             __sev
N#define __ISB()                           __isb(0)
N#define __DSB()                           __dsb(0)
N#define __DMB()                           __dmb(0)
N#define __REV                             __rev
N#define __RBIT                            __rbit
N#define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
N#define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
N#define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
N#define __STREXB(value, ptr)              __strex(value, ptr)
N#define __STREXH(value, ptr)              __strex(value, ptr)
N#define __STREXW(value, ptr)              __strex(value, ptr)
N
N
N/* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
N/* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N
N/**
N * @brief  Return the Process Stack Pointer
N *
N * @param  none
N * @return uint32_t ProcessStackPointer
N *
N * Return the actual process stack pointer
N */
Nextern uint32_t __get_PSP(void);
N
N/**
N * @brief  Set the Process Stack Pointer
N *
N * @param  uint32_t Process Stack Pointer
N * @return none
N *
N * Assign the value ProcessStackPointer to the MSP 
N * (process stack pointer) Cortex processor register
N */
Nextern void __set_PSP(uint32_t topOfProcStack);
N
N/**
N * @brief  Return the Main Stack Pointer
N *
N * @param  none
N * @return uint32_t Main Stack Pointer
N *
N * Return the current value of the MSP (main stack pointer)
N * Cortex processor register
N */
Nextern uint32_t __get_MSP(void);
N
N/**
N * @brief  Set the Main Stack Pointer
N *
N * @param  uint32_t Main Stack Pointer
N * @return none
N *
N * Assign the value mainStackPointer to the MSP 
N * (main stack pointer) Cortex processor register
N */
Nextern void __set_MSP(uint32_t topOfMainStack);
N
N/**
N * @brief  Reverse byte order in unsigned short value
N *
N * @param  uint16_t value to reverse
N * @return uint32_t reversed value
N *
N * Reverse byte order in unsigned short value
N */
Nextern uint32_t __REV16(uint16_t value);
N
N/*
N * @brief  Reverse byte order in signed short value with sign extension to integer
N *
N * @param  int16_t value to reverse
N * @return int32_t reversed value
N *
N * Reverse byte order in signed short value with sign extension to integer
N */
Nextern int32_t __REVSH(int16_t value);
N
N
N#if (__ARMCC_VERSION < 400000)
X#if (410644 < 400000)
S
S/**
S * @brief  Remove the exclusive lock created by ldrex
S *
S * @param  none
S * @return none
S *
S * Removes the exclusive lock which is created by ldrex.
S */
Sextern void __CLREX(void);
S
S/**
S * @brief  Return the Base Priority value
S *
S * @param  none
S * @return uint32_t BasePriority
S *
S * Return the content of the base priority register
S */
Sextern uint32_t __get_BASEPRI(void);
S
S/**
S * @brief  Set the Base Priority value
S *
S * @param  uint32_t BasePriority
S * @return none
S *
S * Set the base priority register
S */
Sextern void __set_BASEPRI(uint32_t basePri);
S
S/**
S * @brief  Return the Priority Mask value
S *
S * @param  none
S * @return uint32_t PriMask
S *
S * Return the state of the priority mask bit from the priority mask
S * register
S */
Sextern uint32_t __get_PRIMASK(void);
S
S/**
S * @brief  Set the Priority Mask value
S *
S * @param  uint32_t PriMask
S * @return none
S *
S * Set the priority mask bit in the priority mask register
S */
Sextern void __set_PRIMASK(uint32_t priMask);
S
S/**
S * @brief  Return the Fault Mask value
S *
S * @param  none
S * @return uint32_t FaultMask
S *
S * Return the content of the fault mask register
S */
Sextern uint32_t __get_FAULTMASK(void);
S
S/**
S * @brief  Set the Fault Mask value
S *
S * @param  uint32_t faultMask value
S * @return none
S *
S * Set the fault mask register
S */
Sextern void __set_FAULTMASK(uint32_t faultMask);
S
S/**
S * @brief  Return the Control Register value
S * 
S * @param  none
S * @return uint32_t Control value
S *
S * Return the content of the control register
S */
Sextern uint32_t __get_CONTROL(void);
S
S/**
S * @brief  Set the Control Register value
S *
S * @param  uint32_t Control value
S * @return none
S *
S * Set the control register
S */
Sextern void __set_CONTROL(uint32_t control);
S
N#else  /* (__ARMCC_VERSION >= 400000)  */
N
N
N/**
N * @brief  Remove the exclusive lock created by ldrex
N *
N * @param  none
N * @return none
N *
N * Removes the exclusive lock which is created by ldrex.
N */
N#define __CLREX                           __clrex
N
N/**
N * @brief  Return the Base Priority value
N *
N * @param  none
N * @return uint32_t BasePriority
N *
N * Return the content of the base priority register
N */
Nstatic __INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N/**
N * @brief  Set the Base Priority value
N *
N * @param  uint32_t BasePriority
N * @return none
N *
N * Set the base priority register
N */
Nstatic __INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0x1ff);
N}
N
N/**
N * @brief  Return the Priority Mask value
N *
N * @param  none
N * @return uint32_t PriMask
N *
N * Return the state of the priority mask bit from the priority mask
N * register
N */
Nstatic __INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N/**
N * @brief  Set the Priority Mask value
N *
N * @param  uint32_t PriMask
N * @return none
N *
N * Set the priority mask bit in the priority mask register
N */
Nstatic __INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N/**
N * @brief  Return the Fault Mask value
N *
N * @param  none
N * @return uint32_t FaultMask
N *
N * Return the content of the fault mask register
N */
Nstatic __INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N/**
N * @brief  Set the Fault Mask value
N *
N * @param  uint32_t faultMask value
N * @return none
N *
N * Set the fault mask register
N */
Nstatic __INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & 1);
N}
N
N/**
N * @brief  Return the Control Register value
N * 
N * @param  none
N * @return uint32_t Control value
N *
N * Return the content of the control register
N */
Nstatic __INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N/**
N * @brief  Set the Control Register value
N *
N * @param  uint32_t Control value
N * @return none
N *
N * Set the control register
N */
Nstatic __INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N#endif /* __ARMCC_VERSION  */ 
N
N
N
N#elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
S/* IAR iccarm specific functions */
S
S#define __enable_irq                              __enable_interrupt        /*!< global Interrupt enable */
S#define __disable_irq                             __disable_interrupt       /*!< global Interrupt disable */
S
Sstatic __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
Sstatic __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
S
S#define __NOP                                     __no_operation()          /*!< no operation intrinsic in IAR Compiler */ 
Sstatic __INLINE  void __WFI()                     { __ASM ("wfi"); }
Sstatic __INLINE  void __WFE()                     { __ASM ("wfe"); }
Sstatic __INLINE  void __SEV()                     { __ASM ("sev"); }
Sstatic __INLINE  void __CLREX()                   { __ASM ("clrex"); }
S
S/* intrinsic void __ISB(void)                                     */
S/* intrinsic void __DSB(void)                                     */
S/* intrinsic void __DMB(void)                                     */
S/* intrinsic void __set_PRIMASK();                                */
S/* intrinsic void __get_PRIMASK();                                */
S/* intrinsic void __set_FAULTMASK();                              */
S/* intrinsic void __get_FAULTMASK();                              */
S/* intrinsic uint32_t __REV(uint32_t value);                      */
S/* intrinsic uint32_t __REVSH(uint32_t value);                    */
S/* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
S/* intrinsic unsigned long __LDREX(unsigned long *);              */
S
S
S/**
S * @brief  Return the Process Stack Pointer
S *
S * @param  none
S * @return uint32_t ProcessStackPointer
S *
S * Return the actual process stack pointer
S */
Sextern uint32_t __get_PSP(void);
S
S/**
S * @brief  Set the Process Stack Pointer
S *
S * @param  uint32_t Process Stack Pointer
S * @return none
S *
S * Assign the value ProcessStackPointer to the MSP 
S * (process stack pointer) Cortex processor register
S */
Sextern void __set_PSP(uint32_t topOfProcStack);
S
S/**
S * @brief  Return the Main Stack Pointer
S *
S * @param  none
S * @return uint32_t Main Stack Pointer
S *
S * Return the current value of the MSP (main stack pointer)
S * Cortex processor register
S */
Sextern uint32_t __get_MSP(void);
S
S/**
S * @brief  Set the Main Stack Pointer
S *
S * @param  uint32_t Main Stack Pointer
S * @return none
S *
S * Assign the value mainStackPointer to the MSP 
S * (main stack pointer) Cortex processor register
S */
Sextern void __set_MSP(uint32_t topOfMainStack);
S
S/**
S * @brief  Reverse byte order in unsigned short value
S *
S * @param  uint16_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse byte order in unsigned short value
S */
Sextern uint32_t __REV16(uint16_t value);
S
S/**
S * @brief  Reverse bit order of value
S *
S * @param  uint32_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse bit order of value
S */
Sextern uint32_t __RBIT(uint32_t value);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint8_t* address
S * @return uint8_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint8_t __LDREXB(uint8_t *addr);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint16_t* address
S * @return uint16_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint16_t __LDREXH(uint16_t *addr);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint32_t* address
S * @return uint32_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint32_t __LDREXW(uint32_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint8_t *address
S * @param  uint8_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXB(uint8_t value, uint8_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint16_t *address
S * @param  uint16_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXH(uint16_t value, uint16_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint32_t *address
S * @param  uint32_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXW(uint32_t value, uint32_t *addr);
S
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
Sstatic __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
Sstatic __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
S
Sstatic __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
Sstatic __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
S
Sstatic __INLINE void __NOP()                      { __ASM volatile ("nop"); }
Sstatic __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
Sstatic __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
Sstatic __INLINE void __SEV()                      { __ASM volatile ("sev"); }
Sstatic __INLINE void __ISB()                      { __ASM volatile ("isb"); }
Sstatic __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
Sstatic __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
Sstatic __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
S
S
S/**
S * @brief  Return the Process Stack Pointer
S *
S * @param  none
S * @return uint32_t ProcessStackPointer
S *
S * Return the actual process stack pointer
S */
Sextern uint32_t __get_PSP(void);
S
S/**
S * @brief  Set the Process Stack Pointer
S *
S * @param  uint32_t Process Stack Pointer
S * @return none
S *
S * Assign the value ProcessStackPointer to the MSP 
S * (process stack pointer) Cortex processor register
S */
Sextern void __set_PSP(uint32_t topOfProcStack);
S
S/**
S * @brief  Return the Main Stack Pointer
S *
S * @param  none
S * @return uint32_t Main Stack Pointer
S *
S * Return the current value of the MSP (main stack pointer)
S * Cortex processor register
S */
Sextern uint32_t __get_MSP(void);
S
S/**
S * @brief  Set the Main Stack Pointer
S *
S * @param  uint32_t Main Stack Pointer
S * @return none
S *
S * Assign the value mainStackPointer to the MSP 
S * (main stack pointer) Cortex processor register
S */
Sextern void __set_MSP(uint32_t topOfMainStack);
S
S/**
S * @brief  Return the Base Priority value
S *
S * @param  none
S * @return uint32_t BasePriority
S *
S * Return the content of the base priority register
S */
Sextern uint32_t __get_BASEPRI(void);
S
S/**
S * @brief  Set the Base Priority value
S *
S * @param  uint32_t BasePriority
S * @return none
S *
S * Set the base priority register
S */
Sextern void __set_BASEPRI(uint32_t basePri);
S
S/**
S * @brief  Return the Priority Mask value
S *
S * @param  none
S * @return uint32_t PriMask
S *
S * Return the state of the priority mask bit from the priority mask
S * register
S */
Sextern uint32_t  __get_PRIMASK(void);
S
S/**
S * @brief  Set the Priority Mask value
S *
S * @param  uint32_t PriMask
S * @return none
S *
S * Set the priority mask bit in the priority mask register
S */
Sextern void __set_PRIMASK(uint32_t priMask);
S
S/**
S * @brief  Return the Fault Mask value
S *
S * @param  none
S * @return uint32_t FaultMask
S *
S * Return the content of the fault mask register
S */
Sextern uint32_t __get_FAULTMASK(void);
S
S/**
S * @brief  Set the Fault Mask value
S *
S * @param  uint32_t faultMask value
S * @return none
S *
S * Set the fault mask register
S */
Sextern void __set_FAULTMASK(uint32_t faultMask);
S
S/**
S * @brief  Return the Control Register value
S* 
S*  @param  none
S*  @return uint32_t Control value
S *
S * Return the content of the control register
S */
Sextern uint32_t __get_CONTROL(void);
S
S/**
S * @brief  Set the Control Register value
S *
S * @param  uint32_t Control value
S * @return none
S *
S * Set the control register
S */
Sextern void __set_CONTROL(uint32_t control);
S
S/**
S * @brief  Reverse byte order in integer value
S *
S * @param  uint32_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse byte order in integer value
S */
Sextern uint32_t __REV(uint32_t value);
S
S/**
S * @brief  Reverse byte order in unsigned short value
S *
S * @param  uint16_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse byte order in unsigned short value
S */
Sextern uint32_t __REV16(uint16_t value);
S
S/*
S * Reverse byte order in signed short value with sign extension to integer
S *
S * @param  int16_t value to reverse
S * @return int32_t reversed value
S *
S * @brief  Reverse byte order in signed short value with sign extension to integer
S */
Sextern int32_t __REVSH(int16_t value);
S
S/**
S * @brief  Reverse bit order of value
S *
S * @param  uint32_t value to reverse
S * @return uint32_t reversed value
S *
S * Reverse bit order of value
S */
Sextern uint32_t __RBIT(uint32_t value);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint8_t* address
S * @return uint8_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint8_t __LDREXB(uint8_t *addr);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint16_t* address
S * @return uint16_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint16_t __LDREXH(uint16_t *addr);
S
S/**
S * @brief  LDR Exclusive
S *
S * @param  uint32_t* address
S * @return uint32_t value of (*address)
S *
S * Exclusive LDR command
S */
Sextern uint32_t __LDREXW(uint32_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint8_t *address
S * @param  uint8_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXB(uint8_t value, uint8_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint16_t *address
S * @param  uint16_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXH(uint16_t value, uint16_t *addr);
S
S/**
S * @brief  STR Exclusive
S *
S * @param  uint32_t *address
S * @param  uint32_t value to store
S * @return uint32_t successful / failed
S *
S * Exclusive STR command
S */
Sextern uint32_t __STREXW(uint32_t value, uint32_t *addr);
S
S
S#elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
N#endif
N
N
N
N/* ##########################   NVIC functions  #################################### */
N
N
N/**
N * @brief  Set the Priority Grouping in NVIC Interrupt Controller
N *
N * @param  uint32_t priority_grouping is priority grouping field
N * @return none 
N *
N * Set the priority grouping field using the required unlock sequence.
N * The parameter priority_grouping is assigned to the field 
N * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
N * In case of a conflict between priority grouping and available
N * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N */
Nstatic __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
N  
N  reg_value  = SCB->AIRCR;                                                    /* read old register configuration    */
X  reg_value  = ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR;                                                     
N  reg_value &= ~((0xFFFFU << 16) | (0x0F << 8));                              /* clear bits to change               */
N  reg_value  = ((reg_value | NVIC_AIRCR_VECTKEY | (PriorityGroupTmp << 8)));  /* Insert write key and priorty group */
X  reg_value  = ((reg_value | (0x5FA << 16) | (PriorityGroupTmp << 8)));   
N  SCB->AIRCR = reg_value;
X  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR = reg_value;
N}
N
N/**
N * @brief  Get the Priority Grouping from NVIC Interrupt Controller
N *
N * @param  none
N * @return uint32_t   priority grouping field 
N *
N * Get the priority grouping from NVIC Interrupt Controller.
N * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
N */
Nstatic __INLINE uint32_t NVIC_GetPriorityGrouping(void)
Xstatic __inline uint32_t NVIC_GetPriorityGrouping(void)
N{
N  return ((SCB->AIRCR >> 8) & 0x07);                                          /* read priority grouping field */
X  return ((((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR >> 8) & 0x07);                                           
N}
N
N/**
N * @brief  Enable Interrupt in NVIC Interrupt Controller
N *
N * @param  IRQn_Type IRQn specifies the interrupt number
N * @return none 
N *
N * Enable a device specific interupt in the NVIC interrupt controller.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Disable the interrupt line for external interrupt specified
N * 
N * @param  IRQn_Type IRQn is the positive number of the external interrupt
N * @return none
N * 
N * Disable a device specific interupt in the NVIC interrupt controller.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Read the interrupt pending bit for a device specific interrupt source
N * 
N * @param  IRQn_Type IRQn is the number of the device specifc interrupt
N * @return uint32_t 1 if pending interrupt else 0
N *
N * Read the pending register in NVIC and return 1 if its status is pending, 
N * otherwise it returns 0
N */
Nstatic __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
X  return((uint32_t) ((((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N/**
N * @brief  Set the pending bit for an external interrupt
N * 
N * @param  IRQn_Type IRQn is the Number of the interrupt
N * @return none
N *
N * Set the pending bit for the specified interrupt.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Clear the pending bit for an external interrupt
N *
N * @param  IRQn_Type IRQn is the Number of the interrupt
N * @return none
N *
N * Clear the pending bit for the specified interrupt. 
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Read the active bit for an external interrupt
N *
N * @param  IRQn_Type  IRQn is the Number of the interrupt
N * @return uint32_t   1 if active else 0
N *
N * Read the active register in NVIC and returns 1 if its status is active, 
N * otherwise it returns 0.
N */
Nstatic __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
N{
N  return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if active else 0 */
X  return((uint32_t)((((NVIC_Type *) ((0xE000E000) + 0x0100))->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N/**
N * @brief  Set the priority for an interrupt
N *
N * @param  IRQn_Type IRQn is the Number of the interrupt
N * @param  priority is the priority for the interrupt
N * @return none
N *
N * Set the priority for the specified interrupt. The interrupt 
N * number can be positive to specify an external (device specific) 
N * interrupt, or negative to specify an internal (core) interrupt. \n
N *
N * Note: The priority cannot be set for every core interrupt.
N */
Nstatic __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if(IRQn < 0) {
N    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
X    ((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 5)) & 0xff); }  
N  else {
N    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts      */
X    ((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)] = ((priority << (8 - 5)) & 0xff);    }         
N}
N
N/**
N * @brief  Read the priority for an interrupt
N *
N * @param  IRQn_Type IRQn is the Number of the interrupt
N * @return uint32_t  priority is the priority for the interrupt
N *
N * Read the priority for the specified interrupt. The interrupt 
N * number can be positive to specify an external (device specific) 
N * interrupt, or negative to specify an internal (core) interrupt.
N *
N * The returned priority value is automatically aligned to the implemented
N * priority bits of the microcontroller.
N *
N * Note: The priority cannot be set for every core interrupt.
N */
Nstatic __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if(IRQn < 0) {
N    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M3 system interrupts */
X    return((uint32_t)(((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 5)));  }  
N  else {
N    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
X    return((uint32_t)(((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)]           >> (8 - 5)));  }  
N}
N
N
N/**
N * @brief  Encode the priority for an interrupt
N *
N * @param  uint32_t PriorityGroup   is the used priority group
N * @param  uint32_t PreemptPriority is the preemptive priority value (starting from 0)
N * @param  uint32_t SubPriority     is the sub priority value (starting from 0)
N * @return uint32_t                    the priority for the interrupt
N *
N * Encode the priority for an interrupt with the given priority group,
N * preemptive priority value and sub priority value.
N * In case of a conflict between priority grouping and available
N * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
N *
N * The returned priority value can be used for NVIC_SetPriority(...) function
N */
Nstatic __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 5) ? 5 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 5) < 7) ? 0 : PriorityGroupTmp - 7 + 5;
N 
N  return (
N           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
N           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
N         );
N}
N
N
N/**
N * @brief  Decode the priority of an interrupt
N *
N * @param  uint32_t   Priority       the priority for the interrupt
N * @param  uint32_t   PrioGroup   is the used priority group
N * @param  uint32_t* pPreemptPrio is the preemptive priority value (starting from 0)
N * @param  uint32_t* pSubPrio     is the sub priority value (starting from 0)
N * @return none
N *
N * Decode an interrupt priority value with the given priority group to 
N * preemptive priority value and sub priority value.
N * In case of a conflict between priority grouping and available
N * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
N *
N * The priority value can be retrieved with NVIC_GetPriority(...) function
N */
Nstatic __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 5) ? 5 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 5) < 7) ? 0 : PriorityGroupTmp - 7 + 5;
N  
N  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
N  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
N}
N
N
N
N/* ##################################    SysTick function  ############################################ */
N
N#if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
X#if (!1L) || (0 == 0)
N
N/* SysTick constants */
N#define SYSTICK_ENABLE              0                                          /* Config-Bit to start or stop the SysTick Timer                         */
N#define SYSTICK_TICKINT             1                                          /* Config-Bit to enable or disable the SysTick interrupt                 */
N#define SYSTICK_CLKSOURCE           2                                          /* Clocksource has the offset 2 in SysTick Control and Status Register   */
N#define SYSTICK_MAXCOUNT       ((1<<24) -1)                                    /* SysTick MaxCount                                                      */
N
N/**
N * @brief  Initialize and start the SysTick counter and its interrupt.
N *
N * @param  uint32_t ticks is the number of ticks between two interrupts
N * @return  none
N *
N * Initialise the system tick timer and its interrupt and start the
N * system tick timer / counter in free running mode to generate 
N * periodical interrupts.
N */
Nstatic __INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{ 
N  if (ticks > SYSTICK_MAXCOUNT)  return (1);                                             /* Reload value impossible */
X  if (ticks > ((1<<24) -1))  return (1);                                              
N
N  SysTick->LOAD  =  (ticks & SYSTICK_MAXCOUNT) - 1;                                      /* set reload register */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->LOAD  =  (ticks & ((1<<24) -1)) - 1;                                       
N  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);                            /* set Priority for Cortex-M0 System Interrupts */
X  NVIC_SetPriority (SysTick_IRQn, (1<<5) - 1);                             
N  SysTick->VAL   =  (0x00);                                                              /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->VAL   =  (0x00);                                                               
N  SysTick->CTRL = (1 << SYSTICK_CLKSOURCE) | (1<<SYSTICK_ENABLE) | (1<<SYSTICK_TICKINT); /* Enable SysTick IRQ and SysTick Timer */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->CTRL = (1 << 2) | (1<<0) | (1<<1);  
N  return (0);                                                                            /* Function successful */
N}
N
N#endif
N
N
N
N
N
N/* ##################################    Reset function  ############################################ */
N
N/**
N * @brief  Initiate a system reset request.
N *
N * @param   none
N * @return  none
N *
N * Initialize a system reset request to reset the MCU
N */
Nstatic __INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  SCB->AIRCR  = (NVIC_AIRCR_VECTKEY | (SCB->AIRCR & (0x700)) | (1<<NVIC_SYSRESETREQ)); /* Keep priority group unchanged */
X  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR  = ((0x5FA << 16) | (((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR & (0x700)) | (1<<2));  
N  __DSB();                                                                             /* Ensure completion of memory access */              
X  __dsb(0);                                                                                            
N  while(1);                                                                            /* wait until reset */
N}
N
N
N/* ##################################    Debug Output  function  ############################################ */
N
N
N/**
N * @brief  Outputs a character via the ITM channel 0
N *
N * @param   uint32_t character to output
N * @return  uint32_t input character
N *
N * The function outputs a character via the ITM channel 0. 
N * The function returns when no debugger is connected that has booked the output.  
N * It is blocking when a debugger is connected, but the previous character send is not transmitted. 
N */
Nstatic __INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic __inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if (ch == '\n') ITM_SendChar('\r');
N  
N  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA)  &&
X  if ((((CoreDebug_Type *) (0xE000EDF0))->DEMCR & (1 << 24))  &&
N      (ITM->TCR & ITM_TCR_ITMENA)                  &&
X      (((ITM_Type *) (0xE0000000))->TCR & 1)                  &&
N      (ITM->TER & (1UL << 0))  ) 
X      (((ITM_Type *) (0xE0000000))->TER & (1UL << 0))  ) 
N  {
N    while (ITM->PORT[0].u32 == 0);
X    while (((ITM_Type *) (0xE0000000))->PORT[0].u32 == 0);
N    ITM->PORT[0].u8 = (uint8_t) ch;
X    ((ITM_Type *) (0xE0000000))->PORT[0].u8 = (uint8_t) ch;
N  }  
N  return (ch);
N}
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CM3_CORE_H__ */
N
N/*lint -restore */
L 97 "C:\Keil\ARM\INC\NXP\LPC17xx\LPC17xx.H" 2
N#include "system_LPC17xx.h"                 /* System Header                                      */
L 1 "C:\Keil\ARM\INC\NXP\LPC17xx\system_LPC17xx.h" 1
N/******************************************************************************
N * @file:    system_LPC17xx.h
N * @purpose: CMSIS Cortex-M3 Device Peripheral Access Layer Header File
N *           for the NXP LPC17xx Device Series 
N * @version: V1.01
N * @date:    22. Jul. 2009
N *----------------------------------------------------------------------------
N *
N * Copyright (C) 2009 ARM Limited. All rights reserved.
N *
N * ARM Limited (ARM) is supplying this software for use with Cortex-M3 
N * processor based microcontrollers.  This file can be freely distributed 
N * within development tools that are supporting such ARM based processors. 
N *
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N
N#ifndef __SYSTEM_LPC17xx_H
N#define __SYSTEM_LPC17xx_H
N
N#ifdef __cplusplus
S extern "C" {
N#endif 
N
Nextern uint32_t SystemFrequency;    /*!< System Clock Frequency (Core Clock)  */
N
N
N/**
N * Initialize the system
N *
N * @param  none
N * @return none
N *
N * @brief  Setup the microcontroller system.
N *         Initialize the System and update the SystemFrequency variable.
N */
Nextern void SystemInit (void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __SYSTEM_LPC17xx_H */
L 98 "C:\Keil\ARM\INC\NXP\LPC17xx\LPC17xx.H" 2
N
N
N/******************************************************************************/
N/*                Device Specific Peripheral registers structures             */
N/******************************************************************************/
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma anon_unions
N#endif
N
N/*------------- System Control (SC) ------------------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t FLASHCFG;               /* Flash Accelerator Module           */
X  volatile uint32_t FLASHCFG;                
N       uint32_t RESERVED0[31];
N  __IO uint32_t PLL0CON;                /* Clocking and Power Control         */
X  volatile uint32_t PLL0CON;                 
N  __IO uint32_t PLL0CFG;
X  volatile uint32_t PLL0CFG;
N  __I  uint32_t PLL0STAT;
X  volatile const  uint32_t PLL0STAT;
N  __O  uint32_t PLL0FEED;
X  volatile  uint32_t PLL0FEED;
N       uint32_t RESERVED1[4];
N  __IO uint32_t PLL1CON;
X  volatile uint32_t PLL1CON;
N  __IO uint32_t PLL1CFG;
X  volatile uint32_t PLL1CFG;
N  __I  uint32_t PLL1STAT;
X  volatile const  uint32_t PLL1STAT;
N  __O  uint32_t PLL1FEED;
X  volatile  uint32_t PLL1FEED;
N       uint32_t RESERVED2[4];
N  __IO uint32_t PCON;
X  volatile uint32_t PCON;
N  __IO uint32_t PCONP;
X  volatile uint32_t PCONP;
N       uint32_t RESERVED3[15];
N  __IO uint32_t CCLKCFG;
X  volatile uint32_t CCLKCFG;
N  __IO uint32_t USBCLKCFG;
X  volatile uint32_t USBCLKCFG;
N  __IO uint32_t CLKSRCSEL;
X  volatile uint32_t CLKSRCSEL;
N  __IO uint32_t	CANSLEEPCLR;
X  volatile uint32_t	CANSLEEPCLR;
N  __IO uint32_t	CANWAKEFLAGS;
X  volatile uint32_t	CANWAKEFLAGS;
N       uint32_t RESERVED4[10];
N  __IO uint32_t EXTINT;                 /* External Interrupts                */
X  volatile uint32_t EXTINT;                  
N       uint32_t RESERVED5;
N  __IO uint32_t EXTMODE;
X  volatile uint32_t EXTMODE;
N  __IO uint32_t EXTPOLAR;
X  volatile uint32_t EXTPOLAR;
N       uint32_t RESERVED6[12];
N  __IO uint32_t RSID;                   /* Reset                              */
X  volatile uint32_t RSID;                    
N       uint32_t RESERVED7[7];
N  __IO uint32_t SCS;                    /* Syscon Miscellaneous Registers     */
X  volatile uint32_t SCS;                     
N  __IO uint32_t IRCTRIM;                /* Clock Dividers                     */
X  volatile uint32_t IRCTRIM;                 
N  __IO uint32_t PCLKSEL0;
X  volatile uint32_t PCLKSEL0;
N  __IO uint32_t PCLKSEL1;
X  volatile uint32_t PCLKSEL1;
N       uint32_t RESERVED8[4];
N  __IO uint32_t USBIntSt;               /* USB Device/OTG Interrupt Register  */
X  volatile uint32_t USBIntSt;                
N  __IO uint32_t DMAREQSEL;
X  volatile uint32_t DMAREQSEL;
N  __IO uint32_t CLKOUTCFG;              /* Clock Output Configuration         */
X  volatile uint32_t CLKOUTCFG;               
N } LPC_SC_TypeDef;
N
N/*------------- Pin Connect Block (PINCON) -----------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t PINSEL0;
X  volatile uint32_t PINSEL0;
N  __IO uint32_t PINSEL1;
X  volatile uint32_t PINSEL1;
N  __IO uint32_t PINSEL2;
X  volatile uint32_t PINSEL2;
N  __IO uint32_t PINSEL3;
X  volatile uint32_t PINSEL3;
N  __IO uint32_t PINSEL4;
X  volatile uint32_t PINSEL4;
N  __IO uint32_t PINSEL5;
X  volatile uint32_t PINSEL5;
N  __IO uint32_t PINSEL6;
X  volatile uint32_t PINSEL6;
N  __IO uint32_t PINSEL7;
X  volatile uint32_t PINSEL7;
N  __IO uint32_t PINSEL8;
X  volatile uint32_t PINSEL8;
N  __IO uint32_t PINSEL9;
X  volatile uint32_t PINSEL9;
N  __IO uint32_t PINSEL10;
X  volatile uint32_t PINSEL10;
N       uint32_t RESERVED0[5];
N  __IO uint32_t PINMODE0;
X  volatile uint32_t PINMODE0;
N  __IO uint32_t PINMODE1;
X  volatile uint32_t PINMODE1;
N  __IO uint32_t PINMODE2;
X  volatile uint32_t PINMODE2;
N  __IO uint32_t PINMODE3;
X  volatile uint32_t PINMODE3;
N  __IO uint32_t PINMODE4;
X  volatile uint32_t PINMODE4;
N  __IO uint32_t PINMODE5;
X  volatile uint32_t PINMODE5;
N  __IO uint32_t PINMODE6;
X  volatile uint32_t PINMODE6;
N  __IO uint32_t PINMODE7;
X  volatile uint32_t PINMODE7;
N  __IO uint32_t PINMODE8;
X  volatile uint32_t PINMODE8;
N  __IO uint32_t PINMODE9;
X  volatile uint32_t PINMODE9;
N  __IO uint32_t PINMODE_OD0;
X  volatile uint32_t PINMODE_OD0;
N  __IO uint32_t PINMODE_OD1;
X  volatile uint32_t PINMODE_OD1;
N  __IO uint32_t PINMODE_OD2;
X  volatile uint32_t PINMODE_OD2;
N  __IO uint32_t PINMODE_OD3;
X  volatile uint32_t PINMODE_OD3;
N  __IO uint32_t PINMODE_OD4;
X  volatile uint32_t PINMODE_OD4;
N  __IO uint32_t I2CPADCFG;
X  volatile uint32_t I2CPADCFG;
N} LPC_PINCON_TypeDef;
N
N/*------------- General Purpose Input/Output (GPIO) --------------------------*/
Ntypedef struct
N{
N  union {
N    __IO uint32_t FIODIR;
X    volatile uint32_t FIODIR;
N    struct {
N      __IO uint16_t FIODIRL;
X      volatile uint16_t FIODIRL;
N      __IO uint16_t FIODIRH;
X      volatile uint16_t FIODIRH;
N    };
N    struct {
N      __IO uint8_t  FIODIR0;
X      volatile uint8_t  FIODIR0;
N      __IO uint8_t  FIODIR1;
X      volatile uint8_t  FIODIR1;
N      __IO uint8_t  FIODIR2;
X      volatile uint8_t  FIODIR2;
N      __IO uint8_t  FIODIR3;
X      volatile uint8_t  FIODIR3;
N    };
N  };
N  uint32_t RESERVED0[3];
N  union {
N    __IO uint32_t FIOMASK;
X    volatile uint32_t FIOMASK;
N    struct {
N      __IO uint16_t FIOMASKL;
X      volatile uint16_t FIOMASKL;
N      __IO uint16_t FIOMASKH;
X      volatile uint16_t FIOMASKH;
N    };
N    struct {
N      __IO uint8_t  FIOMASK0;
X      volatile uint8_t  FIOMASK0;
N      __IO uint8_t  FIOMASK1;
X      volatile uint8_t  FIOMASK1;
N      __IO uint8_t  FIOMASK2;
X      volatile uint8_t  FIOMASK2;
N      __IO uint8_t  FIOMASK3;
X      volatile uint8_t  FIOMASK3;
N    };
N  };
N  union {
N    __IO uint32_t FIOPIN;
X    volatile uint32_t FIOPIN;
N    struct {
N      __IO uint16_t FIOPINL;
X      volatile uint16_t FIOPINL;
N      __IO uint16_t FIOPINH;
X      volatile uint16_t FIOPINH;
N    };
N    struct {
N      __IO uint8_t  FIOPIN0;
X      volatile uint8_t  FIOPIN0;
N      __IO uint8_t  FIOPIN1;
X      volatile uint8_t  FIOPIN1;
N      __IO uint8_t  FIOPIN2;
X      volatile uint8_t  FIOPIN2;
N      __IO uint8_t  FIOPIN3;
X      volatile uint8_t  FIOPIN3;
N    };
N  };
N  union {
N    __IO uint32_t FIOSET;
X    volatile uint32_t FIOSET;
N    struct {
N      __IO uint16_t FIOSETL;
X      volatile uint16_t FIOSETL;
N      __IO uint16_t FIOSETH;
X      volatile uint16_t FIOSETH;
N    };
N    struct {
N      __IO uint8_t  FIOSET0;
X      volatile uint8_t  FIOSET0;
N      __IO uint8_t  FIOSET1;
X      volatile uint8_t  FIOSET1;
N      __IO uint8_t  FIOSET2;
X      volatile uint8_t  FIOSET2;
N      __IO uint8_t  FIOSET3;
X      volatile uint8_t  FIOSET3;
N    };
N  };
N  union {
N    __O  uint32_t FIOCLR;
X    volatile  uint32_t FIOCLR;
N    struct {
N      __O  uint16_t FIOCLRL;
X      volatile  uint16_t FIOCLRL;
N      __O  uint16_t FIOCLRH;
X      volatile  uint16_t FIOCLRH;
N    };
N    struct {
N      __O  uint8_t  FIOCLR0;
X      volatile  uint8_t  FIOCLR0;
N      __O  uint8_t  FIOCLR1;
X      volatile  uint8_t  FIOCLR1;
N      __O  uint8_t  FIOCLR2;
X      volatile  uint8_t  FIOCLR2;
N      __O  uint8_t  FIOCLR3;
X      volatile  uint8_t  FIOCLR3;
N    };
N  };
N} LPC_GPIO_TypeDef;
N
Ntypedef struct
N{
N  __I  uint32_t IntStatus;
X  volatile const  uint32_t IntStatus;
N  __I  uint32_t IO0IntStatR;
X  volatile const  uint32_t IO0IntStatR;
N  __I  uint32_t IO0IntStatF;
X  volatile const  uint32_t IO0IntStatF;
N  __O  uint32_t IO0IntClr;
X  volatile  uint32_t IO0IntClr;
N  __IO uint32_t IO0IntEnR;
X  volatile uint32_t IO0IntEnR;
N  __IO uint32_t IO0IntEnF;
X  volatile uint32_t IO0IntEnF;
N       uint32_t RESERVED0[3];
N  __I  uint32_t IO2IntStatR;
X  volatile const  uint32_t IO2IntStatR;
N  __I  uint32_t IO2IntStatF;
X  volatile const  uint32_t IO2IntStatF;
N  __O  uint32_t IO2IntClr;
X  volatile  uint32_t IO2IntClr;
N  __IO uint32_t IO2IntEnR;
X  volatile uint32_t IO2IntEnR;
N  __IO uint32_t IO2IntEnF;
X  volatile uint32_t IO2IntEnF;
N} LPC_GPIOINT_TypeDef;
N
N/*------------- Timer (TIM) --------------------------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t IR;
X  volatile uint32_t IR;
N  __IO uint32_t TCR;
X  volatile uint32_t TCR;
N  __IO uint32_t TC;
X  volatile uint32_t TC;
N  __IO uint32_t PR;
X  volatile uint32_t PR;
N  __IO uint32_t PC;
X  volatile uint32_t PC;
N  __IO uint32_t MCR;
X  volatile uint32_t MCR;
N  __IO uint32_t MR0;
X  volatile uint32_t MR0;
N  __IO uint32_t MR1;
X  volatile uint32_t MR1;
N  __IO uint32_t MR2;
X  volatile uint32_t MR2;
N  __IO uint32_t MR3;
X  volatile uint32_t MR3;
N  __IO uint32_t CCR;
X  volatile uint32_t CCR;
N  __I  uint32_t CR0;
X  volatile const  uint32_t CR0;
N  __I  uint32_t CR1;
X  volatile const  uint32_t CR1;
N       uint32_t RESERVED0[2];
N  __IO uint32_t EMR;
X  volatile uint32_t EMR;
N       uint32_t RESERVED1[12];
N  __IO uint32_t CTCR;
X  volatile uint32_t CTCR;
N} LPC_TIM_TypeDef;
N
N/*------------- Pulse-Width Modulation (PWM) ---------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t IR;
X  volatile uint32_t IR;
N  __IO uint32_t TCR;
X  volatile uint32_t TCR;
N  __IO uint32_t TC;
X  volatile uint32_t TC;
N  __IO uint32_t PR;
X  volatile uint32_t PR;
N  __IO uint32_t PC;
X  volatile uint32_t PC;
N  __IO uint32_t MCR;
X  volatile uint32_t MCR;
N  __IO uint32_t MR0;
X  volatile uint32_t MR0;
N  __IO uint32_t MR1;
X  volatile uint32_t MR1;
N  __IO uint32_t MR2;
X  volatile uint32_t MR2;
N  __IO uint32_t MR3;
X  volatile uint32_t MR3;
N  __IO uint32_t CCR;
X  volatile uint32_t CCR;
N  __I  uint32_t CR0;
X  volatile const  uint32_t CR0;
N  __I  uint32_t CR1;
X  volatile const  uint32_t CR1;
N  __I  uint32_t CR2;
X  volatile const  uint32_t CR2;
N  __I  uint32_t CR3;
X  volatile const  uint32_t CR3;
N       uint32_t RESERVED0;
N  __IO uint32_t MR4;
X  volatile uint32_t MR4;
N  __IO uint32_t MR5;
X  volatile uint32_t MR5;
N  __IO uint32_t MR6;
X  volatile uint32_t MR6;
N  __IO uint32_t PCR;
X  volatile uint32_t PCR;
N  __IO uint32_t LER;
X  volatile uint32_t LER;
N       uint32_t RESERVED1[7];
N  __IO uint32_t CTCR;
X  volatile uint32_t CTCR;
N} LPC_PWM_TypeDef;
N
N/*------------- Universal Asynchronous Receiver Transmitter (UART) -----------*/
Ntypedef struct
N{
N  union {
N  __I  uint8_t  RBR;
X  volatile const  uint8_t  RBR;
N  __O  uint8_t  THR;
X  volatile  uint8_t  THR;
N  __IO uint8_t  DLL;
X  volatile uint8_t  DLL;
N       uint32_t RESERVED0;
N  };
N  union {
N  __IO uint8_t  DLM;
X  volatile uint8_t  DLM;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  };
N  union {
N  __I  uint32_t IIR;
X  volatile const  uint32_t IIR;
N  __O  uint8_t  FCR;
X  volatile  uint8_t  FCR;
N  };
N  __IO uint8_t  LCR;
X  volatile uint8_t  LCR;
N       uint8_t  RESERVED1[7];
N  __I  uint8_t  LSR;
X  volatile const  uint8_t  LSR;
N       uint8_t  RESERVED2[7];
N  __IO uint8_t  SCR;
X  volatile uint8_t  SCR;
N       uint8_t  RESERVED3[3];
N  __IO uint32_t ACR;
X  volatile uint32_t ACR;
N  __IO uint8_t  ICR;
X  volatile uint8_t  ICR;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  FDR;
X  volatile uint8_t  FDR;
N       uint8_t  RESERVED5[7];
N  __IO uint8_t  TER;
X  volatile uint8_t  TER;
N       uint8_t  RESERVED6[39];
N  __IO uint32_t FIFOLVL;
X  volatile uint32_t FIFOLVL;
N} LPC_UART_TypeDef;
N
Ntypedef struct
N{
N  union {
N  __I  uint8_t  RBR;
X  volatile const  uint8_t  RBR;
N  __O  uint8_t  THR;
X  volatile  uint8_t  THR;
N  __IO uint8_t  DLL;
X  volatile uint8_t  DLL;
N       uint32_t RESERVED0;
N  };
N  union {
N  __IO uint8_t  DLM;
X  volatile uint8_t  DLM;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  };
N  union {
N  __I  uint32_t IIR;
X  volatile const  uint32_t IIR;
N  __O  uint8_t  FCR;
X  volatile  uint8_t  FCR;
N  };
N  __IO uint8_t  LCR;
X  volatile uint8_t  LCR;
N       uint8_t  RESERVED1[7];
N  __I  uint8_t  LSR;
X  volatile const  uint8_t  LSR;
N       uint8_t  RESERVED2[7];
N  __IO uint8_t  SCR;
X  volatile uint8_t  SCR;
N       uint8_t  RESERVED3[3];
N  __IO uint32_t ACR;
X  volatile uint32_t ACR;
N  __IO uint8_t  ICR;
X  volatile uint8_t  ICR;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  FDR;
X  volatile uint8_t  FDR;
N       uint8_t  RESERVED5[7];
N  __IO uint8_t  TER;
X  volatile uint8_t  TER;
N       uint8_t  RESERVED6[39];
N  __IO uint32_t FIFOLVL;
X  volatile uint32_t FIFOLVL;
N} LPC_UART0_TypeDef;
N
Ntypedef struct
N{
N  union {
N  __I  uint8_t  RBR;
X  volatile const  uint8_t  RBR;
N  __O  uint8_t  THR;
X  volatile  uint8_t  THR;
N  __IO uint8_t  DLL;
X  volatile uint8_t  DLL;
N       uint32_t RESERVED0;
N  };
N  union {
N  __IO uint8_t  DLM;
X  volatile uint8_t  DLM;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  };
N  union {
N  __I  uint32_t IIR;
X  volatile const  uint32_t IIR;
N  __O  uint8_t  FCR;
X  volatile  uint8_t  FCR;
N  };
N  __IO uint8_t  LCR;
X  volatile uint8_t  LCR;
N       uint8_t  RESERVED1[3];
N  __IO uint8_t  MCR;
X  volatile uint8_t  MCR;
N       uint8_t  RESERVED2[3];
N  __I  uint8_t  LSR;
X  volatile const  uint8_t  LSR;
N       uint8_t  RESERVED3[3];
N  __I  uint8_t  MSR;
X  volatile const  uint8_t  MSR;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  SCR;
X  volatile uint8_t  SCR;
N       uint8_t  RESERVED5[3];
N  __IO uint32_t ACR;
X  volatile uint32_t ACR;
N       uint32_t RESERVED6;
N  __IO uint32_t FDR;
X  volatile uint32_t FDR;
N       uint32_t RESERVED7;
N  __IO uint8_t  TER;
X  volatile uint8_t  TER;
N       uint8_t  RESERVED8[27];
N  __IO uint8_t  RS485CTRL;
X  volatile uint8_t  RS485CTRL;
N       uint8_t  RESERVED9[3];
N  __IO uint8_t  ADRMATCH;
X  volatile uint8_t  ADRMATCH;
N       uint8_t  RESERVED10[3];
N  __IO uint8_t  RS485DLY;
X  volatile uint8_t  RS485DLY;
N       uint8_t  RESERVED11[3];
N  __IO uint32_t FIFOLVL;
X  volatile uint32_t FIFOLVL;
N} LPC_UART1_TypeDef;
N
N/*------------- Serial Peripheral Interface (SPI) ----------------------------*/
Ntypedef struct
N{
N  __IO uint32_t SPCR;
X  volatile uint32_t SPCR;
N  __I  uint32_t SPSR;
X  volatile const  uint32_t SPSR;
N  __IO uint32_t SPDR;
X  volatile uint32_t SPDR;
N  __IO uint32_t SPCCR;
X  volatile uint32_t SPCCR;
N       uint32_t RESERVED0[3];
N  __IO uint32_t SPINT;
X  volatile uint32_t SPINT;
N} LPC_SPI_TypeDef;
N
N/*------------- Synchronous Serial Communication (SSP) -----------------------*/
Ntypedef struct
N{
N  __IO uint32_t CR0;
X  volatile uint32_t CR0;
N  __IO uint32_t CR1;
X  volatile uint32_t CR1;
N  __IO uint32_t DR;
X  volatile uint32_t DR;
N  __I  uint32_t SR;
X  volatile const  uint32_t SR;
N  __IO uint32_t CPSR;
X  volatile uint32_t CPSR;
N  __IO uint32_t IMSC;
X  volatile uint32_t IMSC;
N  __IO uint32_t RIS;
X  volatile uint32_t RIS;
N  __IO uint32_t MIS;
X  volatile uint32_t MIS;
N  __IO uint32_t ICR;
X  volatile uint32_t ICR;
N  __IO uint32_t DMACR;
X  volatile uint32_t DMACR;
N} LPC_SSP_TypeDef;
N
N/*------------- Inter-Integrated Circuit (I2C) -------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t I2CONSET;
X  volatile uint32_t I2CONSET;
N  __I  uint32_t I2STAT;
X  volatile const  uint32_t I2STAT;
N  __IO uint32_t I2DAT;
X  volatile uint32_t I2DAT;
N  __IO uint32_t I2ADR0;
X  volatile uint32_t I2ADR0;
N  __IO uint32_t I2SCLH;
X  volatile uint32_t I2SCLH;
N  __IO uint32_t I2SCLL;
X  volatile uint32_t I2SCLL;
N  __O  uint32_t I2CONCLR;
X  volatile  uint32_t I2CONCLR;
N  __IO uint32_t MMCTRL;
X  volatile uint32_t MMCTRL;
N  __IO uint32_t I2ADR1;
X  volatile uint32_t I2ADR1;
N  __IO uint32_t I2ADR2;
X  volatile uint32_t I2ADR2;
N  __IO uint32_t I2ADR3;
X  volatile uint32_t I2ADR3;
N  __I  uint32_t I2DATA_BUFFER;
X  volatile const  uint32_t I2DATA_BUFFER;
N  __IO uint32_t I2MASK0;
X  volatile uint32_t I2MASK0;
N  __IO uint32_t I2MASK1;
X  volatile uint32_t I2MASK1;
N  __IO uint32_t I2MASK2;
X  volatile uint32_t I2MASK2;
N  __IO uint32_t I2MASK3;
X  volatile uint32_t I2MASK3;
N} LPC_I2C_TypeDef;
N
N/*------------- Inter IC Sound (I2S) -----------------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t I2SDAO;
X  volatile uint32_t I2SDAO;
N  __IO uint32_t I2SDAI;
X  volatile uint32_t I2SDAI;
N  __O  uint32_t I2STXFIFO;
X  volatile  uint32_t I2STXFIFO;
N  __I  uint32_t I2SRXFIFO;
X  volatile const  uint32_t I2SRXFIFO;
N  __I  uint32_t I2SSTATE;
X  volatile const  uint32_t I2SSTATE;
N  __IO uint32_t I2SDMA1;
X  volatile uint32_t I2SDMA1;
N  __IO uint32_t I2SDMA2;
X  volatile uint32_t I2SDMA2;
N  __IO uint32_t I2SIRQ;
X  volatile uint32_t I2SIRQ;
N  __IO uint32_t I2STXRATE;
X  volatile uint32_t I2STXRATE;
N  __IO uint32_t I2SRXRATE;
X  volatile uint32_t I2SRXRATE;
N  __IO uint32_t I2STXBITRATE;
X  volatile uint32_t I2STXBITRATE;
N  __IO uint32_t I2SRXBITRATE;
X  volatile uint32_t I2SRXBITRATE;
N  __IO uint32_t I2STXMODE;
X  volatile uint32_t I2STXMODE;
N  __IO uint32_t I2SRXMODE;
X  volatile uint32_t I2SRXMODE;
N} LPC_I2S_TypeDef;
N
N/*------------- Repetitive Interrupt Timer (RIT) -----------------------------*/
Ntypedef struct
N{
N  __IO uint32_t RICOMPVAL;
X  volatile uint32_t RICOMPVAL;
N  __IO uint32_t RIMASK;
X  volatile uint32_t RIMASK;
N  __IO uint8_t  RICTRL;
X  volatile uint8_t  RICTRL;
N       uint8_t  RESERVED0[3];
N  __IO uint32_t RICOUNTER;
X  volatile uint32_t RICOUNTER;
N} LPC_RIT_TypeDef;
N
N/*------------- Real-Time Clock (RTC) ----------------------------------------*/
Ntypedef struct
N{
N  __IO uint8_t  ILR;
X  volatile uint8_t  ILR;
N       uint8_t  RESERVED0[7];
N  __IO uint8_t  CCR;
X  volatile uint8_t  CCR;
N       uint8_t  RESERVED1[3];
N  __IO uint8_t  CIIR;
X  volatile uint8_t  CIIR;
N       uint8_t  RESERVED2[3];
N  __IO uint8_t  AMR;
X  volatile uint8_t  AMR;
N       uint8_t  RESERVED3[3];
N  __I  uint32_t CTIME0;
X  volatile const  uint32_t CTIME0;
N  __I  uint32_t CTIME1;
X  volatile const  uint32_t CTIME1;
N  __I  uint32_t CTIME2;
X  volatile const  uint32_t CTIME2;
N  __IO uint8_t  SEC;
X  volatile uint8_t  SEC;
N       uint8_t  RESERVED4[3];
N  __IO uint8_t  MIN;
X  volatile uint8_t  MIN;
N       uint8_t  RESERVED5[3];
N  __IO uint8_t  HOUR;
X  volatile uint8_t  HOUR;
N       uint8_t  RESERVED6[3];
N  __IO uint8_t  DOM;
X  volatile uint8_t  DOM;
N       uint8_t  RESERVED7[3];
N  __IO uint8_t  DOW;
X  volatile uint8_t  DOW;
N       uint8_t  RESERVED8[3];
N  __IO uint16_t DOY;
X  volatile uint16_t DOY;
N       uint16_t RESERVED9;
N  __IO uint8_t  MONTH;
X  volatile uint8_t  MONTH;
N       uint8_t  RESERVED10[3];
N  __IO uint16_t YEAR;
X  volatile uint16_t YEAR;
N       uint16_t RESERVED11;
N  __IO uint32_t CALIBRATION;
X  volatile uint32_t CALIBRATION;
N  __IO uint32_t GPREG0;
X  volatile uint32_t GPREG0;
N  __IO uint32_t GPREG1;
X  volatile uint32_t GPREG1;
N  __IO uint32_t GPREG2;
X  volatile uint32_t GPREG2;
N  __IO uint32_t GPREG3;
X  volatile uint32_t GPREG3;
N  __IO uint32_t GPREG4;
X  volatile uint32_t GPREG4;
N  __IO uint8_t  RTC_AUXEN;
X  volatile uint8_t  RTC_AUXEN;
N       uint8_t  RESERVED12[3];
N  __IO uint8_t  RTC_AUX;
X  volatile uint8_t  RTC_AUX;
N       uint8_t  RESERVED13[3];
N  __IO uint8_t  ALSEC;
X  volatile uint8_t  ALSEC;
N       uint8_t  RESERVED14[3];
N  __IO uint8_t  ALMIN;
X  volatile uint8_t  ALMIN;
N       uint8_t  RESERVED15[3];
N  __IO uint8_t  ALHOUR;
X  volatile uint8_t  ALHOUR;
N       uint8_t  RESERVED16[3];
N  __IO uint8_t  ALDOM;
X  volatile uint8_t  ALDOM;
N       uint8_t  RESERVED17[3];
N  __IO uint8_t  ALDOW;
X  volatile uint8_t  ALDOW;
N       uint8_t  RESERVED18[3];
N  __IO uint16_t ALDOY;
X  volatile uint16_t ALDOY;
N       uint16_t RESERVED19;
N  __IO uint8_t  ALMON;
X  volatile uint8_t  ALMON;
N       uint8_t  RESERVED20[3];
N  __IO uint16_t ALYEAR;
X  volatile uint16_t ALYEAR;
N       uint16_t RESERVED21;
N} LPC_RTC_TypeDef;
N
N/*------------- Watchdog Timer (WDT) -----------------------------------------*/
Ntypedef struct
N{
N  __IO uint8_t  WDMOD;
X  volatile uint8_t  WDMOD;
N       uint8_t  RESERVED0[3];
N  __IO uint32_t WDTC;
X  volatile uint32_t WDTC;
N  __O  uint8_t  WDFEED;
X  volatile  uint8_t  WDFEED;
N       uint8_t  RESERVED1[3];
N  __I  uint32_t WDTV;
X  volatile const  uint32_t WDTV;
N  __IO uint32_t WDCLKSEL;
X  volatile uint32_t WDCLKSEL;
N} LPC_WDT_TypeDef;
N
N/*------------- Analog-to-Digital Converter (ADC) ----------------------------*/
Ntypedef struct
N{
N  __IO uint32_t ADCR;
X  volatile uint32_t ADCR;
N  __IO uint32_t ADGDR;
X  volatile uint32_t ADGDR;
N       uint32_t RESERVED0;
N  __IO uint32_t ADINTEN;
X  volatile uint32_t ADINTEN;
N  __I  uint32_t ADDR0;
X  volatile const  uint32_t ADDR0;
N  __I  uint32_t ADDR1;
X  volatile const  uint32_t ADDR1;
N  __I  uint32_t ADDR2;
X  volatile const  uint32_t ADDR2;
N  __I  uint32_t ADDR3;
X  volatile const  uint32_t ADDR3;
N  __I  uint32_t ADDR4;
X  volatile const  uint32_t ADDR4;
N  __I  uint32_t ADDR5;
X  volatile const  uint32_t ADDR5;
N  __I  uint32_t ADDR6;
X  volatile const  uint32_t ADDR6;
N  __I  uint32_t ADDR7;
X  volatile const  uint32_t ADDR7;
N  __I  uint32_t ADSTAT;
X  volatile const  uint32_t ADSTAT;
N  __IO uint32_t ADTRM;
X  volatile uint32_t ADTRM;
N} LPC_ADC_TypeDef;
N
N/*------------- Digital-to-Analog Converter (DAC) ----------------------------*/
Ntypedef struct
N{
N  __IO uint32_t DACR;
X  volatile uint32_t DACR;
N  __IO uint32_t DACCTRL;
X  volatile uint32_t DACCTRL;
N  __IO uint16_t DACCNTVAL;
X  volatile uint16_t DACCNTVAL;
N} LPC_DAC_TypeDef;
N
N/*------------- Motor Control Pulse-Width Modulation (MCPWM) -----------------*/
Ntypedef struct
N{
N  __I  uint32_t MCCON;
X  volatile const  uint32_t MCCON;
N  __O  uint32_t MCCON_SET;
X  volatile  uint32_t MCCON_SET;
N  __O  uint32_t MCCON_CLR;
X  volatile  uint32_t MCCON_CLR;
N  __I  uint32_t MCCAPCON;
X  volatile const  uint32_t MCCAPCON;
N  __O  uint32_t MCCAPCON_SET;
X  volatile  uint32_t MCCAPCON_SET;
N  __O  uint32_t MCCAPCON_CLR;
X  volatile  uint32_t MCCAPCON_CLR;
N  __IO uint32_t MCTIM0;
X  volatile uint32_t MCTIM0;
N  __IO uint32_t MCTIM1;
X  volatile uint32_t MCTIM1;
N  __IO uint32_t MCTIM2;
X  volatile uint32_t MCTIM2;
N  __IO uint32_t MCPER0;
X  volatile uint32_t MCPER0;
N  __IO uint32_t MCPER1;
X  volatile uint32_t MCPER1;
N  __IO uint32_t MCPER2;
X  volatile uint32_t MCPER2;
N  __IO uint32_t MCPW0;
X  volatile uint32_t MCPW0;
N  __IO uint32_t MCPW1;
X  volatile uint32_t MCPW1;
N  __IO uint32_t MCPW2;
X  volatile uint32_t MCPW2;
N  __IO uint32_t MCDEADTIME;
X  volatile uint32_t MCDEADTIME;
N  __IO uint32_t MCCCP;
X  volatile uint32_t MCCCP;
N  __IO uint32_t MCCR0;
X  volatile uint32_t MCCR0;
N  __IO uint32_t MCCR1;
X  volatile uint32_t MCCR1;
N  __IO uint32_t MCCR2;
X  volatile uint32_t MCCR2;
N  __I  uint32_t MCINTEN;
X  volatile const  uint32_t MCINTEN;
N  __O  uint32_t MCINTEN_SET;
X  volatile  uint32_t MCINTEN_SET;
N  __O  uint32_t MCINTEN_CLR;
X  volatile  uint32_t MCINTEN_CLR;
N  __I  uint32_t MCCNTCON;
X  volatile const  uint32_t MCCNTCON;
N  __O  uint32_t MCCNTCON_SET;
X  volatile  uint32_t MCCNTCON_SET;
N  __O  uint32_t MCCNTCON_CLR;
X  volatile  uint32_t MCCNTCON_CLR;
N  __I  uint32_t MCINTFLAG;
X  volatile const  uint32_t MCINTFLAG;
N  __O  uint32_t MCINTFLAG_SET;
X  volatile  uint32_t MCINTFLAG_SET;
N  __O  uint32_t MCINTFLAG_CLR;
X  volatile  uint32_t MCINTFLAG_CLR;
N  __O  uint32_t MCCAP_CLR;
X  volatile  uint32_t MCCAP_CLR;
N} LPC_MCPWM_TypeDef;
N
N/*------------- Quadrature Encoder Interface (QEI) ---------------------------*/
Ntypedef struct
N{
N  __O  uint32_t QEICON;
X  volatile  uint32_t QEICON;
N  __I  uint32_t QEISTAT;
X  volatile const  uint32_t QEISTAT;
N  __IO uint32_t QEICONF;
X  volatile uint32_t QEICONF;
N  __I  uint32_t QEIPOS;
X  volatile const  uint32_t QEIPOS;
N  __IO uint32_t QEIMAXPOS;
X  volatile uint32_t QEIMAXPOS;
N  __IO uint32_t CMPOS0;
X  volatile uint32_t CMPOS0;
N  __IO uint32_t CMPOS1;
X  volatile uint32_t CMPOS1;
N  __IO uint32_t CMPOS2;
X  volatile uint32_t CMPOS2;
N  __I  uint32_t INXCNT;
X  volatile const  uint32_t INXCNT;
N  __IO uint32_t INXCMP;
X  volatile uint32_t INXCMP;
N  __IO uint32_t QEILOAD;
X  volatile uint32_t QEILOAD;
N  __I  uint32_t QEITIME;
X  volatile const  uint32_t QEITIME;
N  __I  uint32_t QEIVEL;
X  volatile const  uint32_t QEIVEL;
N  __I  uint32_t QEICAP;
X  volatile const  uint32_t QEICAP;
N  __IO uint32_t VELCOMP;
X  volatile uint32_t VELCOMP;
N  __IO uint32_t FILTER;
X  volatile uint32_t FILTER;
N       uint32_t RESERVED0[998];
N  __O  uint32_t QEIIEC;
X  volatile  uint32_t QEIIEC;
N  __O  uint32_t QEIIES;
X  volatile  uint32_t QEIIES;
N  __I  uint32_t QEIINTSTAT;
X  volatile const  uint32_t QEIINTSTAT;
N  __I  uint32_t QEIIE;
X  volatile const  uint32_t QEIIE;
N  __O  uint32_t QEICLR;
X  volatile  uint32_t QEICLR;
N  __O  uint32_t QEISET;
X  volatile  uint32_t QEISET;
N} LPC_QEI_TypeDef;
N
N/*------------- Controller Area Network (CAN) --------------------------------*/
Ntypedef struct
N{
N  __IO uint32_t mask[512];              /* ID Masks                           */
X  volatile uint32_t mask[512];               
N} LPC_CANAF_RAM_TypeDef;
N
Ntypedef struct                          /* Acceptance Filter Registers        */
N{
N  __IO uint32_t AFMR;
X  volatile uint32_t AFMR;
N  __IO uint32_t SFF_sa;
X  volatile uint32_t SFF_sa;
N  __IO uint32_t SFF_GRP_sa;
X  volatile uint32_t SFF_GRP_sa;
N  __IO uint32_t EFF_sa;
X  volatile uint32_t EFF_sa;
N  __IO uint32_t EFF_GRP_sa;
X  volatile uint32_t EFF_GRP_sa;
N  __IO uint32_t ENDofTable;
X  volatile uint32_t ENDofTable;
N  __I  uint32_t LUTerrAd;
X  volatile const  uint32_t LUTerrAd;
N  __I  uint32_t LUTerr;
X  volatile const  uint32_t LUTerr;
N  __IO uint32_t FCANIE;
X  volatile uint32_t FCANIE;
N  __IO uint32_t FCANIC0;
X  volatile uint32_t FCANIC0;
N  __IO uint32_t FCANIC1;
X  volatile uint32_t FCANIC1;
N} LPC_CANAF_TypeDef;
N
Ntypedef struct                          /* Central Registers                  */
N{
N  __I  uint32_t CANTxSR;
X  volatile const  uint32_t CANTxSR;
N  __I  uint32_t CANRxSR;
X  volatile const  uint32_t CANRxSR;
N  __I  uint32_t CANMSR;
X  volatile const  uint32_t CANMSR;
N} LPC_CANCR_TypeDef;
N
Ntypedef struct                          /* Controller Registers               */
N{
N  __IO uint32_t MOD;
X  volatile uint32_t MOD;
N  __O  uint32_t CMR;
X  volatile  uint32_t CMR;
N  __IO uint32_t GSR;
X  volatile uint32_t GSR;
N  __I  uint32_t ICR;
X  volatile const  uint32_t ICR;
N  __IO uint32_t IER;
X  volatile uint32_t IER;
N  __IO uint32_t BTR;
X  volatile uint32_t BTR;
N  __IO uint32_t EWL;
X  volatile uint32_t EWL;
N  __I  uint32_t SR;
X  volatile const  uint32_t SR;
N  __IO uint32_t RFS;
X  volatile uint32_t RFS;
N  __IO uint32_t RID;
X  volatile uint32_t RID;
N  __IO uint32_t RDA;
X  volatile uint32_t RDA;
N  __IO uint32_t RDB;
X  volatile uint32_t RDB;
N  __IO uint32_t TFI1;
X  volatile uint32_t TFI1;
N  __IO uint32_t TID1;
X  volatile uint32_t TID1;
N  __IO uint32_t TDA1;
X  volatile uint32_t TDA1;
N  __IO uint32_t TDB1;
X  volatile uint32_t TDB1;
N  __IO uint32_t TFI2;
X  volatile uint32_t TFI2;
N  __IO uint32_t TID2;
X  volatile uint32_t TID2;
N  __IO uint32_t TDA2;
X  volatile uint32_t TDA2;
N  __IO uint32_t TDB2;
X  volatile uint32_t TDB2;
N  __IO uint32_t TFI3;
X  volatile uint32_t TFI3;
N  __IO uint32_t TID3;
X  volatile uint32_t TID3;
N  __IO uint32_t TDA3;
X  volatile uint32_t TDA3;
N  __IO uint32_t TDB3;
X  volatile uint32_t TDB3;
N} LPC_CAN_TypeDef;
N
N/*------------- General Purpose Direct Memory Access (GPDMA) -----------------*/
Ntypedef struct                          /* Common Registers                   */
N{
N  __I  uint32_t DMACIntStat;
X  volatile const  uint32_t DMACIntStat;
N  __I  uint32_t DMACIntTCStat;
X  volatile const  uint32_t DMACIntTCStat;
N  __O  uint32_t DMACIntTCClear;
X  volatile  uint32_t DMACIntTCClear;
N  __I  uint32_t DMACIntErrStat;
X  volatile const  uint32_t DMACIntErrStat;
N  __O  uint32_t DMACIntErrClr;
X  volatile  uint32_t DMACIntErrClr;
N  __I  uint32_t DMACRawIntTCStat;
X  volatile const  uint32_t DMACRawIntTCStat;
N  __I  uint32_t DMACRawIntErrStat;
X  volatile const  uint32_t DMACRawIntErrStat;
N  __I  uint32_t DMACEnbldChns;
X  volatile const  uint32_t DMACEnbldChns;
N  __IO uint32_t DMACSoftBReq;
X  volatile uint32_t DMACSoftBReq;
N  __IO uint32_t DMACSoftSReq;
X  volatile uint32_t DMACSoftSReq;
N  __IO uint32_t DMACSoftLBReq;
X  volatile uint32_t DMACSoftLBReq;
N  __IO uint32_t DMACSoftLSReq;
X  volatile uint32_t DMACSoftLSReq;
N  __IO uint32_t DMACConfig;
X  volatile uint32_t DMACConfig;
N  __IO uint32_t DMACSync;
X  volatile uint32_t DMACSync;
N} LPC_GPDMA_TypeDef;
N
Ntypedef struct                          /* Channel Registers                  */
N{
N  __IO uint32_t DMACCSrcAddr;
X  volatile uint32_t DMACCSrcAddr;
N  __IO uint32_t DMACCDestAddr;
X  volatile uint32_t DMACCDestAddr;
N  __IO uint32_t DMACCLLI;
X  volatile uint32_t DMACCLLI;
N  __IO uint32_t DMACCControl;
X  volatile uint32_t DMACCControl;
N  __IO uint32_t DMACCConfig;
X  volatile uint32_t DMACCConfig;
N} LPC_GPDMACH_TypeDef;
N
N/*------------- Universal Serial Bus (USB) -----------------------------------*/
Ntypedef struct
N{
N  __I  uint32_t HcRevision;             /* USB Host Registers                 */
X  volatile const  uint32_t HcRevision;              
N  __IO uint32_t HcControl;
X  volatile uint32_t HcControl;
N  __IO uint32_t HcCommandStatus;
X  volatile uint32_t HcCommandStatus;
N  __IO uint32_t HcInterruptStatus;
X  volatile uint32_t HcInterruptStatus;
N  __IO uint32_t HcInterruptEnable;
X  volatile uint32_t HcInterruptEnable;
N  __IO uint32_t HcInterruptDisable;
X  volatile uint32_t HcInterruptDisable;
N  __IO uint32_t HcHCCA;
X  volatile uint32_t HcHCCA;
N  __I  uint32_t HcPeriodCurrentED;
X  volatile const  uint32_t HcPeriodCurrentED;
N  __IO uint32_t HcControlHeadED;
X  volatile uint32_t HcControlHeadED;
N  __IO uint32_t HcControlCurrentED;
X  volatile uint32_t HcControlCurrentED;
N  __IO uint32_t HcBulkHeadED;
X  volatile uint32_t HcBulkHeadED;
N  __IO uint32_t HcBulkCurrentED;
X  volatile uint32_t HcBulkCurrentED;
N  __I  uint32_t HcDoneHead;
X  volatile const  uint32_t HcDoneHead;
N  __IO uint32_t HcFmInterval;
X  volatile uint32_t HcFmInterval;
N  __I  uint32_t HcFmRemaining;
X  volatile const  uint32_t HcFmRemaining;
N  __I  uint32_t HcFmNumber;
X  volatile const  uint32_t HcFmNumber;
N  __IO uint32_t HcPeriodicStart;
X  volatile uint32_t HcPeriodicStart;
N  __IO uint32_t HcLSTreshold;
X  volatile uint32_t HcLSTreshold;
N  __IO uint32_t HcRhDescriptorA;
X  volatile uint32_t HcRhDescriptorA;
N  __IO uint32_t HcRhDescriptorB;
X  volatile uint32_t HcRhDescriptorB;
N  __IO uint32_t HcRhStatus;
X  volatile uint32_t HcRhStatus;
N  __IO uint32_t HcRhPortStatus1;
X  volatile uint32_t HcRhPortStatus1;
N  __IO uint32_t HcRhPortStatus2;
X  volatile uint32_t HcRhPortStatus2;
N       uint32_t RESERVED0[40];
N  __I  uint32_t Module_ID;
X  volatile const  uint32_t Module_ID;
N
N  __I  uint32_t OTGIntSt;               /* USB On-The-Go Registers            */
X  volatile const  uint32_t OTGIntSt;                
N  __IO uint32_t OTGIntEn;
X  volatile uint32_t OTGIntEn;
N  __O  uint32_t OTGIntSet;
X  volatile  uint32_t OTGIntSet;
N  __O  uint32_t OTGIntClr;
X  volatile  uint32_t OTGIntClr;
N  __IO uint32_t OTGStCtrl;
X  volatile uint32_t OTGStCtrl;
N  __IO uint32_t OTGTmr;
X  volatile uint32_t OTGTmr;
N       uint32_t RESERVED1[58];
N
N  __I  uint32_t USBDevIntSt;            /* USB Device Interrupt Registers     */
X  volatile const  uint32_t USBDevIntSt;             
N  __IO uint32_t USBDevIntEn;
X  volatile uint32_t USBDevIntEn;
N  __O  uint32_t USBDevIntClr;
X  volatile  uint32_t USBDevIntClr;
N  __O  uint32_t USBDevIntSet;
X  volatile  uint32_t USBDevIntSet;
N
N  __O  uint32_t USBCmdCode;             /* USB Device SIE Command Registers   */
X  volatile  uint32_t USBCmdCode;              
N  __I  uint32_t USBCmdData;
X  volatile const  uint32_t USBCmdData;
N
N  __I  uint32_t USBRxData;              /* USB Device Transfer Registers      */
X  volatile const  uint32_t USBRxData;               
N  __O  uint32_t USBTxData;
X  volatile  uint32_t USBTxData;
N  __I  uint32_t USBRxPLen;
X  volatile const  uint32_t USBRxPLen;
N  __O  uint32_t USBTxPLen;
X  volatile  uint32_t USBTxPLen;
N  __IO uint32_t USBCtrl;
X  volatile uint32_t USBCtrl;
N  __O  uint32_t USBDevIntPri;
X  volatile  uint32_t USBDevIntPri;
N
N  __I  uint32_t USBEpIntSt;             /* USB Device Endpoint Interrupt Regs */
X  volatile const  uint32_t USBEpIntSt;              
N  __IO uint32_t USBEpIntEn;
X  volatile uint32_t USBEpIntEn;
N  __O  uint32_t USBEpIntClr;
X  volatile  uint32_t USBEpIntClr;
N  __O  uint32_t USBEpIntSet;
X  volatile  uint32_t USBEpIntSet;
N  __O  uint32_t USBEpIntPri;
X  volatile  uint32_t USBEpIntPri;
N
N  __IO uint32_t USBReEp;                /* USB Device Endpoint Realization Reg*/
X  volatile uint32_t USBReEp;                 
N  __O  uint32_t USBEpInd;
X  volatile  uint32_t USBEpInd;
N  __IO uint32_t USBMaxPSize;
X  volatile uint32_t USBMaxPSize;
N
N  __I  uint32_t USBDMARSt;              /* USB Device DMA Registers           */
X  volatile const  uint32_t USBDMARSt;               
N  __O  uint32_t USBDMARClr;
X  volatile  uint32_t USBDMARClr;
N  __O  uint32_t USBDMARSet;
X  volatile  uint32_t USBDMARSet;
N       uint32_t RESERVED2[9];
N  __IO uint32_t USBUDCAH;
X  volatile uint32_t USBUDCAH;
N  __I  uint32_t USBEpDMASt;
X  volatile const  uint32_t USBEpDMASt;
N  __O  uint32_t USBEpDMAEn;
X  volatile  uint32_t USBEpDMAEn;
N  __O  uint32_t USBEpDMADis;
X  volatile  uint32_t USBEpDMADis;
N  __I  uint32_t USBDMAIntSt;
X  volatile const  uint32_t USBDMAIntSt;
N  __IO uint32_t USBDMAIntEn;
X  volatile uint32_t USBDMAIntEn;
N       uint32_t RESERVED3[2];
N  __I  uint32_t USBEoTIntSt;
X  volatile const  uint32_t USBEoTIntSt;
N  __O  uint32_t USBEoTIntClr;
X  volatile  uint32_t USBEoTIntClr;
N  __O  uint32_t USBEoTIntSet;
X  volatile  uint32_t USBEoTIntSet;
N  __I  uint32_t USBNDDRIntSt;
X  volatile const  uint32_t USBNDDRIntSt;
N  __O  uint32_t USBNDDRIntClr;
X  volatile  uint32_t USBNDDRIntClr;
N  __O  uint32_t USBNDDRIntSet;
X  volatile  uint32_t USBNDDRIntSet;
N  __I  uint32_t USBSysErrIntSt;
X  volatile const  uint32_t USBSysErrIntSt;
N  __O  uint32_t USBSysErrIntClr;
X  volatile  uint32_t USBSysErrIntClr;
N  __O  uint32_t USBSysErrIntSet;
X  volatile  uint32_t USBSysErrIntSet;
N       uint32_t RESERVED4[15];
N
N  union {
N  __I  uint32_t I2C_RX;                 /* USB OTG I2C Registers              */
X  volatile const  uint32_t I2C_RX;                  
N  __O  uint32_t I2C_TX;
X  volatile  uint32_t I2C_TX;
N  };
N  __I  uint32_t I2C_STS;
X  volatile const  uint32_t I2C_STS;
N  __IO uint32_t I2C_CTL;
X  volatile uint32_t I2C_CTL;
N  __IO uint32_t I2C_CLKHI;
X  volatile uint32_t I2C_CLKHI;
N  __O  uint32_t I2C_CLKLO;
X  volatile  uint32_t I2C_CLKLO;
N       uint32_t RESERVED5[824];
N
N  union {
N  __IO uint32_t USBClkCtrl;             /* USB Clock Control Registers        */
X  volatile uint32_t USBClkCtrl;              
N  __IO uint32_t OTGClkCtrl;
X  volatile uint32_t OTGClkCtrl;
N  };
N  union {
N  __I  uint32_t USBClkSt;
X  volatile const  uint32_t USBClkSt;
N  __I  uint32_t OTGClkSt;
X  volatile const  uint32_t OTGClkSt;
N  };
N} LPC_USB_TypeDef;
N
N/*------------- Ethernet Media Access Controller (EMAC) ----------------------*/
Ntypedef struct
N{
N  __IO uint32_t MAC1;                   /* MAC Registers                      */
X  volatile uint32_t MAC1;                    
N  __IO uint32_t MAC2;
X  volatile uint32_t MAC2;
N  __IO uint32_t IPGT;
X  volatile uint32_t IPGT;
N  __IO uint32_t IPGR;
X  volatile uint32_t IPGR;
N  __IO uint32_t CLRT;
X  volatile uint32_t CLRT;
N  __IO uint32_t MAXF;
X  volatile uint32_t MAXF;
N  __IO uint32_t SUPP;
X  volatile uint32_t SUPP;
N  __IO uint32_t TEST;
X  volatile uint32_t TEST;
N  __IO uint32_t MCFG;
X  volatile uint32_t MCFG;
N  __IO uint32_t MCMD;
X  volatile uint32_t MCMD;
N  __IO uint32_t MADR;
X  volatile uint32_t MADR;
N  __O  uint32_t MWTD;
X  volatile  uint32_t MWTD;
N  __I  uint32_t MRDD;
X  volatile const  uint32_t MRDD;
N  __I  uint32_t MIND;
X  volatile const  uint32_t MIND;
N       uint32_t RESERVED0[2];
N  __IO uint32_t SA0;
X  volatile uint32_t SA0;
N  __IO uint32_t SA1;
X  volatile uint32_t SA1;
N  __IO uint32_t SA2;
X  volatile uint32_t SA2;
N       uint32_t RESERVED1[45];
N  __IO uint32_t Command;                /* Control Registers                  */
X  volatile uint32_t Command;                 
N  __I  uint32_t Status;
X  volatile const  uint32_t Status;
N  __IO uint32_t RxDescriptor;
X  volatile uint32_t RxDescriptor;
N  __IO uint32_t RxStatus;
X  volatile uint32_t RxStatus;
N  __IO uint32_t RxDescriptorNumber;
X  volatile uint32_t RxDescriptorNumber;
N  __I  uint32_t RxProduceIndex;
X  volatile const  uint32_t RxProduceIndex;
N  __IO uint32_t RxConsumeIndex;
X  volatile uint32_t RxConsumeIndex;
N  __IO uint32_t TxDescriptor;
X  volatile uint32_t TxDescriptor;
N  __IO uint32_t TxStatus;
X  volatile uint32_t TxStatus;
N  __IO uint32_t TxDescriptorNumber;
X  volatile uint32_t TxDescriptorNumber;
N  __IO uint32_t TxProduceIndex;
X  volatile uint32_t TxProduceIndex;
N  __I  uint32_t TxConsumeIndex;
X  volatile const  uint32_t TxConsumeIndex;
N       uint32_t RESERVED2[10];
N  __I  uint32_t TSV0;
X  volatile const  uint32_t TSV0;
N  __I  uint32_t TSV1;
X  volatile const  uint32_t TSV1;
N  __I  uint32_t RSV;
X  volatile const  uint32_t RSV;
N       uint32_t RESERVED3[3];
N  __IO uint32_t FlowControlCounter;
X  volatile uint32_t FlowControlCounter;
N  __I  uint32_t FlowControlStatus;
X  volatile const  uint32_t FlowControlStatus;
N       uint32_t RESERVED4[34];
N  __IO uint32_t RxFilterCtrl;           /* Rx Filter Registers                */
X  volatile uint32_t RxFilterCtrl;            
N  __IO uint32_t RxFilterWoLStatus;
X  volatile uint32_t RxFilterWoLStatus;
N  __IO uint32_t RxFilterWoLClear;
X  volatile uint32_t RxFilterWoLClear;
N       uint32_t RESERVED5;
N  __IO uint32_t HashFilterL;
X  volatile uint32_t HashFilterL;
N  __IO uint32_t HashFilterH;
X  volatile uint32_t HashFilterH;
N       uint32_t RESERVED6[882];
N  __I  uint32_t IntStatus;              /* Module Control Registers           */
X  volatile const  uint32_t IntStatus;               
N  __IO uint32_t IntEnable;
X  volatile uint32_t IntEnable;
N  __O  uint32_t IntClear;
X  volatile  uint32_t IntClear;
N  __O  uint32_t IntSet;
X  volatile  uint32_t IntSet;
N       uint32_t RESERVED7;
N  __IO uint32_t PowerDown;
X  volatile uint32_t PowerDown;
N       uint32_t RESERVED8;
N  __IO uint32_t Module_ID;
X  volatile uint32_t Module_ID;
N} LPC_EMAC_TypeDef;
N
N#if defined ( __CC_ARM   )
X#if 1L
N#pragma no_anon_unions
N#endif
N
N
N/******************************************************************************/
N/*                         Peripheral memory map                              */
N/******************************************************************************/
N/* Base addresses                                                             */
N#define LPC_FLASH_BASE        (0x00000000UL)
N#define LPC_RAM_BASE          (0x10000000UL)
N#define LPC_GPIO_BASE         (0x2009C000UL)
N#define LPC_APB0_BASE         (0x40000000UL)
N#define LPC_APB1_BASE         (0x40080000UL)
N#define LPC_AHB_BASE          (0x50000000UL)
N#define LPC_CM3_BASE          (0xE0000000UL)
N
N/* APB0 peripherals                                                           */
N#define LPC_WDT_BASE          (LPC_APB0_BASE + 0x00000)
N#define LPC_TIM0_BASE         (LPC_APB0_BASE + 0x04000)
N#define LPC_TIM1_BASE         (LPC_APB0_BASE + 0x08000)
N#define LPC_UART0_BASE        (LPC_APB0_BASE + 0x0C000)
N#define LPC_UART1_BASE        (LPC_APB0_BASE + 0x10000)
N#define LPC_PWM1_BASE         (LPC_APB0_BASE + 0x18000)
N#define LPC_I2C0_BASE         (LPC_APB0_BASE + 0x1C000)
N#define LPC_SPI_BASE          (LPC_APB0_BASE + 0x20000)
N#define LPC_RTC_BASE          (LPC_APB0_BASE + 0x24000)
N#define LPC_GPIOINT_BASE      (LPC_APB0_BASE + 0x28080)
N#define LPC_PINCON_BASE       (LPC_APB0_BASE + 0x2C000)
N#define LPC_SSP1_BASE         (LPC_APB0_BASE + 0x30000)
N#define LPC_ADC_BASE          (LPC_APB0_BASE + 0x34000)
N#define LPC_CANAF_RAM_BASE    (LPC_APB0_BASE + 0x38000)
N#define LPC_CANAF_BASE        (LPC_APB0_BASE + 0x3C000)
N#define LPC_CANCR_BASE        (LPC_APB0_BASE + 0x40000)
N#define LPC_CAN1_BASE         (LPC_APB0_BASE + 0x44000)
N#define LPC_CAN2_BASE         (LPC_APB0_BASE + 0x48000)
N#define LPC_I2C1_BASE         (LPC_APB0_BASE + 0x5C000)
N
N/* APB1 peripherals                                                           */
N#define LPC_SSP0_BASE         (LPC_APB1_BASE + 0x08000)
N#define LPC_DAC_BASE          (LPC_APB1_BASE + 0x0C000)
N#define LPC_TIM2_BASE         (LPC_APB1_BASE + 0x10000)
N#define LPC_TIM3_BASE         (LPC_APB1_BASE + 0x14000)
N#define LPC_UART2_BASE        (LPC_APB1_BASE + 0x18000)
N#define LPC_UART3_BASE        (LPC_APB1_BASE + 0x1C000)
N#define LPC_I2C2_BASE         (LPC_APB1_BASE + 0x20000)
N#define LPC_I2S_BASE          (LPC_APB1_BASE + 0x28000)
N#define LPC_RIT_BASE          (LPC_APB1_BASE + 0x30000)
N#define LPC_MCPWM_BASE        (LPC_APB1_BASE + 0x38000)
N#define LPC_QEI_BASE          (LPC_APB1_BASE + 0x3C000)
N#define LPC_SC_BASE           (LPC_APB1_BASE + 0x7C000)
N
N/* AHB peripherals                                                            */
N#define LPC_EMAC_BASE         (LPC_AHB_BASE  + 0x00000)
N#define LPC_GPDMA_BASE        (LPC_AHB_BASE  + 0x04000)
N#define LPC_GPDMACH0_BASE     (LPC_AHB_BASE  + 0x04100)
N#define LPC_GPDMACH1_BASE     (LPC_AHB_BASE  + 0x04120)
N#define LPC_GPDMACH2_BASE     (LPC_AHB_BASE  + 0x04140)
N#define LPC_GPDMACH3_BASE     (LPC_AHB_BASE  + 0x04160)
N#define LPC_GPDMACH4_BASE     (LPC_AHB_BASE  + 0x04180)
N#define LPC_GPDMACH5_BASE     (LPC_AHB_BASE  + 0x041A0)
N#define LPC_GPDMACH6_BASE     (LPC_AHB_BASE  + 0x041C0)
N#define LPC_GPDMACH7_BASE     (LPC_AHB_BASE  + 0x041E0)
N#define LPC_USB_BASE          (LPC_AHB_BASE  + 0x0C000)
N
N/* GPIOs                                                                      */
N#define LPC_GPIO0_BASE        (LPC_GPIO_BASE + 0x00000)
N#define LPC_GPIO1_BASE        (LPC_GPIO_BASE + 0x00020)
N#define LPC_GPIO2_BASE        (LPC_GPIO_BASE + 0x00040)
N#define LPC_GPIO3_BASE        (LPC_GPIO_BASE + 0x00060)
N#define LPC_GPIO4_BASE        (LPC_GPIO_BASE + 0x00080)
N
N
N/******************************************************************************/
N/*                         Peripheral declaration                             */
N/******************************************************************************/
N#define LPC_SC                ((LPC_SC_TypeDef        *) LPC_SC_BASE       )
N#define LPC_GPIO0             ((LPC_GPIO_TypeDef      *) LPC_GPIO0_BASE    )
N#define LPC_GPIO1             ((LPC_GPIO_TypeDef      *) LPC_GPIO1_BASE    )
N#define LPC_GPIO2             ((LPC_GPIO_TypeDef      *) LPC_GPIO2_BASE    )
N#define LPC_GPIO3             ((LPC_GPIO_TypeDef      *) LPC_GPIO3_BASE    )
N#define LPC_GPIO4             ((LPC_GPIO_TypeDef      *) LPC_GPIO4_BASE    )
N#define LPC_WDT               ((LPC_WDT_TypeDef       *) LPC_WDT_BASE      )
N#define LPC_TIM0              ((LPC_TIM_TypeDef       *) LPC_TIM0_BASE     )
N#define LPC_TIM1              ((LPC_TIM_TypeDef       *) LPC_TIM1_BASE     )
N#define LPC_TIM2              ((LPC_TIM_TypeDef       *) LPC_TIM2_BASE     )
N#define LPC_TIM3              ((LPC_TIM_TypeDef       *) LPC_TIM3_BASE     )
N#define LPC_RIT               ((LPC_RIT_TypeDef       *) LPC_RIT_BASE      )
N#define LPC_UART0             ((LPC_UART0_TypeDef     *) LPC_UART0_BASE    )
N#define LPC_UART1             ((LPC_UART1_TypeDef     *) LPC_UART1_BASE    )
N#define LPC_UART2             ((LPC_UART_TypeDef      *) LPC_UART2_BASE    )
N#define LPC_UART3             ((LPC_UART_TypeDef      *) LPC_UART3_BASE    )
N#define LPC_PWM1              ((LPC_PWM_TypeDef       *) LPC_PWM1_BASE     )
N#define LPC_I2C0              ((LPC_I2C_TypeDef       *) LPC_I2C0_BASE     )
N#define LPC_I2C1              ((LPC_I2C_TypeDef       *) LPC_I2C1_BASE     )
N#define LPC_I2C2              ((LPC_I2C_TypeDef       *) LPC_I2C2_BASE     )
N#define LPC_I2S               ((LPC_I2S_TypeDef       *) LPC_I2S_BASE      )
N#define LPC_SPI               ((LPC_SPI_TypeDef       *) LPC_SPI_BASE      )
N#define LPC_RTC               ((LPC_RTC_TypeDef       *) LPC_RTC_BASE      )
N#define LPC_GPIOINT           ((LPC_GPIOINT_TypeDef   *) LPC_GPIOINT_BASE  )
N#define LPC_PINCON            ((LPC_PINCON_TypeDef    *) LPC_PINCON_BASE   )
N#define LPC_SSP0              ((LPC_SSP_TypeDef       *) LPC_SSP0_BASE     )
N#define LPC_SSP1              ((LPC_SSP_TypeDef       *) LPC_SSP1_BASE     )
N#define LPC_ADC               ((LPC_ADC_TypeDef       *) LPC_ADC_BASE      )
N#define LPC_DAC               ((LPC_DAC_TypeDef       *) LPC_DAC_BASE      )
N#define LPC_CANAF_RAM         ((LPC_CANAF_RAM_TypeDef *) LPC_CANAF_RAM_BASE)
N#define LPC_CANAF             ((LPC_CANAF_TypeDef     *) LPC_CANAF_BASE    )
N#define LPC_CANCR             ((LPC_CANCR_TypeDef     *) LPC_CANCR_BASE    )
N#define LPC_CAN1              ((LPC_CAN_TypeDef       *) LPC_CAN1_BASE     )
N#define LPC_CAN2              ((LPC_CAN_TypeDef       *) LPC_CAN2_BASE     )
N#define LPC_MCPWM             ((LPC_MCPWM_TypeDef     *) LPC_MCPWM_BASE    )
N#define LPC_QEI               ((LPC_QEI_TypeDef       *) LPC_QEI_BASE      )
N#define LPC_EMAC              ((LPC_EMAC_TypeDef      *) LPC_EMAC_BASE     )
N#define LPC_GPDMA             ((LPC_GPDMA_TypeDef     *) LPC_GPDMA_BASE    )
N#define LPC_GPDMACH0          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH0_BASE )
N#define LPC_GPDMACH1          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH1_BASE )
N#define LPC_GPDMACH2          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH2_BASE )
N#define LPC_GPDMACH3          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH3_BASE )
N#define LPC_GPDMACH4          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH4_BASE )
N#define LPC_GPDMACH5          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH5_BASE )
N#define LPC_GPDMACH6          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH6_BASE )
N#define LPC_GPDMACH7          ((LPC_GPDMACH_TypeDef   *) LPC_GPDMACH7_BASE )
N#define LPC_USB               ((LPC_USB_TypeDef       *) LPC_USB_BASE      )
N
N#endif  // __LPC17xx_H__
L 4 "sc16is7xx.c" 2
N#include "main.h"
L 1 "main.h" 1
N#include <rtl.h>
L 1 "C:\Keil\ARM\RV31\INC\rtl.h" 1
N/*----------------------------------------------------------------------------
N *      RL-ARM - A P I 
N *----------------------------------------------------------------------------
N *      Name:    RTL.H 
N *      Purpose: Application Programming Interface. 
N *      Rev.:    V4.13
N *----------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2010 KEIL - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#ifndef __RTL_H__
N#define __RTL_H__
N
N/* RL-ARM version number. */
N#define __RL_ARM_VER    413
N 
N#define __task          __declspec(noreturn)
N
N#ifndef NULL
N #ifdef __cplusplus              // EC++
S  #define NULL          0
N #else
N  #define NULL          ((void *) 0)
N #endif
N#endif
N
N#ifndef EOF
N #define EOF            -1
N#endif
N
N#ifndef __size_t
N #define __size_t       1
N typedef unsigned int   size_t;
N#endif
N
Ntypedef signed char     S8;
Ntypedef unsigned char   U8;
Ntypedef short           S16;
Ntypedef unsigned short  U16;
Ntypedef int             S32;
Ntypedef unsigned int    U32;
Ntypedef long long       S64;
Ntypedef unsigned long long U64;
Ntypedef unsigned char   BIT;
Ntypedef unsigned int    BOOL;
N
N#ifndef __TRUE
N #define __TRUE         1
N#endif
N#ifndef __FALSE
N #define __FALSE        0
N#endif
N
N#ifdef __BIG_ENDIAN
S #define U32_LE(v) (__rev(v))
S #define U16_LE(v) (__rev(v) >> 16) 
S #define U32_BE(v)       (v)
S #define U16_BE(v)       (v)
N#else
N #define U32_BE(v) (__rev(v))
N #define U16_BE(v) (__rev(v) >> 16) 
N #define U32_LE(v)       (v)
N #define U16_LE(v)       (v)
N#endif
N
N/*----------------------------------------------------------------------------
N *                             RTX Kernel API
N *---------------------------------------------------------------------------*/
N
N#ifdef __cplusplus               // EC++
Sextern "C"  {
N#endif
N
N/* Definition of Semaphore type */
Ntypedef U32 OS_SEM[2];
N
N/* Definition of Mailbox type */
N#define os_mbx_declare(name,cnt)    U32 name [4 + cnt]
Ntypedef U32 OS_MBX[];
N
N/* Definition of Mutex type */
Ntypedef U32 OS_MUT[3];
N
N/* Task Identification number. */
Ntypedef U32 OS_TID;
N
N/* Function return of system calls returning an object identification */
Ntypedef void *OS_ID;
N
N/* Function return of system calls indicating an event or completion state */
Ntypedef U32 OS_RESULT;
N
N/* Return codes */
N#define OS_R_TMO        0x01
N#define OS_R_EVT        0x02
N#define OS_R_SEM        0x03
N#define OS_R_MBX        0x04
N#define OS_R_MUT        0x05
N
N#define OS_R_OK         0x00
N#define OS_R_NOK        0xff
N
N#define OS_TCB_SIZE     48
N#define OS_TMR_SIZE     8
N
N/* Error Codes */
N#define OS_ERR_STK_OVF  1
N#define OS_ERR_FIFO_OVF 2
N#define OS_ERR_MBX_OVF  3
N
N#if !(defined(__TARGET_ARCH_6S_M) || defined(__TARGET_ARCH_7_M) || defined(__TARGET_ARCH_7E_M))
X#if !(0L || 1L || 0L)
S
S/*----------------------------------------------------------------------------
S *      Functions ARM
S *---------------------------------------------------------------------------*/
S
S/* Task Management */
S#define os_sys_init(tsk)              os_sys_init0(tsk,0,NULL)
S#define os_sys_init_prio(tsk,prio)    os_sys_init0(tsk,prio,NULL)
S#define os_sys_init_user(tsk,prio,stk,size)                                   \
S                                      os_sys_init0(tsk,prio|(size<<8),stk)
X#define os_sys_init_user(tsk,prio,stk,size)                                                                         os_sys_init0(tsk,prio|(size<<8),stk)
S#define os_tsk_create(tsk,prio)       os_tsk_create0(tsk,prio,NULL,NULL)
S#define os_tsk_create_user(tsk,prio,stk,size)                                 \
S                                      os_tsk_create0(tsk,prio|(size<<8),stk,NULL)
X#define os_tsk_create_user(tsk,prio,stk,size)                                                                       os_tsk_create0(tsk,prio|(size<<8),stk,NULL)
S#define os_tsk_create_ex(tsk,prio,argv) os_tsk_create_ex0(tsk,prio,NULL,argv)
S#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                         \
S                                      os_tsk_create_ex0(tsk,prio|(size<<8),stk,argv)
X#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                                                               os_tsk_create_ex0(tsk,prio|(size<<8),stk,argv)
S#define os_tsk_delete_self()          os_tsk_delete(0)
S#define os_tsk_prio_self(prio)        os_tsk_prio(0,prio)
S#define isr_tsk_get()                 os_tsk_self()
S
Sextern void      os_sys_init0 (void (*task)(void), U32 prio_stksz, void *stk);
Sextern OS_TID    os_tsk_create0 (void (*task)(void), U32 prio_stksz, 
S                                 void *stk, void *argv);
Sextern OS_TID    os_tsk_create_ex0 (void (*task)(void *), U32 prio_stksz, 
S                                    void *stk, void *argv);
Sextern OS_TID    os_tsk_self (void);
Sextern void      os_tsk_pass (void);
Sextern OS_RESULT os_tsk_prio (OS_TID task_id, U8 new_prio);
Sextern OS_RESULT os_tsk_delete (OS_TID task_id);
S
S/* Event flag Management */
S#define os_evt_wait_or(wflags,tmo)      os_evt_wait(wflags,tmo,__FALSE)
S#define os_evt_wait_and(wflags,tmo)     os_evt_wait(wflags,tmo,__TRUE)
S
Sextern OS_RESULT os_evt_wait (U16 wait_flags, U16 timeout, BOOL and_wait);
Sextern void      os_evt_set (U16 event_flags, OS_TID task_id);
Sextern void      os_evt_clr (U16 clear_flags, OS_TID task_id);
Sextern void      isr_evt_set (U16 event_flags, OS_TID task_id);
Sextern U16       os_evt_get (void);
S
S/* Semaphore Management */
Sextern void      os_sem_init (OS_ID semaphore, U16 token_count);
Sextern OS_RESULT os_sem_send (OS_ID semaphore);
Sextern OS_RESULT os_sem_wait (OS_ID semaphore, U16 timeout);
Sextern void      isr_sem_send (OS_ID semaphore);
S
S/* Mailbox Management */
S#define isr_mbx_check(mbx)              os_mbx_check(mbx)
S
Sextern void      os_mbx_init (OS_ID mailbox, U16 mbx_size);
Sextern OS_RESULT os_mbx_send (OS_ID mailbox, void *message_ptr, U16 timeout);
Sextern OS_RESULT os_mbx_wait (OS_ID mailbox, void  **message, U16 timeout);
Sextern OS_RESULT os_mbx_check (OS_ID mailbox);
Sextern void      isr_mbx_send (OS_ID mailbox, void *message_ptr);
Sextern OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message);
S
S/* Mutex Management */
Sextern void      os_mut_init (OS_ID mutex);
Sextern OS_RESULT os_mut_release (OS_ID mutex);
Sextern OS_RESULT os_mut_wait (OS_ID mutex, U16 timeout);
S
S/* Time Management */
Sextern void      os_dly_wait (U16 delay_time);
Sextern void      os_itv_set (U16 interval_time);
Sextern void      os_itv_wait (void);
S
S/* User Timer Management */
Sextern OS_ID     os_tmr_create (U16 tcnt, U16 info);
Sextern OS_ID     os_tmr_kill (OS_ID timer);
S
S/* System Functions */
Sextern void      tsk_lock (void) __swi (5);
Sextern void      tsk_unlock (void);
S
S/* Fixed Memory Block Management Functions */
Sextern int       _init_box (void *box_mem, U32 box_size, U32 blk_size);
Sextern void     *_alloc_box (void *box_mem) __swi (1);
Sextern void     *_calloc_box (void *box_mem);
Sextern int       _free_box (void *box_mem, void *box) __swi (2);
S
N#else
N
N/*----------------------------------------------------------------------------
N *      Functions Cortex-M
N *---------------------------------------------------------------------------*/
N
N#define __SVC_0         __svc_indirect(0)
N
N/* Task Management */
Nextern void      os_set_env    (void);
Nextern void      rt_sys_init   (void (*task)(void), U8 priority, void *stk);
Nextern void      rt_tsk_pass   (void);
Nextern OS_TID    rt_tsk_self   (void);
Nextern OS_RESULT rt_tsk_prio   (OS_TID task_id, U8 new_prio);
Nextern OS_TID    rt_tsk_create (void (*task)(void), U8 priority, void *stk, void *argv);
Nextern OS_RESULT rt_tsk_delete (OS_TID task_id);
N
N#define os_sys_init(tsk)              os_set_env();                           \
N                                      _os_sys_init((U32)rt_sys_init,tsk,0,NULL)
X#define os_sys_init(tsk)              os_set_env();                                                                 _os_sys_init((U32)rt_sys_init,tsk,0,NULL)
N#define os_sys_init_user(tsk,prio,stk,size)                                   \
N                                      os_set_env();                           \
N                                      _os_sys_init((U32)rt_sys_init,tsk,prio|(size<<8),stk)
X#define os_sys_init_user(tsk,prio,stk,size)                                                                         os_set_env();                                                                 _os_sys_init((U32)rt_sys_init,tsk,prio|(size<<8),stk)
N#define os_sys_init_prio(tsk,prio)    os_set_env();                           \
N                                      _os_sys_init((U32)rt_sys_init,tsk,prio,NULL)
X#define os_sys_init_prio(tsk,prio)    os_set_env();                                                                 _os_sys_init((U32)rt_sys_init,tsk,prio,NULL)
N#define os_tsk_create(tsk,prio)       _os_tsk_create((U32)rt_tsk_create,tsk,prio,NULL,NULL)
N#define os_tsk_create_user(tsk,prio,stk,size)                                 \
N                                      _os_tsk_create((U32)rt_tsk_create,tsk,prio|(size<<8),stk,NULL)
X#define os_tsk_create_user(tsk,prio,stk,size)                                                                       _os_tsk_create((U32)rt_tsk_create,tsk,prio|(size<<8),stk,NULL)
N#define os_tsk_create_ex(tsk,prio,argv) _os_tsk_create_ex((U32)rt_tsk_create,tsk,prio,NULL,argv)
N#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                         \
N                                      _os_tsk_create_ex((U32)rt_tsk_create,tsk,prio|(size<<8),stk,argv)
X#define os_tsk_create_user_ex(tsk,prio,stk,size,argv)                                                               _os_tsk_create_ex((U32)rt_tsk_create,tsk,prio|(size<<8),stk,argv)
N#define os_tsk_self()                 _os_tsk_self((U32)rt_tsk_self)
N#define os_tsk_pass()                 _os_tsk_pass((U32)rt_tsk_pass)
N#define os_tsk_prio(task_id,new_prio) _os_tsk_prio((U32)rt_tsk_prio,task_id,new_prio)
N#define os_tsk_prio_self(prio)        _os_tsk_prio((U32)rt_tsk_prio,0,prio)
N#define os_tsk_delete(task_id)        _os_tsk_delete((U32)rt_tsk_delete,task_id)
N#define os_tsk_delete_self()          _os_tsk_delete((U32)rt_tsk_delete, 0)
N#define isr_tsk_get()                 rt_tsk_self()
N
Nextern void      _os_sys_init(U32 p, void (*task)(void), U32 prio_stksz,
N                                     void *stk)                        __SVC_0;
X                                     void *stk)                        __svc_indirect(0);
Nextern OS_TID    _os_tsk_create (U32 p, void (*task)(void), U32 prio_stksz,
N                                        void *stk, void *argv)         __SVC_0;
X                                        void *stk, void *argv)         __svc_indirect(0);
Nextern OS_TID    _os_tsk_create_ex (U32 p, void (*task)(void *), U32 prio_stksz,
N                                           void *stk, void *argv)      __SVC_0;
X                                           void *stk, void *argv)      __svc_indirect(0);
Nextern OS_TID    _os_tsk_self (U32 p)                                  __SVC_0;
Xextern OS_TID    _os_tsk_self (U32 p)                                  __svc_indirect(0);
Nextern void      _os_tsk_pass (U32 p)                                  __SVC_0;
Xextern void      _os_tsk_pass (U32 p)                                  __svc_indirect(0);
Nextern OS_RESULT _os_tsk_prio (U32 p, OS_TID task_id, U8 new_prio)     __SVC_0;
Xextern OS_RESULT _os_tsk_prio (U32 p, OS_TID task_id, U8 new_prio)     __svc_indirect(0);
Nextern OS_RESULT _os_tsk_delete (U32 p, OS_TID task_id)                __SVC_0;
Xextern OS_RESULT _os_tsk_delete (U32 p, OS_TID task_id)                __svc_indirect(0);
N
N/* Event flag Management */
Nextern OS_RESULT rt_evt_wait (U16 wait_flags,  U16 timeout, BOOL and_wait);
Nextern void      rt_evt_set  (U16 event_flags, OS_TID task_id);
Nextern void      rt_evt_clr  (U16 clear_flags, OS_TID task_id);
Nextern U16       rt_evt_get  (void);
N
N#define os_evt_wait_or(wflags,tmo)    _os_evt_wait((U32)rt_evt_wait,wflags,tmo,__FALSE)
N#define os_evt_wait_and(wflags,tmo)   _os_evt_wait((U32)rt_evt_wait,wflags,tmo,__TRUE)
N#define os_evt_set(evt_flags,task_id) _os_evt_set((U32)rt_evt_set,evt_flags,task_id)
N#define os_evt_clr(clr_flags,task_id) _os_evt_clr((U32)rt_evt_clr,clr_flags,task_id)
N#define os_evt_get()                  _os_evt_get((U32)rt_evt_get)
N
Nextern OS_RESULT _os_evt_wait(U32 p, U16 wait_flags, U16 timeout,
N                                     BOOL and_wait)                    __SVC_0;
X                                     BOOL and_wait)                    __svc_indirect(0);
Nextern void      _os_evt_set (U32 p, U16 event_flags, OS_TID task_id)  __SVC_0;
Xextern void      _os_evt_set (U32 p, U16 event_flags, OS_TID task_id)  __svc_indirect(0);
Nextern void      _os_evt_clr (U32 p, U16 clear_flags, OS_TID task_id)  __SVC_0;
Xextern void      _os_evt_clr (U32 p, U16 clear_flags, OS_TID task_id)  __svc_indirect(0);
Nextern U16       _os_evt_get (U32 p)                                   __SVC_0;
Xextern U16       _os_evt_get (U32 p)                                   __svc_indirect(0);
Nextern void      isr_evt_set (U16 event_flags, OS_TID task_id);
N
N/* Semaphore Management */
Nextern void      rt_sem_init (OS_ID semaphore, U16 token_count);
Nextern OS_RESULT rt_sem_send (OS_ID semaphore);
Nextern OS_RESULT rt_sem_wait (OS_ID semaphore, U16 timeout);
N
N#define os_sem_init(sem,t_count)     _os_sem_init((U32)rt_sem_init,sem,t_count)
N#define os_sem_send(sem)             _os_sem_send((U32)rt_sem_send,sem)
N#define os_sem_wait(sem,tmo)         _os_sem_wait((U32)rt_sem_wait,sem,tmo)
N
Nextern void      _os_sem_init (U32 p, OS_ID semaphore, 
N                                      U16 token_count)                 __SVC_0;
X                                      U16 token_count)                 __svc_indirect(0);
Nextern OS_RESULT _os_sem_send (U32 p, OS_ID semaphore)                 __SVC_0;
Xextern OS_RESULT _os_sem_send (U32 p, OS_ID semaphore)                 __svc_indirect(0);
Nextern OS_RESULT _os_sem_wait (U32 p, OS_ID semaphore, U16 timeout)    __SVC_0;
Xextern OS_RESULT _os_sem_wait (U32 p, OS_ID semaphore, U16 timeout)    __svc_indirect(0);
Nextern void      isr_sem_send (OS_ID semaphore);
N
N/* Mailbox Management */
Nextern void      rt_mbx_init  (OS_ID mailbox, U16 mbx_size);
Nextern OS_RESULT rt_mbx_send  (OS_ID mailbox, void *p_msg,    U16 timeout);
Nextern OS_RESULT rt_mbx_wait  (OS_ID mailbox, void **message, U16 timeout);
Nextern OS_RESULT rt_mbx_check (OS_ID mailbox);
N
N#define os_mbx_init(mbx,mbx_size)     _os_mbx_init((U32)rt_mbx_init,mbx,mbx_size)
N#define os_mbx_send(mbx,p_msg,tmo)    _os_mbx_send((U32)rt_mbx_send,mbx,p_msg,tmo)
N#define os_mbx_wait(mbx,message,tmo)  _os_mbx_wait((U32)rt_mbx_wait,mbx,message,tmo)
N#define os_mbx_check(mbx)             _os_mbx_check((U32)rt_mbx_check,mbx)
N#define isr_mbx_check(mbx)            rt_mbx_check(mbx)
N
Nextern void      _os_mbx_init (U32 p, OS_ID mailbox, U16 mbx_size)     __SVC_0;
Xextern void      _os_mbx_init (U32 p, OS_ID mailbox, U16 mbx_size)     __svc_indirect(0);
Nextern OS_RESULT _os_mbx_send (U32 p, OS_ID mailbox, void *message_ptr,
N                                      U16 timeout)                     __SVC_0;
X                                      U16 timeout)                     __svc_indirect(0);
Nextern OS_RESULT _os_mbx_wait (U32 p, OS_ID mailbox, void  **message,
N                                      U16 timeout)                     __SVC_0;
X                                      U16 timeout)                     __svc_indirect(0);
Nextern OS_RESULT _os_mbx_check (U32 p, OS_ID mailbox)                  __SVC_0;
Xextern OS_RESULT _os_mbx_check (U32 p, OS_ID mailbox)                  __svc_indirect(0);
Nextern void      isr_mbx_send (OS_ID mailbox, void *message_ptr);
Nextern OS_RESULT isr_mbx_receive (OS_ID mailbox, void **message);
N
N/* Mutex Management */
Nextern void      rt_mut_init    (OS_ID mutex);
Nextern OS_RESULT rt_mut_release (OS_ID mutex);
Nextern OS_RESULT rt_mut_wait    (OS_ID mutex, U16 timeout);
N
N#define os_mut_init(mutex)         _os_mut_init((U32)rt_mut_init,mutex)
N#define os_mut_release(mutex)      _os_mut_release((U32)rt_mut_release,mutex)
N#define os_mut_wait(mutex,timeout) _os_mut_wait((U32)rt_mut_wait,mutex,timeout)
N
Nextern void      _os_mut_init (U32 p, OS_ID mutex)                     __SVC_0;
Xextern void      _os_mut_init (U32 p, OS_ID mutex)                     __svc_indirect(0);
Nextern OS_RESULT _os_mut_release (U32 p, OS_ID mutex)                  __SVC_0;
Xextern OS_RESULT _os_mut_release (U32 p, OS_ID mutex)                  __svc_indirect(0);
Nextern OS_RESULT _os_mut_wait (U32 p, OS_ID mutex, U16 timeout)        __SVC_0;
Xextern OS_RESULT _os_mut_wait (U32 p, OS_ID mutex, U16 timeout)        __svc_indirect(0);
N
N/* Time Management */
Nextern void      rt_dly_wait (U16 delay_time);
Nextern void      rt_itv_set  (U16 interval_time);
Nextern void      rt_itv_wait (void);
N
N#define os_dly_wait(delay_time)    _os_dly_wait((U32)rt_dly_wait,delay_time)
N#define os_itv_set(interval_time)  _os_itv_set((U32)rt_itv_set,interval_time)
N#define os_itv_wait()              _os_itv_wait((U32)rt_itv_wait)
N
Nextern void      _os_dly_wait (U32 p, U16 delay_time)                  __SVC_0;
Xextern void      _os_dly_wait (U32 p, U16 delay_time)                  __svc_indirect(0);
Nextern void      _os_itv_set (U32 p, U16 interval_time)                __SVC_0;
Xextern void      _os_itv_set (U32 p, U16 interval_time)                __svc_indirect(0);
Nextern void      _os_itv_wait (U32 p)                                  __SVC_0;
Xextern void      _os_itv_wait (U32 p)                                  __svc_indirect(0);
N
N/* User Timer Management */
Nextern OS_ID     rt_tmr_create (U16 tcnt, U16 info);
Nextern OS_ID     rt_tmr_kill   (OS_ID timer);
N
N#define os_tmr_create(tcnt,info)   _os_tmr_create((U32)rt_tmr_create,tcnt,info)
N#define os_tmr_kill(timer)         _os_tmr_kill((U32)rt_tmr_kill,timer)
N
Nextern OS_ID     _os_tmr_create (U32 p, U16 tcnt, U16 info)            __SVC_0;
Xextern OS_ID     _os_tmr_create (U32 p, U16 tcnt, U16 info)            __svc_indirect(0);
Nextern OS_ID     _os_tmr_kill (U32 p, OS_ID timer)                     __SVC_0;
Xextern OS_ID     _os_tmr_kill (U32 p, OS_ID timer)                     __svc_indirect(0);
N
N/* System Functions */
Nextern void      rt_tsk_lock   (void);
Nextern void      rt_tsk_unlock (void);
N
N#define tsk_lock()                 _os_tsk_lock((U32)rt_tsk_lock)
N#define tsk_unlock()               _os_tsk_unlock((U32)rt_tsk_unlock)
N
Nextern void      _os_tsk_lock (U32 p)                                  __SVC_0;
Xextern void      _os_tsk_lock (U32 p)                                  __svc_indirect(0);
Nextern void      _os_tsk_unlock (U32 p)                                __SVC_0;
Xextern void      _os_tsk_unlock (U32 p)                                __svc_indirect(0);
N
N/* Fixed Memory Block Management Functions */
Nextern int       _init_box (void *box_mem, U32 box_size, U32 blk_size);
Nextern void     *_alloc_box (void *box_mem);
Nextern void     *_calloc_box (void *box_mem);
Nextern int       _free_box (void *box_mem, void *box);
N
N#endif
N
N#define BOX_ALIGN_8     0x80000000
N#define _declare_box(pool,size,cnt)   U32 pool[(((size)+3)/4)*(cnt) + 3]
N#define _declare_box8(pool,size,cnt)  U64 pool[(((size)+7)/8)*(cnt) + 2]
N#define _init_box8(pool,size,bsize)   _init_box (pool,size,bsize | BOX_ALIGN_8)
N
N/* For compatibility with older configurations.*/
N#define os_stk_overflow         os_error
N
N/*----------------------------------------------------------------------------
N *                        Flash File System API
N *---------------------------------------------------------------------------*/
N
Ntypedef struct {                        /* RL Time format (FFS, TCPnet)      */
N  U8  hr;                               /* Hours    [0..23]                  */
N  U8  min;                              /* Minutes  [0..59]                  */
N  U8  sec;                              /* Seconds  [0..59]                  */
N  U8  day;                              /* Day      [1..31]                  */
N  U8  mon;                              /* Month    [1..12]                  */
N  U16 year;                             /* Year     [1980..2107]             */
N} RL_TIME;
N
Ntypedef struct {                        /* Search info record                */
N  S8  name[256];                        /* Name                              */
N  U32 size;                             /* File size in bytes                */
N  U16 fileID;                           /* System Identification             */
N  U8  attrib;                           /* Attributes                        */
N  RL_TIME time;                         /* Create/Modify Time                */
N} FINFO;
N
Nextern int finit (void);
Nextern int fdelete (const char *filename);
Nextern int frename (const char *oldname, const char *newname);
Nextern int ffind (const char *pattern, FINFO *info);
Nextern U64 ffree (const char *drive);
Nextern int fformat (const char *drive);
Nextern int fanalyse (const char *drive);
Nextern int fcheck (const char *drive);
Nextern int fdefrag (const char *drive);
N
N/* The following macros provide for common functions */
N#define unlink(fn)      fdelete(fn);
N
N/*----------------------------------------------------------------------------
N *                             TCPnet API
N *---------------------------------------------------------------------------*/
N
N/* UDP Options */
N#define UDP_OPT_SEND_CS    0x01   /* Calculate Checksum for UDP send frames  */
N#define UDP_OPT_CHK_CS     0x02   /* Verify Checksum for received UDP frames */
N
N/* TCP Socket Types */
N#define TCP_TYPE_SERVER    0x01   /* Socket Type Server (open for listening) */
N#define TCP_TYPE_CLIENT    0x02   /* Socket Type Client (initiate connect)   */
N#define TCP_TYPE_DELAY_ACK 0x04   /* Socket Type Delayed Acknowledge         */
N#define TCP_TYPE_FLOW_CTRL 0x08   /* Socket Type Flow Control                */
N#define TCP_TYPE_CLIENT_SERVER (TCP_TYPE_SERVER | TCP_TYPE_CLIENT)
N
N/* TCP Callback Events */
N#define TCP_EVT_CONREQ     0      /* Connect request received event          */
N#define TCP_EVT_CONNECT    1      /* Connection established event            */
N#define TCP_EVT_CLOSE      2      /* Connection was properly closed          */
N#define TCP_EVT_ABORT      3      /* Connection is for some reason aborted   */
N#define TCP_EVT_ACK        4      /* Previously send data acknowledged       */
N#define TCP_EVT_DATA       5      /* Data received event                     */
N
N/* TCP States */
N#define TCP_STATE_FREE     0      /* Entry is free and unused                */
N#define TCP_STATE_CLOSED   1      /* Entry allocated, socket still closed    */
N#define TCP_STATE_LISTEN   2      /* Socket waiting for incoming connection  */
N#define TCP_STATE_SYN_REC  3      /* SYN frame received                      */
N#define TCP_STATE_SYN_SENT 4      /* SYN packet sent to establish a connect. */
N#define TCP_STATE_FINW1    5      /* Tcp_close started FIN packet was sent   */
N#define TCP_STATE_FINW2    6      /* Our FIN ack-ed, waiting for remote FIN  */
N#define TCP_STATE_CLOSING  7      /* Received FIN independently of our FIN   */
N#define TCP_STATE_LAST_ACK 8      /* Waiting for last ACK for our FIN        */
N#define TCP_STATE_TWAIT    9      /* Timed waiting for 2MSL                  */
N#define TCP_STATE_CONNECT  10     /* TCP Connection established              */
N
N/* DNS Callback Events */
N#define DNS_EVT_SUCCESS    0      /* Host name successfully resolved         */
N#define DNS_EVT_NONAME     1      /* DNS Error, no such name                 */
N#define DNS_EVT_TIMEOUT    2      /* Timeout resolving host                  */
N#define DNS_EVT_ERROR      3      /* Erroneous response packet               */
N
N/* DNS 'get_host_by_name()' result codes */
N#define DNS_RES_OK         0      /* Function finished OK                    */
N#define DNS_ERROR_BUSY     1      /* DNS Client busy, can't process request  */
N#define DNS_ERROR_LABEL    2      /* Host name Label too long                */
N#define DNS_ERROR_NAME     3      /* Host name loo long                      */
N#define DNS_ERROR_NOSRV    4      /* Prim. DNS server not specified (0.0.0.0)*/
N#define DNS_ERROR_UDPSEND  5      /* UDP Send frame error                    */
N
N/* SMTP Callback Events */
N#define SMTP_EVT_SUCCESS   0      /* Email successfully sent                 */
N#define SMTP_EVT_TIMEOUT   1      /* Timeout sending email                   */
N#define SMTP_EVT_ERROR     2      /* Error when sending email                */
N
N/* ARP Cache Entry types */
N#define ARP_FIXED_IP       0      /* Fixed IP adrs is refreshed after tout   */
N#define ARP_TEMP_IP        1      /* Temp adrs is removed after timeout      */
N
Nextern void init_TcpNet (void);
Nextern void main_TcpNet (void);
Nextern void timer_tick (void);
Nextern U8   udp_get_socket (U8 tos, U8 opt, 
N                            U16 (*listener)(U8 socket, U8 *remip, U16 port, U8 *buf, U16 len));
Nextern BOOL udp_release_socket (U8 socket);
Nextern BOOL udp_open (U8 socket, U16 locport);
Nextern BOOL udp_close (U8 socket);
Nextern BOOL udp_mcast_ttl (U8 socket, U8 ttl);
Nextern U8  *udp_get_buf (U16 size);
Nextern BOOL udp_send (U8 socket, U8 *remip, U16 remport, U8 *buf, U16 dlen);
Nextern U8   tcp_get_socket (U8 type, U8 tos, U16 tout,
N                            U16 (*listener)(U8 socket, U8 event, U8 *buf, U16 len));
Nextern BOOL tcp_release_socket (U8 socket);
Nextern BOOL tcp_listen (U8 socket, U16 locport);
Nextern BOOL tcp_connect (U8 socket, U8 *remip, U16 remport, U16 locport);
Nextern U8  *tcp_get_buf (U16 size);
Nextern U16  tcp_max_dsize (U8 socket);
Nextern BOOL tcp_check_send (U8 socket);
Nextern U8   tcp_get_state (U8 socket);
Nextern BOOL tcp_send (U8 socket, U8 *buf, U16 dlen);
Nextern BOOL tcp_close (U8 socket);
Nextern BOOL tcp_abort (U8 socket);
Nextern void tcp_reset_window (U8 socket);
Nextern BOOL arp_cache_ip (U8 *ipadr, U8 type);
Nextern void ppp_listen (char const *user, char const *passw);
Nextern void ppp_connect (char const *dialnum, char const *user, char const *passw);
Nextern void ppp_close (void);
Nextern BOOL ppp_is_up (void);
Nextern void slip_listen (void);
Nextern void slip_connect (char const *dialnum);
Nextern void slip_close (void);
Nextern BOOL slip_is_up (void);
Nextern U8   get_host_by_name (U8 *hostn, void (*cbfunc)(U8 event, U8 *host_ip));
Nextern BOOL smtp_connect (U8 *ipadr, U16 port, void (*cbfunc)(U8 event));
Nextern void dhcp_disable (void);
Nextern BOOL igmp_join (U8 *group_ip);
Nextern BOOL igmp_leave (U8 *group_ip);
Nextern BOOL snmp_trap (U8 *manager_ip, U8 gen_trap, U8 spec_trap, U16 *obj_list);
Nextern BOOL snmp_set_community (const char *community);
N#ifdef __cplusplus               // EC++
S}
N#endif
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
N  
N#endif
N 
L 2 "main.h" 2
N
N#ifdef UKU_TELECORE2016
S#define UKU_TELECORE2015
S#define UKU2071x
N#endif
N
N#ifdef UKU2071x
N#define MCP2515_CAN
N#define SC16IS740_UART
N//#define can1_out mcp2515_transmit
N#endif
N
N#define SOFT_NUM	1051
N#define SOFT_DATE	21112UL
N
N#define _ACDC_
N
N//#define _IPS_	100
N
N#define NUM_OF_SET_TABL	2
N#define DEEP_OF_SET_TABL 19
N
N#define CONTROL_BYTE_FOR_XPORT 0
N
N#define MINIM_INV_ADRESS	20
N//-минималный адрес инвертора в кановской сети, не может быть меньше 16
N#define MAX_NET_ADRESS		31
N//-максимальный адрес устройства в кановской сети ИБЭПа
N
N#define BIN__N(x) (x) | x>>3 | x>>6 | x>>9
N#define BIN__B(x) (x) & 0xf | (x)>>12 & 0xf0
N#define BIN8(v) (BIN__B(BIN__N(0x##v)))
N
N#ifndef UKU_KONTUR
N#define OID_ENTERPRISE 	OID0(1,3), 6, 1, 4, 1, 130, 131, 31
N#endif
N#ifdef UKU_KONTUR
S#define OID_ENTERPRISE 	OID0(1,3), 6, 1, 4, 1, 130, 167, 60
N#endif
N
N#ifndef UKU_KONTUR
N
N#define OID_DEVICE 		14
N
N#define DISPLAY_DEVICE_INFO			1
N#define DISPLAY_DEVICE_INFO_CODE			1
N#define DISPLAY_DEVICE_INFO_SERIAL			2
N#define DISPLAY_DEVICE_INFO_LOCATION 		3
N#define DISPLAY_DEVICE_INFO_NUMOFBAT 		4
N#define DISPLAY_DEVICE_INFO_NUMOFBPS 		5
N#define DISPLAY_DEVICE_INFO_NUMOFINV 		6
N#define DISPLAY_DEVICE_INFO_NUMOFAVT 		7
N#define DISPLAY_DEVICE_INFO_NUMOFDT 		8
N#define DISPLAY_DEVICE_INFO_NUMOFSK 		9
N#define DISPLAY_DEVICE_INFO_NUMOFEVENTS		10
N#define DISPLAY_DEVICE_INFO_MODEL_NAME		11
N
N#define DISPLAY_MAINS_POWER			2
N#define DISPLAY_MAINS_POWER_VOLTAGE		1
N#define DISPLAY_MAINS_POWER_FREQUENCY		2
N#define DISPLAY_MAINS_POWER_STATUS			3
N#define DISPLAY_MAINS_POWER_ALARM			4
N#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEA	5
N#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEB	6
N#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEC	7
N
N
N#define DISPLAY_LOAD				3
N#define DISPLAY_LOAD_VOLTAGE				1
N#define DISPLAY_LOAD_CURRENT				2
N
N#define DISPLAY_PSU					4
N#define DISPLAY_PSU_ENTRY_NUMBER			1,1
N#define DISPLAY_PSU_ENTRY_VOLTAGE 			1,2
N#define DISPLAY_PSU_ENTRY_CURRENT			1,3
N#define DISPLAY_PSU_ENTRY_TEMPERATURE		1,4
N#define DISPLAY_PSU_ENTRY_STATUS			1,5
N#define DISPLAY_PSU_ENTRY_VENTRESURS		1,6
N
N#define DISPLAY_BAT					5
N#define DISPLAY_BAT_NUMBER				1,1
N#define DISPLAY_BAT_VOLTAGE				1,2
N#define DISPLAY_BAT_CURRENT				1,3
N#define DISPLAY_BAT_TEMPERATURE			1,4
N#define DISPLAY_BAT_CAPACITY				1,5
N#define DISPLAY_BAT_CHARGE				1,6
N#define DISPLAY_BAT_STATUS				1,7
N
N#define DISPLAY_SPEC				6
N#define DISPLAY_SPEC_STAT				1
N#define DISPLAY_SPEC_COMMAND				2
N
N#define DISPLAY_SPEC_TRAP_MESSAGE			5
N#define DISPLAY_SPEC_TRAP_VALUE_0			6
N#define DISPLAY_SPEC_TRAP_VALUE_1			7
N#define DISPLAY_SPEC_TRAP_VALUE_2			8
N
N
N#define DISPLAY_INV					14
N#define DISPLAY_INV_ENTRY_NUMBER			1,1
N#define DISPLAY_INV_ENTRY_VOLTAGE 			1,2
N#define DISPLAY_INV_ENTRY_CURRENT			1,3
N#define DISPLAY_INV_ENTRY_TEMPERATURE		1,4
N#define DISPLAY_INV_ENTRY_STATUS			1,5
N
N#define LCD_SIZE 200
N
N#define SNMP_COMMAND				8
N#define COMMAND_ANSWER					1
N#define COMMAND_PARAMETR					2
N
N#define SYSPARAMS					10
N#define SYSPARAMSSOUNDALARMEN				1
N#define SYSPARAMSALARMAUTODISABLE			2
N#define SYSPARAMS_BAT_TEST_TIME			3
N#define SYSPARAMS_U_MAX					4
N#define SYSPARAMS_U_MIN					5
N#define SYSPARAMS_U_0_GRAD				6
N#define SYSPARAMS_U_20_GRAD				7 
N#define SYSPARAMS_U_SIGN					8
N#define SYSPARAMS_U_MIN_POWER				9
N#define SYSPARAMS_U_WITHOUT_BAT			10
N#define SYSPARAMS_IBK					11
N#define SYSPARAMS_IZMAX					12
N#define SYSPARAMS_IMAX					13
N#define SYSPARAMS_IMIN					14
N#define SYSPARAMS_UVZ					15
N#define SYSPARAMS_TZAS					16
N#define SYSPARAMS_TSIGN_BAT				17
N#define SYSPARAMS_TMAX_BAT				18
N#define SYSPARAMS_TSIGN_BPS				19
N#define SYSPARAMS_TMAX_BPS				20	
N#define SYSPARAMS_BAT_PART_ALARM			21
N#define SYSPARAMS_POWER_CNT_ADRESS			22	
N
N#define DISPLAY_AVT					11
N#define DISPLAY_AVT_ENTRY_NUMBER			1,1
N#define DISPLAY_AVT_ENTRY_STAT 			1,2
N
N#define DISPLAY_ENERGY				12
N#define DISPLAY_ENERGY_VVOD_PHASE_A		1
N#define DISPLAY_ENERGY_VVOD_PHASE_B		2
N#define DISPLAY_ENERGY_VVOD_PHASE_C		3
N#define DISPLAY_ENERGY_PES_PHASE_A			4
N#define DISPLAY_ENERGY_PES_PHASE_B			5
N#define DISPLAY_ENERGY_PES_PHASE_C			6
N#define DISPLAY_ENERGY_TOTAL_ENERGY			7
N#define DISPLAY_ENERGY_CURRENT_ENERGY		8
N#define DISPLAY_ENERGY_INPUT_VOLTAGE		9
N
N
N#define DISPLAY_SK					15
N#define DISPLAY_SK_ENTRY_NUMBER			1,1
N#define DISPLAY_SK_AKTIVITY	 			1,2
N#define DISPLAY_SK_ALARM_AKTIVITY 			1,3
N#define DISPLAY_SK_ALARM 	 			1,4
N
N#define DISPLAY_DT					17
N#define DISPLAY_DT_ENTRY_NUMBER			1,1
N#define DISPLAY_DT_TEMPER	 			1,2
N#define DISPLAY_DT_ERROR 				1,3
N
N#define DISPLAY_MAKB				16
N#define DISPLAY_MAKB_ENTRY_NUMBER			1,1
N#define DISPLAY_MAKB_CONNECT_STATUS		1,2
N#define DISPLAY_MAKB_VOLTAGE0				1,3
N#define DISPLAY_MAKB_VOLTAGE1				1,4
N#define DISPLAY_MAKB_VOLTAGE2				1,5
N#define DISPLAY_MAKB_VOLTAGE3				1,6
N#define DISPLAY_MAKB_VOLTAGE4				1,7
N#define DISPLAY_MAKB_TEMPER0				1,8
N#define DISPLAY_MAKB_TEMPER1				1,9
N#define DISPLAY_MAKB_TEMPER2				1,10
N#define DISPLAY_MAKB_TEMPER3				1,11
N#define DISPLAY_MAKB_TEMPER4				1,12
N#define DISPLAY_MAKB_TEMPER0_STAT			1,13
N#define DISPLAY_MAKB_TEMPER1_STAT			1,14
N#define DISPLAY_MAKB_TEMPER2_STAT			1,15
N#define DISPLAY_MAKB_TEMPER3_STAT			1,16
N#define DISPLAY_MAKB_TEMPER4_STAT			1,17
N
N#define DISPLAY_LAKB				18
N#define DISPLAY_LAKB_ENTRY_NUMBER			1,1
N#define DISPLAY_LAKB_MAX_CELL_VOLTAGE		1,2
N#define DISPLAY_LAKB_MIN_CELL_VOLTAGE		1,3
N#define DISPLAY_LAKB_MAX_CELL_TEMPERATURE	1,4
N#define DISPLAY_LAKB_MIN_CELL_TEMPERATURE	1,5
N#define DISPLAY_LAKB_VOLTAGE				1,6
N#define DISPLAY_LAKB_CH_CURR				1,7
N#define DISPLAY_LAKB_DSCH_CURR				1,8
N#define DISPLAY_LAKB_RAT_CAP				1,9
N#define DISPLAY_LAKB_SOH					1,10
N#define DISPLAY_LAKB_SOC					1,11	
N#define DISPLAY_LAKB_CCLV					1,12
N#define DISPLAY_LAKB_RBT					1,13
N#define DISPLAY_LAKB_FLAGS1					1,14
N#define DISPLAY_LAKB_FLAGS2					1,15
N#define DISPLAY_LAKB_CELL_TEMPERATURE_1		1,16
N#define DISPLAY_LAKB_CELL_TEMPERATURE_2		1,17
N#define DISPLAY_LAKB_CELL_TEMPERATURE_3		1,18
N#define DISPLAY_LAKB_CELL_TEMPERATURE_4		1,19
N#define DISPLAY_LAKB_CELL_TEMPERATURE_AMBIENT	1,20
N#define DISPLAY_LAKB_CELL_TEMPERATURE_POWER		1,21
N#define DISPLAY_LAKB_CHARGE_AND_DISCHARGE_CURRENT_ALARM_STATUS		1,22
N#define DISPLAY_LAKB_BATTERY_TOTAL_VOLTAGE_ALARM_STATUS				1,23
N#define DISPLAY_LAKB_CUSTOM_ALARM_QUANTITY							1,24
N#define DISPLAY_LAKB_BALANCED_EVENT_CODE							1,25
N#define DISPLAY_LAKB_VOLTAGE_EVENT_CODE								1,26
N#define DISPLAY_LAKB_TEMPERATURE_EVENT_CODE							1,27
N#define DISPLAY_LAKB_CURRENT_EVENT_CODE								1,28
N#define DISPLAY_LAKB_FET_STATUS_CODE								1,29
N#define DISPLAY_LAKB_BALANCED_STATUS_CODE							1,30
N#define DISPLAY_LAKB_SYSTEM_STATUS_CODE								1,31
N#define DISPLAY_LAKB_DAMP1				1,32
N#define DISPLAY_LAKB_DAMP2				1,33
N#define DISPLAY_LAKB_DAMP3				1,34
N#define DISPLAY_LAKB_DAMP4				1,35
N#define DISPLAY_LAKB_DAMP5				1,36
N
N#define DISPLAY_KLIMAT				20
N#define DISPLAY_KLIMAT_WARM_SIGNAL		1
N#define DISPLAY_KLIMAT_COOL_SIGNAL		2
N#define DISPLAY_KLIMAT_WARM_ON_TEMPER	3
N#define DISPLAY_KLIMAT_WARM_OFF_TEMPER	4
N#define DISPLAY_KLIMAT_WARM_Q			5
N#define DISPLAY_KLIMAT_COOL_100_TEMPER	6
N#define DISPLAY_KLIMAT_COOL_80_TEMPER	7
N#define DISPLAY_KLIMAT_COOL_60_TEMPER	8
N#define DISPLAY_KLIMAT_COOL_40_TEMPER	9
N#define DISPLAY_KLIMAT_COOL_20_TEMPER	10
N#define DISPLAY_KLIMAT_COOL_100_DTEMPER	11
N#define DISPLAY_KLIMAT_COOL_80_DTEMPER	12
N#define DISPLAY_KLIMAT_COOL_60_DTEMPER	13
N#define DISPLAY_KLIMAT_COOL_40_DTEMPER	14
N#define DISPLAY_KLIMAT_COOL_20_DTEMPER	15
N#define DISPLAY_KLIMAT_WARM_STAT		16
N#define DISPLAY_KLIMAT_INT_VENT_PWM_STAT	17
N#define DISPLAY_KLIMAT_EXT_VENT_PWM_STAT	18	
N
N
N#define COMMAND_OK		0x5555
N#define COMAND_FAIL		0xaaaa
N#define COMMAND_INVALID	0xeeee
N#define WRONG_PARAMETER	0xeeef
N
N#define SNMP_BPS_DISABLE		5
N#define SNMP_BPS_UNDISABLE	8
N#define SNMP_SPEC_VZ		3
N#define SNMP_SPEC_KE		4
N#define SNMP_SPEC_DISABLE	7
N
N
N#define DISPLAY_LOG					9
N#define DISPLAY_LOG_ENTRY_EVENTS 			1,1
N//#define DISPLAY_LOG_ENTRY_EVENTS 			1,1
N
N#endif
N
N
N
N
N#ifdef UKU_KONTUR
S
S#define OID_DEVICE 		1,2
S
S#define DISPLAY_DEVICE_INFO			1
S#define DISPLAY_DEVICE_INFO_CODE			1
S#define DISPLAY_DEVICE_INFO_SERIAL			2
S#define DISPLAY_DEVICE_INFO_LOCATION 		3
S#define DISPLAY_DEVICE_INFO_NUMOFBAT 		4
S#define DISPLAY_DEVICE_INFO_NUMOFBPS 		5
S#define DISPLAY_DEVICE_INFO_NUMOFINV 		6
S#define DISPLAY_DEVICE_INFO_NUMOFAVT 		7
S#define DISPLAY_DEVICE_INFO_NUMOFDT 		8
S#define DISPLAY_DEVICE_INFO_NUMOFSK 		9
S#define DISPLAY_DEVICE_INFO_NUMOFEVENTS		10
S
S#define DISPLAY_MAINS_POWER			1
S#define DISPLAY_MAINS_POWER_VOLTAGE		1
S#define DISPLAY_MAINS_POWER_FREQUENCY		2
S#define DISPLAY_MAINS_POWER_STATUS			3
S#define DISPLAY_MAINS_POWER_ALARM			4
S#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEA	5
S#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEB	6
S#define DISPLAY_MAINS_POWER_VOLTAGE_PHASEC	7
S
S
S#define DISPLAY_LOAD				3
S#define DISPLAY_LOAD_VOLTAGE				1
S#define DISPLAY_LOAD_CURRENT				2
S
S#define DISPLAY_PSU					4
S#define DISPLAY_PSU_ENTRY_NUMBER			1,1
S#define DISPLAY_PSU_ENTRY_VOLTAGE 			1,2
S#define DISPLAY_PSU_ENTRY_CURRENT			1,3
S#define DISPLAY_PSU_ENTRY_TEMPERATURE		1,4
S#define DISPLAY_PSU_ENTRY_STATUS			1,5
S
S#define DISPLAY_BAT					5
S#define DISPLAY_BAT_NUMBER				1,1
S#define DISPLAY_BAT_VOLTAGE				1,2
S#define DISPLAY_BAT_PART_VOLTAGE			1,3
S#define DISPLAY_BAT_CURRENT				1,4
S#define DISPLAY_BAT_TEMPERATURE			1,5
S#define DISPLAY_BAT_CAPACITY				1,6
S#define DISPLAY_BAT_CHARGE				1,7
S#define DISPLAY_BAT_STATUS				1,8
S
S#define DISPLAY_SPEC				6
S#define DISPLAY_SPEC_STAT				1
S#define DISPLAY_SPEC_COMMAND				2
S
S#define DISPLAY_SPEC_TRAP_MESSAGE			5
S#define DISPLAY_SPEC_TRAP_VALUE_0			6
S#define DISPLAY_SPEC_TRAP_VALUE_1			7
S#define DISPLAY_SPEC_TRAP_VALUE_2			8
S
S
S
S
S#define LCD_SIZE 200
S
S#define SNMP_COMMAND				8
S#define COMMAND_ANSWER					1
S#define COMMAND_PARAMETR					2
S
S#define SYSPARAMS					10
S#define SYSPARAMSSOUNDALARMEN				1
S#define SYSPARAMSALARMAUTODISABLE			2
S#define SYSPARAMS_BAT_TEST_TIME			3
S#define SYSPARAMS_U_MAX					4
S#define SYSPARAMS_U_MIN					5
S#define SYSPARAMS_U_0_GRAD				6
S#define SYSPARAMS_U_20_GRAD				7 
S#define SYSPARAMS_U_SIGN					8
S#define SYSPARAMS_U_MIN_POWER				9
S#define SYSPARAMS_U_WITHOUT_BAT			10
S#define SYSPARAMS_IBK					11
S#define SYSPARAMS_IZMAX					12
S#define SYSPARAMS_IMAX					13
S#define SYSPARAMS_IMIN					14
S#define SYSPARAMS_UVZ					15
S#define SYSPARAMS_TZAS					16
S#define SYSPARAMS_TSIGN_BAT				17
S#define SYSPARAMS_TMAX_BAT				18
S#define SYSPARAMS_TSIGN_BPS				19
S#define SYSPARAMS_TMAX_BPS				20	
S#define SYSPARAMS_BAT_PART_ALARM			21
S#define SYSPARAMS_POWER_CNT_ADRESS			22
S
S
S#define DISPLAY_AVT					11
S#define DISPLAY_AVT_ENTRY_NUMBER			1,1
S#define DISPLAY_AVT_ENTRY_STAT 			1,2
S
S#define DISPLAY_ENERGY				12
S#define DISPLAY_ENERGY_VVOD_PHASE_A		1
S#define DISPLAY_ENERGY_VVOD_PHASE_B		2
S#define DISPLAY_ENERGY_VVOD_PHASE_C		3
S#define DISPLAY_ENERGY_PES_PHASE_A			4
S#define DISPLAY_ENERGY_PES_PHASE_B			5
S#define DISPLAY_ENERGY_PES_PHASE_C			6
S#define DISPLAY_ENERGY_TOTAL_ENERGY		7
S#define DISPLAY_ENERGY_CURRENT_ENERGY		8
S
S
S#define DISPLAY_SK					14
S#define DISPLAY_SK_ENTRY_NUMBER			1,1
S#define DISPLAY_SK_NAME					1,2
S#define DISPLAY_SK_AKTIVITY	 			1,3
S#define DISPLAY_SK_ALARM_AKTIVITY 			1,4
S#define DISPLAY_SK_ALARM 	 			1,5
S
S#define DISPLAY_DT					15
S#define DISPLAY_DT_EXT					1
S#define DISPLAY_DT_MSAN	 				2
S#define DISPLAY_DT_EPU 					3
S
S#define DISPLAY_KLIMAT				16
S#define DISPLAY_KLIMAT_BOX_TEMPER				1
S#define DISPLAY_KLIMAT_SETTINGS_BOX_ALARM_TEMPER	2
S#define DISPLAY_KLIMAT_SETTINGS_VENT_ON			3
S#define DISPLAY_KLIMAT_SETTINGS_VENT_OFF		4
S#define DISPLAY_KLIMAT_SETTINGS_WARM_ON			5
S#define DISPLAY_KLIMAT_SETTINGS_WARM_OFF		6
S#define DISPLAY_KLIMAT_SETTINGS_LOAD_ON			7
S#define DISPLAY_KLIMAT_SETTINGS_LOAD_OFF		8
S#define DISPLAY_KLIMAT_SETTINGS_BATT_ON			9
S#define DISPLAY_KLIMAT_SETTINGS_BATT_OFF		10
S
S
S
S#define COMMAND_OK		0x5555
S#define COMAND_FAIL		0xaaaa
S#define COMMAND_INVALID	0xeeee
S#define WRONG_PARAMETER	0xeeef
S
S#define SNMP_BPS_DISABLE		5
S#define SNMP_BPS_UNDISABLE	8
S#define SNMP_SPEC_VZ		3
S#define SNMP_SPEC_KE		4
S#define SNMP_SPEC_DISABLE	7
S
S
S#define DISPLAY_LOG					9
S#define DISPLAY_LOG_ENTRY_EVENTS 			1,1
S//#define DISPLAY_LOG_ENTRY_EVENTS 			1,1
N#endif
N
N//#define SEC_IN_HOUR	36000L
N
N#define LCD_SIZE 200
N
N
N#define MAX_NUM_OF_BAT	2
N#define MAX_NUM_OF_BPS	12
N//#define PAROL_ALL_ZERO
N
N#define AH_CONSTANT		36000L
N
N//***********************************************
N//Состояние источников
N
N
N
N
N#define MASK(lengt) 		(0xffffffff>>(32-lengt))
N#define MASK_OFFSET(shift,lengt)	(MASK(lengt)<<shift)
N
N#define GET_REG( reg, shift, lengt) 		( (reg & MASK_OFFSET(shift,lengt)) >> shift)
N#define SET_REG( reg, val, shift, lengt)  	reg = ( (reg & ~MASK_OFFSET(shift,lengt)) | (val << shift) )
N//#define CHK_REG( reg, mask ) ( (reg) & (mask) == (mask) )
N
N
N
N#define delay_ms(x) {long xx; xx=(unsigned long)x * 12000UL; while(xx)xx--;}
N#define delay_us(x) {long xx; xx=(unsigned long)x * 12UL; while(xx)xx--;}
N
N//*************************************************
N//сообщения
N#define MESS_DEEP	10
N
N#define 	MESS_ZERO 		0
N#define 	MESS_BAT1_OFF 		1
N#define 	MESS_BAT2_OFF		2
N#define 	MESS_ALL_SRC_OFF	3
N#define 	MESS_ALL_SRC_ON	4
N//#define 	MESS_RELSAM_ON		5
N#define 	MESS_SRC1_OFF		6
N#define 	MESS_SRC2_OFF		7
N#define 	MESS_SRC3_OFF		8
N#define 	MESS_SRC4_OFF		9
N#define 	MESS_SRC5_OFF		10
N#define 	MESS_SRC6_OFF		11
N#define 	MESS_SRC7_OFF		12
N#define 	MESS_SRC8_OFF		13
N#define 	MESS_SRC9_OFF		14
N#define 	MESS_SRC10_OFF		15
N#define 	MESS_SRC11_OFF		16
N#define 	MESS_SRC12_OFF		17
N#define 	MESS_BAT_CONTROL	18
N#define 	MESS_SRC_CONTROL	19
N#define 	MESS_LOAD2_WAIT	9 
N#define 	MESS_PONG			100
N#define	MESS_SPA_UART_PONG	101 
N#define	MESS_SPA_BLOK_BPS1	102
N#define	MESS_SPA_BLOK_BPS2	103
N#define	MESS_SPA_LEAVE_BPS1	104
N#define	MESS_SPA_LEAVE_BPS2	105
N#define 	MESS_SRC_ON_OFF	150
N#define   _MESS_SRC_MASK_BLOK_2SEC		151
N#define   _MESS_SRC_MASK_UNBLOK		152
N#define 	_MESS_SRC_MASK_ON			153
N#define	_MESS_SRC_PWM				154
N#define	_MESS_U_NECC				155
N#define   _MESS_FAST_REG				156
N//#define   _MESS_U_AVT_GOOD			157
N
N#define 	MESS_BAT_ON_OFF	160
N#define   _MESS_BAT_MASK_BLOK_AFTER_2SEC		161
N#define	_MESS_BAT_MASK_ON					162
N#define	_MESS_BAT_MASK_OFF					163
N
N		
N//#define	MESS_SPA_UART_SRAM	200 
N//#define	MESS_SPA_UART_CMND	201 
N
N#define	MESS2UNECC_HNDL   					190
N#define  		PARAM_UNECC_SET				 	191
N#define	MESS2BAT_HNDL   					200
N//#define	MESS2BAT_HNDL1   					201
N#define		PARAM_BAT_ALL_OFF_AFTER_2SEC			201
N#define		PARAM_BAT_MASK_OFF_AFTER_2SEC			202
N//#define		PARAM_BAT_ON						202
N#define	MESS2BPS_HNDL   					205
N#define		PARAM_BPS_ALL_OFF_AFTER_2SEC			206
N#define		PARAM_BPS_MASK_OFF_AFTER_2SEC			207
N#define		PARAM_BPS_MASK_ON_OFF_AFTER_2SEC		208
N#define		PARAM_BPS_MASK_ON					209
N#define		PARAM_BPS_ALL_ON					210
N#define 	MESS2RELE_HNDL						210
N#define 	MESS2KLIMAT_CNTRL					211
N#define		PARAM_RELE_SAMOKALIBR				100
N#define		PARAM_RELE_AV_1						101
N#define		PARAM_RELE_AV_2						102
N#define		PARAM_RELE_AV_3						103
N#define		PARAM_RELE_LOAD_OFF					103
N#define		PARAM_RELE_AV_4						104
N//#define		PARAM_RELE_WARM					104
N#define		PARAM_RELE_AV_COMM					105
N#define		PARAM_RELE_AV_BPS					106
N#define		PARAM_RELE_VENT						107
N#define		PARAM_RELE_VENT_WARM				107
N#define		PARAM_RELE_AV_BAT1					108
N#define		PARAM_RELE_AV_BAT2					109
N#define		PARAM_RELE_NPN						110
N#define		PARAM_RELE_WARM				     	111
N#define 		PARAM_RELE_VVENT				112
N#define 		PARAM_RELE_EXT					113
N#define 		PARAM_RELE_BAT_IS_DISCHARGED	114
N#define		PARAM_KLIMAT_CNTRL_VENT_INT			115
N#define		PARAM_KLIMAT_CNTRL_VENT_EXT			116
N
N#define	MESS2IND_HNDL						215
N#define		PARAM_SAMOKALIBR					216
N#define 		PARAM_U_AVT_GOOD					217
N#define	MESS2MATEMAT						220
N#define		PARAM_SAMOKALIBR					216
N#define	MESS2CNTRL_HNDL   					225
N#define		PARAM_CNTRL_STAT_PLUS				100
N#define		PARAM_CNTRL_STAT_MINUS				105
N#define		PARAM_CNTRL_STAT_STEP_DOWN			110
N#define 		PARAM_CNTRL_STAT_SET		    		229
N#define 		PARAM_CNTRL_STAT_FAST_REG		    	230	
N#define	MESS2KB_HNDL   					230
N#define		PARAM_CNTRL_IS_DOWN					231
N#define	MESS2VENT_HNDL   					240
N#define		PARAM_VENT_CB					241
N
N#define MESS2NET_DRV							33
N#define	PARAM_BPS_NET_OFF						34
N
N#define LCD_SIZE 200
N
N
N
N#define BIN__N(x) (x) | x>>3 | x>>6 | x>>9
N#define BIN__B(x) (x) & 0xf | (x)>>12 & 0xf0
N#define BIN8(v) (BIN__B(BIN__N(0x##v)))
N
N
N
N#define BAUD_RATE0 9600UL
N#define BAUD_RATE1 9600UL
N
N
N
N
N
N#ifndef PAROL_ALL_ZERO
N#define PAROL_KALIBR 873
N#define PAROL_SET 184
N#define PAROL_MODE 0 
N#define PAROL_ALLER 815 
N#define PAROL_BAT_IN 722 
N#define PAROL_BAT_OUT 722
N#define PAROL_KE 125
N#define PAROL_VZ 126
N#define PAROL_TST 999 
N#define PAROL_DEFAULT 295
N#define PAROL_AUSW 949
N#endif                
N
N#ifdef PAROL_ALL_ZERO
S#define PAROL_KALIBR 0
S#define PAROL_SET 0
S#define PAROL_MODE 0 
S#define PAROL_ALLER 0 
S#define PAROL_BAT_IN 0 
S#define PAROL_BAT_OUT 0
S#define PAROL_KE 0
S#define PAROL_VZ 0
S#define PAROL_TST 0
S#define PAROL_DEFAULT 0
S#define PAROL_AUSW 0
N#endif
N
N
N#define CNT_SRC_MAX	60
N
N
N
N//
N
N//#define SHIFT_REL_AV_BPS	     4
N 
N
N
N#ifdef UKU_MGTS
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_AV_COMM	9
S#define SHIFT_REL_LOAD_OFF	5
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_LIGHT 	     4
N#endif
N
N#ifdef UKU_RSTKM
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_AV_COMM	9
S#define SHIFT_REL_LOAD_OFF	5
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_LIGHT 	     4
N#endif
N
N#ifdef UKU_3U
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT1	4
S#define SHIFT_REL_AV_BAT2	9
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
N#endif
N
N#ifdef UKU_GLONASS
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT1	4
S#define SHIFT_REL_AV_BAT2	9
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
N#endif
N
N#ifdef UKU_KONTUR
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_AV_COMM	9
S#define SHIFT_REL_LOAD_OFF	5
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_VENT_WARM   7
S#define SHIFT_REL_WARM 	     4
S#define SHIFT_REL_LIGHT 	     4
N#endif
N
N#ifdef UKU_6U
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT1	4
S#define SHIFT_REL_AV_BAT2	9
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_VENT		5
N#endif
N
N#ifdef UKU_220
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT	4
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_VENT		9
N#endif
N
N#ifdef UKU_220_IPS_TERMOKOMPENSAT
N#define SHIFT_REL_BAT1	     8
N#define SHIFT_REL_BAT2	     6
N#define SHIFT_REL_AV_NET		25
N#define SHIFT_REL_AV_BPS	     5
N#define SHIFT_REL_AV_BAT	     4
N#endif
N
N#ifdef UKU_220_V2
S#define SHIFT_REL_AV_NET		25
S#define SHIFT_REL_AV_BAT	4
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_VENT		9
N#endif
N
N#ifdef UKU_TELECORE2015
S#define SHIFT_REL_AV_NET		5
S#define SHIFT_REL_AV_BAT	4
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_LIGHT		9
S#define SHIFT_REL_WARM		4
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_VVENT	     6
N#endif
N
N#ifdef UKU_TELECORE2017
S#define SHIFT_REL_AV_NET		5
S#define SHIFT_REL_AV_BAT	4
S#define SHIFT_REL_AV_BPS	     7
S#define SHIFT_REL_BAT1	     8
S#define SHIFT_REL_BAT2	     6
S#define SHIFT_REL_LIGHT		9
S#define SHIFT_REL_WARM		4
S#define SHIFT_REL_VENT	     7
S#define SHIFT_REL_VVENT	     6
N#endif
N
N//***********************************************
N//Таймер
Nextern char b1000Hz,b100Hz,b50Hz,b10Hz,b5Hz,b2Hz,b1Hz;
Nextern short t0cnt,t0cnt0,t0cnt1,t0cnt2,t0cnt3,t0cnt4,t0cnt5,t0cnt6,t0_cnt7;
Nextern char bFL5,bFL2,bFL,bFL_;
Nextern signed short main_10Hz_cnt;
Nextern signed short main_1Hz_cnt;
N
N//***********************************************
N//Структура ИБЭПа
Nextern char cnt_of_slave;
N//char cnt_of_wrks;   //колличество работающих источников , для индикации
N
N
N
N
N//***********************************************
N//Индикация
Ntypedef enum {
N	iMn_VD,
N	iSet_VD,
N	#ifndef UKU_TELECORE2017
N	iMn_TELECORE2017,
N	#endif 
N	iSrv_sl,iNet,iNet3,iNetEM,
N	iSet,iSet_220_IPS_TERMOKOMPENSAT,iSet_220_V2,
N	iInv_set,
N	iMakb,
N	iBps,iBps_elteh,iS2,iSet_prl,iK_prl,iDnd,
N	iK, iK_220_IPS_TERMOKOMPENSAT,iK_220_IPS_TERMOKOMPENSAT_IB,iK_TELECORE,iK_VD,
N	iSpcprl,iSpc,k,Crash_0,Crash_1,iKednd,iAv_view_avt,iAKE,iSpc_termocompensat,
N	iLoad,iAVAR,
N	iStr,iStr_VD,
N	iVrs,iPrltst,iApv,
N	iK_bps,iK_bps_sel,iK_bat_ips_termokompensat_ib,iK_bat_TELECORE,iK_bat_sel,iK_bat_sel_TELECORE,iK_load,iK_net,iK_net3,
N	iK_makb_sel,iK_makb,iK_out,
N	iTst_220_IPS_TERMOKOMPENSAT,iTst_VD,
N	iTst_klbr,iTst_BPS1,iTst_BPS2,iTst_BPS12,iDebug,
N	iDef_220_IPS_TERMOKOMPENSAT,
N	iSet_st_prl,iK_pdp,iSet_T,
N	iDeb,
N	iPrl_bat_in_out,iPrl_bat_in_sel,iPdp1,iJAv_sel,iJAv_net_sel,iJAv_net,iJAv_src1,
N	iTst_bps,/*iJAv_bat,iJAv_bat_sel,*/iAusw,iAusw_prl,iAusw_set,
N	iK_t_ext,iK_t_3U,iK_t_ext_6U,
N	iAv_view,
N	iBatLogKe,iJ_bat_ke,iBatLogVz,iJ_bat_vz,iBatLogWrk,
N	iExtern,
N	iK_power_net,
N	iExt_set,iExt_set_3U,
N	iExt_dt,
N	iExt_sk,iExt_sk_3U,
N	iExt_ddv,iExt_ddi,iExt_dud,iExt_dp,iSM,iLog,iLog_,iBatLog,iKlimat,iKlimat_kontur,iKlimat_TELECORE,
N	iEnerg3,iEnerg,
N	iVent,
N	iK_power_net3,
N	iAvt,iLan_set,
N	iNpn_set,
N	iBps_list,
N	iRele_set,iRele_set_,
N	iAvt_set_sel,iAvt_set,iSet_li_bat,
N	iOut_volt_contr,iDop_rele_set,iBlok_ips_set,iIps_Curr_Avg_Set}i_enum;
N
Ntypedef struct  
N{
N
Ni_enum i;
Nsigned char s_i;
Nsigned char s_i1;
Nsigned char s_i2;
Nsigned char i_s;
N} stuct_ind;
N
N#define ind     a_ind.i
N#define sub_ind     a_ind.s_i
N#define sub_ind1     a_ind.s_i1
N#define sub_ind2     a_ind.s_i2
N#define index_set     a_ind.i_s
N
Nextern stuct_ind a_ind,b_ind[10],c_ind;
Nextern signed short ptr_ind;
Nextern char lcd_buffer[LCD_SIZE+100];
Xextern char lcd_buffer[200+100];
Nextern signed char parol[3];
Nextern char phase;
Nextern char lcd_bitmap[1024];
Nextern char dig[5];
Nextern signed short ind_pointer;
Nextern char zero_on;
Nextern char mnemo_cnt;
Nextern char simax;
Nextern short av_j_si_max;
Nextern const char ABCDEF[];
Nextern const char sm_mont[13][4]; 
N
N
N//**********************************************
N//Коэффициенты, отображаемые из EEPROM
Nextern signed short Ktsrc[2];
Nextern signed short Kusrc[2];
Nextern signed short Kisrc[2];
Nextern signed short Ki0src[2];
Nextern signed short Kubat[2];
Nextern signed short Kubatm[2];
Nextern unsigned short Kibat0[2];
Nextern signed short Kibat1[2];
Nextern signed short Ktbat[2];
Nextern signed short Kunet;
Nextern signed short Ktext[3];
Nextern signed short Kuload;
Nextern signed short Kunet_ext[3];
Nextern signed short KunetA;
Nextern signed short KunetB;
Nextern signed short KunetC;
Nextern signed short Kubps;
Nextern signed short Kuout;
Nextern signed short Kuvd;
N
Nextern signed short MAIN_IST;
Nextern signed short UMAX;
Nextern signed short UOUT;
Nextern signed short UOUT_;
Nextern signed short UAVT;
Nextern signed short TMAX;
Nextern signed short TSIGN;
Nextern signed short TSYSMAX;
Nextern signed short AV_OFF_AVT;
Nextern signed short USIGN;
Nextern signed short UMN;
Nextern signed short ZV_ON;
Nextern signed short UINMAX;
Nextern signed short UINMIN;
Nextern signed short UOUTMAX;
Nextern signed short UOUTMIN;
Nextern signed short IKB;
N
Nextern signed short IMAX;
Nextern signed short IMIN;
Nextern signed short APV_ON;
Nextern signed short IZMAX;
Nextern signed short U0B;
Nextern signed short TZAS;
Nextern signed short VZ_HR;
Nextern signed short TBAT;
Nextern signed short U_AVT;
Nextern signed short DU;
N
Nextern signed short RELE_SET_MASK[4];
N
Nextern signed short TBATMAX;
Nextern signed short TBATSIGN;
Nextern signed short UBM_AV;
Nextern signed short RELE_LOG;
Nextern signed short TBOXMAX;
Nextern signed short TBOXREG;
Nextern signed short TBOXVENTMAX;
Nextern signed short TLOADDISABLE;
Nextern signed short TLOADENABLE;
Nextern signed short TBATDISABLE;
Nextern signed short TBATENABLE;
Nextern signed short TBOXMAX;
Nextern signed short TBOXREG;
Nextern signed short TBOXVENTMAX;
Nextern signed short TLOADDISABLE;
Nextern signed short TLOADENABLE;
Nextern signed short TBATDISABLE;
Nextern signed short TBATENABLE;
Nextern signed short TVENTON;
Nextern signed short TVENTOFF;
Nextern signed short TWARMON;
Nextern signed short TWARMOFF;
Ntypedef enum {rvsAKB=0,rvsEXT,rvsBPS} enum_releventsign;
Nextern enum_releventsign RELEVENTSIGN;
Nextern signed short TZNPN;
Nextern signed short UONPN;
Nextern signed short UVNPN;
Ntypedef enum {npnoOFF=0,npnoRELEVENT,npnoRELEAVBAT2} enum_npn_out;
Nextern enum_npn_out NPN_OUT;
Ntypedef enum {npnsULOAD=0,npnsAVNET} enum_npn_sign;
Nextern enum_npn_sign NPN_SIGN;
Nextern signed short TERMOKOMPENS;
Nextern signed short TBOXVENTON; 
Nextern signed short TBOXVENTOFF;
Nextern signed short TBOXWARMON; 
Nextern signed short TBOXWARMOFF;
Nextern signed short BAT_TYPE;	//Тип батареи. 0 - обычная свинцовая, 1-литиевая COSLIGHT, 2-литиевая SACRED SUN , 3-литиевая ZTT
Nextern signed short DU_LI_BAT;	//Параметр, определяющий напряжение содержания литиевой батареи
Nextern signed short FORVARDBPSCHHOUR;	//Периодичностьсмены ведущего источника в часах. Если 0 - функция выключена и ведущий первый источник
Nextern signed short NUMBAT;
Nextern signed short NUMBAT_TELECORE;
Nextern signed short NUMIST;
Nextern signed short NUMINV;
Nextern signed short NUMDT;
Nextern signed short NUMSK;
Nextern signed short NUMEXT;
Nextern signed short NUMAVT;
Nextern signed short NUMMAKB;
Nextern signed short NUMBYPASS;
Nextern signed short U_OUT_KONTR_MAX;
Nextern signed short U_OUT_KONTR_MIN;
Nextern signed short U_OUT_KONTR_DELAY;
Nextern signed short DOP_RELE_FUNC;
Nextern signed short CNTRL_HNDL_TIME;	//Постоянная времени регулирования источников для Телекора
Nextern signed short USODERG_LI_BAT;		//Напряжение содержания литиевой батареи
Nextern signed short QSODERG_LI_BAT;		//Заряд при котором начинает действовать напряжение содержания литиевой батареи
Nextern signed short TVENTMAX;			//Максимальный ресурс вентилятора
Nextern signed short ICA_EN;				//Включенность режима выравнивания токов ИПС
Nextern signed short ICA_CH;				//Канал связи для выравнивания токов, 0 - MODBUS, 1 - MODBUS-TCP
Nextern signed short ICA_MODBUS_ADDRESS;//Адрес ведомого для выравнивания токов по шине MODBUS-RTU
Nextern signed short ICA_MODBUS_TCP_IP1,ICA_MODBUS_TCP_IP2,ICA_MODBUS_TCP_IP3,ICA_MODBUS_TCP_IP4;	//IP ведомого для выравнивания токов по шине MODBUS-TCP
Nextern signed short ICA_MODBUS_TCP_UNIT_ID;	//UNIT ID ведомого для выравнивания токов по шине MODBUS-TCP
Nextern signed short PWM_START;			//Начальный шим для ЭЛТЕХа
Nextern signed short KB_ALGORITM;		//2-х или 3-х ступеннчатый алгоритм проверки цепи батареи
Nextern signed short REG_SPEED;			//скорость регулирования, 1- стандартная, 2,3,4,5- замедленная в 2,3,4,5 раз
N
Ntypedef enum {apvON=0x01,apvOFF=0x00}enum_apv_on;
Nextern enum_apv_on APV_ON1,APV_ON2;
N
Nextern signed short APV_ON2_TIME;
N
Ntypedef enum {bisON=0x0055,bisOFF=0x00aa}enum_bat_is_on;
Nextern enum_bat_is_on BAT_IS_ON[2];
N
Nextern signed short BAT_DAY_OF_ON[2];
Nextern signed short BAT_MONTH_OF_ON[2];
Nextern signed short BAT_YEAR_OF_ON[2];
Nextern signed short BAT_C_NOM[2];
Nextern signed short BAT_RESURS[2];
Nextern signed short BAT_C_REAL[2];
N//extern signed short BAT_TYPE[2];
N
Nextern unsigned short AUSW_MAIN;
Nextern unsigned long 	AUSW_MAIN_NUMBER;
Nextern unsigned short AUSW_DAY;
Nextern unsigned short AUSW_MONTH;
Nextern unsigned short AUSW_YEAR;
Nextern unsigned short AUSW_UKU;
Nextern unsigned short AUSW_UKU_SUB;
Nextern unsigned long AUSW_UKU_NUMBER;
Nextern unsigned long	AUSW_BPS1_NUMBER;
Nextern unsigned long  AUSW_BPS2_NUMBER;
Nextern unsigned short AUSW_RS232;
Nextern unsigned short AUSW_PDH;
Nextern unsigned short AUSW_SDH;
Nextern unsigned short AUSW_ETH;
N
Nextern signed short TMAX_EXT_EN[3];
Nextern signed short TMAX_EXT[3];
Nextern signed short TMIN_EXT_EN[3];
Nextern signed short TMIN_EXT[3];
Nextern signed short T_EXT_REL_EN[3];
Nextern signed short T_EXT_ZVUK_EN[3];
Nextern signed short T_EXT_LCD_EN[3];
Nextern signed short T_EXT_RS_EN[3];
N
Nextern signed short SK_SIGN[4];
Nextern signed short SK_REL_EN[4];
Nextern signed short SK_ZVUK_EN[4];
Nextern signed short SK_LCD_EN[4];
Nextern signed short SK_RS_EN[4];
N
Ntypedef enum {AVZ_1=1,AVZ_2=2,AVZ_3=3,AVZ_6=6,AVZ_12=12,AVZ_OFF=0}enum_avz;
Nextern enum_avz AVZ;
N
Nextern unsigned short HOUR_AVZ;
Nextern unsigned short MIN_AVZ;
Nextern unsigned short SEC_AVZ;
Nextern unsigned short DATE_AVZ;
Nextern unsigned short MONTH_AVZ;
Nextern unsigned short YEAR_AVZ;
Nextern unsigned short AVZ_TIME;
Ntypedef enum {mnON=0x55,mnOFF=0xAA}enum_mnemo_on;
Nextern enum_mnemo_on MNEMO_ON;
Nextern unsigned short MNEMO_TIME;
Nextern signed short POWER_CNT_ADRESS;
N
Nextern signed short ETH_IS_ON;
Nextern signed short ETH_DHCP_ON;
Nextern signed short ETH_IP_1;
Nextern signed short ETH_IP_2;
Nextern signed short ETH_IP_3;
Nextern signed short ETH_IP_4;
Nextern signed short ETH_MASK_1;
Nextern signed short ETH_MASK_2;
Nextern signed short ETH_MASK_3;
Nextern signed short ETH_MASK_4;
Nextern signed short ETH_TRAP1_IP_1;
Nextern signed short ETH_TRAP1_IP_2;
Nextern signed short ETH_TRAP1_IP_3;
Nextern signed short ETH_TRAP1_IP_4;
Nextern signed short ETH_TRAP2_IP_1;
Nextern signed short ETH_TRAP2_IP_2;
Nextern signed short ETH_TRAP2_IP_3;
Nextern signed short ETH_TRAP2_IP_4;
Nextern signed short ETH_TRAP3_IP_1;
Nextern signed short ETH_TRAP3_IP_2;
Nextern signed short ETH_TRAP3_IP_3;
Nextern signed short ETH_TRAP3_IP_4;
Nextern signed short ETH_TRAP4_IP_1;
Nextern signed short ETH_TRAP4_IP_2;
Nextern signed short ETH_TRAP4_IP_3;
Nextern signed short ETH_TRAP4_IP_4;
Nextern signed short ETH_TRAP5_IP_1;
Nextern signed short ETH_TRAP5_IP_2;
Nextern signed short ETH_TRAP5_IP_3;
Nextern signed short ETH_TRAP5_IP_4;
Nextern signed short ETH_SNMP_PORT_READ;
Nextern signed short ETH_SNMP_PORT_WRITE;
Nextern signed short ETH_GW_1;
Nextern signed short ETH_GW_2;
Nextern signed short ETH_GW_3;
Nextern signed short ETH_GW_4;
N
Nextern signed short RELE_VENT_LOGIC;
N
Nextern signed short MODBUS_ADRESS;
Nextern signed short MODBUS_BAUDRATE;
Nextern signed short BAT_LINK;
Nextern signed short I_LOAD_MODE;		//способ измерения выходного тока - по шунту или как сумму токов источников
N
N
N//***********************************************
N//Состояние батарей
Ntypedef struct
N     {
N	char 		_cnt_to_block;
N	signed short	_Ub;
N     signed short	_Ubm;
N     signed short	_dUbm;
N	signed short	_Ib;
N	signed short	_Tb;
N	char 		_nd;
N	char 		_cnt_wrk;
N	char 		_wrk;
N	unsigned short _zar;
N	char 		_full_ver;
N	signed long 	_zar_cnt;
N	signed long 	_zar_cnt_ke;
N	unsigned short _Iintegr,_Iintegr_; 
N	signed short 	_u_old[8];
N	signed short	_u_old_cnt;
N	unsigned long 	_wrk_date[2];
N	char 		_rel_stat;
N	char			_av;
N	char			_time_cnt;
N	char 		_temper_stat;
N	//0бит - подогрев
N	//1бит - перегрев
N	signed short 	_sign_temper_cnt;
N	signed short 	_max_temper_cnt;
N	signed long 	_resurs_cnt;
N	signed short 	_cnt_as; 	//счетчик несимметрии, считает до 5 минут при выполнении условий несимметрии, когда досчитывает - пишет в журнал
N     //signed short   _max_cell_volt;
N	//signed short   _min_cell_volt;
N	} BAT_STAT; 
Nextern BAT_STAT bat[2],bat_ips;
Nextern signed short		bat_u_old_cnt;
Nextern signed short 	Ib_ips_termokompensat;
N
N//#ifdef UKU_TELECORE2015
Ntypedef enum {bsOFF=0,bsCOMM_ON,bsOK} enum_batStat;
N//***********************************************
N//Состояние литиевой батареи
Ntypedef struct
N     {
N	//char 		_cnt_to_block;
N	signed short	_Ub;
N     //signed short	_Ubm;
N     //signed short	_dUbm;
N	signed short	_Ib;
N	signed short	_Tb;
N	char 		_nd;
N	char   		_soh;
N	char 		_soc;
N	signed short   _ratCap;
N	char 		_comErrStat;	//Состояние связи с батареей: 1-ошибка, 0-связь в норме
N	enum_batStat	_batStat;
N	signed short 	_cclv;
N	char 		_rbt;
N	short 		_canErrorCnt;
N	char			_canError;
N	char 		_485Error;
N	short 		_485ErrorCnt;
N	//char 		_full_ver;
N	//signed long 	_zar_cnt;
N	//signed long 	_zar_cnt_ke;
N	//unsigned short _Iintegr,_Iintegr_; 
N	//signed short 	_u_old[8];
N	//signed short	_u_old_cnt;
N	//unsigned long 	_wrk_date[2];
N	//char 		_rel_stat;
N	//char			_av;
N	//char			_time_cnt;
N	//char 		_temper_stat;
N	//0бит - подогрев
N	//1бит - перегрев
N	//signed short 	_sign_temper_cnt;
N	//signed short 	_max_temper_cnt;
N	//signed long 	_resurs_cnt;
N	//signed short 	_cnt_as; 	//счетчик несимметрии, считает до 5 минут при выполнении условий несимметрии, когда досчитывает - пишет в журнал
N     //signed short   _max_cell_volt;
N	//signed short   _min_cell_volt;
N	} LI_BAT_STAT; 
Nextern LI_BAT_STAT li_bat;
N//#endif
N//***********************************************
N//Состояние байпаса
Ntypedef struct
N     {
N	signed short 	_Iout;
N	signed short 	_Uout;
N	signed short 	_Pout;
N	signed short 	_Unet; 	
N	signed short 	_Uin;
N	char			_T;
N	char 		_flags;
N	char			_cnt;
N	char 		_adress;
N	} BYPS_STAT; 
Nextern BYPS_STAT byps;
N
N//***********************************************
N//Мониторы АКБ
Ntypedef struct
N     {
N	signed short	_U[5];
N	signed short	_Ub[5];
N	signed short	_T[5];
N	signed short	_T_nd[5];
N	signed short 	_cnt; 	
N	} MAKB_STAT; 
Nextern MAKB_STAT makb[4];
N
N//***********************************************
N//Литиевые АКБ
Ntypedef struct
N     {
N	signed short	_max_cell_volt;
N	signed short	_min_cell_volt;
N	signed short	_max_cell_temp;
N	signed short	_min_cell_temp;
N	signed short	_tot_bat_volt;
N	signed short	_ch_curr;
N	signed short	_dsch_curr;
N	signed short	_rat_cap;
N	signed short	_s_o_h;
N	signed short	_s_o_c;
N	signed short	_c_c_l_v;
N	signed short	_r_b_t;
N	signed short	_b_p_ser_num;
N	signed short   _flags1;
N	signed short 	_flags2;
N	signed short 	_communication2lvlErrorStat; 	//флаг аварийности низовой связи с батареей, вычисляется в плате расширения
N	signed short	_communication2lvlErrorCnt;  	//счетчик аварийности низовой связи с батареей
N	signed short 	_cnt;
N	signed short 	_communicationFullErrorStat;	//флаг аварийности всего канала связи с батареей, 0 - норма, 1 - отсутствует связь с промежуточной платой, 2 - отсутствует связь промежуточной платы и батареи  	
N	signed short   _battIsOn;		//0 - отсутствует, 1 - присутствует
N	char 		_plazma[8];		//переменные для отладки
N	signed short 	_isOnCnt;
N	signed short	_s_o_c_abs;		//остаточный заряд в абсолютном выражении
N	signed short 	_s_o_c_percent; //остаточный заряд в процентном выражении
N	signed short	_plazma_ss;
N	signed short	_zar_percent;	//заряд батареи в процетах
N	signed char		_cell_temp_1;	//температура 1-го датчика батареи(ZTT)
N	signed char		_cell_temp_2;	//температура 2-го датчика батареи(ZTT)
N	signed char		_cell_temp_3;	//температура 3-го датчика батареи(ZTT)
N	signed char		_cell_temp_4;	//температура 4-го датчика батареи(ZTT)
N	signed char		_cell_temp_ambient;	//температура датчика окружающей среды батареи(ZTT)
N	signed char		_cell_temp_power;	//температура датчика силовой части батареи(ZTT)
N	//signed char 	_pack_volt_state;	//статус аварии по напряжениям батареи(ZTT)
N	//signed char 	_pack_temper_state;	//статус аварии по температурам батареи(ZTT)
N	//signed char 	_pack_alarm_state;	//статус аварий батареи(ZTT)
N	signed char		_charge_and_discharge_current_alarm_status;	 	//(ZTT)
N	signed char 	_battery_total_voltage_alarm_status;			//(ZTT)
N	signed char		_custom_alarm_quantity;							//(ZTT)
N	signed char		_balanced_event_code;							//(ZTT)
N	signed char 	_voltage_event_code;							//(ZTT)
N	signed char 	_temperature_event_code;						//(ZTT)
N	signed char		_current_event_code;							//(ZTT)
N	signed char		_fet_status_code;								//(ZTT)
N	signed short	_balanced_status_code;							//(ZTT)
N	signed char 	_system_status_code;							//(ZTT)
N
N	} LAKB_STAT; 
Nextern LAKB_STAT lakb[3];
Nextern char lakb_damp[1][42];
Nextern char bLAKB_KONF_CH;
Nextern char bLAKB_KONF_CH_old;
Nextern char lakb_ison_mass[7];
Nextern short lakb_mn_ind_cnt;
Nextern char bLAKB_KONF_CH_EN;
Nextern char bRS485ERR;
Nextern short LBAT_STRUKT;
Nextern char lakb_error_cnt;	//счетчик неправильного показания ннапряжения батареи
Nextern short numOfPacks,numOfPacks_;
Nextern short numOfCells, numOfTemperCells, baseOfData;
Nextern short lakb_stat_comm_error;	//аварийность канала связи с литиевыми батареями. 0 означает исправность платы расширения и наличие связи со всеми литиевыми батареями
Nextern short lakbNotErrorNum;		//колличество литиевых батарей с исправной связью
Nextern short lakbKanErrorCnt;		//Счетчик аварийности канала связи с платой расширения
Nextern short lakbKanErrorStat;		//Состояние аварийности канала связи с платой расширения
N
N
N
N//***********************************************
N//Телеметрия по внутренней шине
Nextern char can_slot[12][16];
Nextern char plazma_can_inv[3];
N
N//***********************************************
N//Состояние источников
N
N
Ntypedef struct
N    {
N    enum {dSRC=3,dINV=5,dNET_METR=7,dIBAT_METR=9,dMAKB=11}_device;
N	char _av;
N	//0бит - авария по перегреву
N	//1бит - авария по завышенному Uвых
N	//2бит - авария по заниженному Uвых
N	//3бит - авария по обрыву связи	
N	//4бит - ресурс вентилятора выработан    
N 	enum {bsOFF_AV_NET,bsAPV,bsWRK,bsRDY,bsBL,bsAV}_state;
N    char _cnt;
N     char _cnt_old;
N     char _cnt_more2;
N     char _buff[20]; 
N     //char _av_net;
N     //char _av_u_max;
N     //char _av_u_min;
N     //char _av_temper; 
N     signed _Uii; 
N     signed _Uin;
N     signed _Ii;
N     signed _Ti; 
N     char _flags_tu;
N	 signed _Uisum;
N     //char _flags_tu_old;
N     //char _is_ready;
N     //char _is_wrk;
N     //char _is_link;
N     //char _is_av;
N     signed _vol_u;
N     signed _vol_i;
N     char _is_on_cnt;
N     //int _ist_blok_host_cnt_; //блокирование источников извне(CAN или RS), если не 0 то источник заблокирован.
N     int _ist_blok_host_cnt;
N     short _blok_cnt; //блокирование источников 
N     char _flags_tm;
N	signed short _overload_av_cnt;     
N     signed short _temp_av_cnt;
N     signed short _umax_av_cnt;
N     signed short _umin_av_cnt;
N     signed _rotor;
N     signed  short _x_; 
N     char _adr_ee;
N	char _last_avar;
N	char _vent_resurs_temp[4];
N	unsigned short _vent_resurs;
N	signed short debug_info_to_uku0;
N	signed short debug_info_to_uku1;
N	signed short _avg;
N	signed short _cntrl_stat;
N     } BPS_STAT; 
Nextern BPS_STAT bps[29];
N
N//***********************************************
N//Состояние инверторов
Ntypedef struct
N     {
N	char _av;
N	//0бит - авария по перегреву
N	//1бит - авария по завышенному Uвых
N	//2бит - авария по заниженному Uвых
N	//3бит - авария по обрыву связи	    
N     enum {isAPV,isWRK,isRDY,isBL,isAV,isOFF_AV_NET}_state;
N     char _cnt;
N     char _cnt_old;
N     char _cnt_more2;
N     char _buff[16]; 
N     signed _Uio; 
N     signed _Ii;
N     signed _Ti; 
N	signed _Uil;
N	signed _Uin;
N	signed _Pio;
N     char _flags_tu;
N     signed _vol_u;
N     signed _vol_i;
N     char _is_on_cnt;
N     //int _ist_blok_host_cnt_; //блокирование источников извне(CAN или RS), если не 0 то источник заблокирован.
N     int _ist_blok_host_cnt;
N     short _blok_cnt; //блокирование источников 
N     char _flags_tm;
N	char _flags_tm_old;
N	signed short _overload_av_cnt;     
N     signed short _temp_av_cnt;
N     signed short _umax_av_cnt;
N     signed short _umin_av_cnt;
N     signed _rotor;
N     signed  short _x_; 
N     char _adr_ee;
N	char _last_avar;
N	char _Pnom;
N	char _Uoutmin;
N	char _Uoutmax;
N	char _net_contr_en;
N	char _pwm_en;
N	char _phase_mode;
N
N     } INV_STAT; 
N#ifdef UKU_220_V2
Sextern INV_STAT inv[3];
N#endif
N#ifndef UKU_220_V2
Nextern INV_STAT inv[20];
N#endif
Nextern char first_inv_slot;
N
N//***********************************************
N//Состояние нагрузки
Nextern signed short load_U;
Nextern signed short load_I;
N
N//***********************************************
N//Состояние выхода
Nextern signed short bps_U;
Nextern signed short out_U;
Nextern signed short in_U;
Nextern signed short out_I;
Nextern signed short vd_U;
Nextern signed short bps_I;
Nextern signed short sys_T;
N
N//***********************************************
N//Состояние первичной сети
Nextern signed short net_U,net_Ustore,net_Ua,net_Ub,net_Uc;
Nextern char bFF,bFF_;
Nextern signed short net_F,hz_out,hz_out_cnt,net_F3;
Nextern signed char unet_drv_cnt;
Nextern char net_av;
N
N
Nextern char plazma_plazma_plazma;
N
Nvoid bitmap_hndl(void);
Nvoid ind_hndl(void);
N__irq void timer1_interrupt(void);
N__irq void timer0_interrupt(void); 
N
N
N//***********************************************
N//Состояние внешних датчиков
N//signed short tout[4];
Nextern char tout_max_cnt[4],tout_min_cnt[4];
Ntypedef enum {tNORM,tMAX,tMIN}enum_tout_stat;
Nextern enum_tout_stat tout_stat[4];
Nextern signed short t_ext[3];
Nextern char ND_EXT[3];
Nextern signed char sk_cnt[4],sk_av_cnt[4];
Ntypedef enum  {ssOFF,ssON} enum_sk_stat;
Nextern enum_sk_stat sk_stat[4];
Ntypedef enum  {sasOFF,sasON} enum_sk_av_stat;
Nextern enum_sk_av_stat sk_av_stat[4],sk_av_stat_old[4];
Nextern signed short t_box,t_box_warm,t_box_vent;
Nextern char TELECORE2017_EXT_VENT_PWM,TELECORE2017_INT_VENT_PWM;
N
N//***********************************************
N//Звуки
Nextern BOOL bSILENT;
N
N//***********************************************
N//Тест
Ntypedef enum {tstOFF,tst1,tst2} enum_tst_state;
Nextern enum_tst_state tst_state[15];
N
N//-----------------------------------------------
N//Контроль заряда
Nextern char sign_U[2],sign_I[2];
Nextern char superviser_cnt;
N
N//-----------------------------------------------
N//Плата расширения
Nextern unsigned short adc_buff_ext_[3];
Nextern unsigned short Uvv[3];
Nextern unsigned short Uvv0;
Nextern short pos_vent;
Nextern short t_ext_can;
Nextern char t_ext_can_nd;
N
N//-----------------------------------------------
N//Плата расширения 2
Nextern char eb2_data[30];
Nextern short eb2_data_short[10];
Nextern short Uvv_eb2[3],Upes_eb2[3];
Nextern short Kvv_eb2[3],Kpes_eb2[3];
N
N//-----------------------------------------------
N//Состояние вводов
Nextern signed short vvod_pos;
N
N//-----------------------------------------------
N//Работа со щетчиком
Nextern signed long power_summary;
Nextern signed short power_current;
Nextern signed long power_summary_tempo,power_summary_tempo_old;
Nextern signed short power_current_tempo,power_current_tempo_old;
Nextern char powerSummaryCnt;
Nextern char powerCurrentCnt;
N
N
Nextern char bRESET;
Nextern char bRESET_EXT;
Nextern char bRESET_INT_WDT;
Nextern char bRESET_EXT_WDT;
N
N//-----------------------------------------------
N//Климатконтроль и вентиляторы
Nextern signed short main_vent_pos;
Nextern signed char t_box_cnt;
Ntypedef enum  {mvsOFF,mvsON} enum_mixer_vent_stat;
Nextern enum_mixer_vent_stat mixer_vent_stat;
Ntypedef struct
N     {
N	signed short _T[4];
N	char _nd[4];
N	signed short _T_dispers[4];
N	char _max_dispers_num;
N	signed short _max_dispers;
N    	signed short _avg1;
N	signed short _avg2;
N	char _avg_cnt;
N     } INT_BOX_TEMPER;
Nextern INT_BOX_TEMPER ibt;
Ntypedef enum {tbdsON,tbdsOFF,tbdsMNL} enum_tbatdisable_stat;
Nextern enum_tbatdisable_stat tbatdisable_stat;
Ntypedef enum {tldsON,tldsOFF,tldsMNL} enum_tloaddisable_stat;
Nextern enum_tloaddisable_stat tloaddisable_stat;
Ntypedef enum {atsOFF,atsON} enum_av_tbox_stat;
Nextern enum_av_tbox_stat av_tbox_stat;
Nextern signed short av_tbox_cnt;
Nextern char tbatdisable_cmnd,tloaddisable_cmnd;
Nextern short tbatdisable_cnt,tloaddisable_cnt;
N#ifdef UKU_KONTUR
Sextern short t_box_vent_on_cnt;
Sextern short t_box_warm_on_cnt;
Stypedef enum {vsOFF,vsON} enum_vent_stat;
Sextern enum_vent_stat vent_stat_k;
Stypedef enum {wsOFF,wsON} enum_warm_stat;
Sextern enum_warm_stat warm_stat_k;
N#endif
N
N#ifdef UKU_TELECORE2015
Sextern short t_box_vent_on_cnt;
Sextern short t_box_warm_on_cnt;
Sextern short t_box_vvent_on_cnt;
Stypedef enum {vsOFF,vsON} enum_vent_stat;
Sextern enum_vent_stat vent_stat_k,vvent_stat_k;
Stypedef enum {wsOFF,wsON} enum_warm_stat;
Sextern enum_warm_stat warm_stat_k;
Sextern signed short TELECORE2015_KLIMAT_WARM_ON_temp;
N#endif
N
N#ifdef UKU_TELECORE2017
Sextern short t_box_vent_on_cnt;
Sextern short t_box_warm_on_cnt;
Sextern short t_box_vvent_on_cnt;
Stypedef enum {vsOFF,vsON} enum_vent_stat;
Sextern enum_vent_stat vent_stat_k,vvent_stat_k;
Stypedef enum {wsOFF,wsON} enum_warm_stat;
Sextern enum_warm_stat warm_stat_k;
Sextern signed short TELECORE2017_KLIMAT_WARM_ON_temp;
Sextern signed char t_box_warm_minus20_cnt;
Sextern signed char t_box_warm_plus65_cnt;
Sextern signed char t_box_cool_plus70_cnt;
S#define ULAUNCH UB0
S#define ULINECC UB20
N#endif
N
Nextern char ext_can_cnt;
N
N
Nsigned short abs_pal(signed short in);
Nvoid ADC_IRQHandler(void);
N
N
N//-----------------------------------------------
N//Состояние контролируемых автоматов нагрузки 
Ntypedef enum  {avtOFF,avtON} enum_avt_stat;
Nextern enum_avt_stat avt_stat[12],avt_stat_old[12]; 
N
N//-----------------------------------------------
N//Показания АЦП на плате измерения тока батареи
Nextern signed long ibat_metr_buff_[2];
Nextern short bIBAT_SMKLBR;
Nextern char ibat_metr_cnt;
N
N//-----------------------------------------------
N//Управление низкоприоритетной нагрузкой
Nextern signed short npn_tz_cnt;
Ntypedef enum {npnsOFF=0,npnsON} enum_npn_stat;
Nextern enum_npn_stat npn_stat;
N
Nextern char snmp_plazma;
N
N
Nextern char ips_bat_av_vzvod;
Nextern char ips_bat_av_stat;
N
Nextern char rel_warm_plazma;
Nextern char can_byps_plazma0,can_byps_plazma1;
N
Nextern short plazma_bat_drv0,plazma_bat_drv1,bat_drv_cnt_cnt;
Nextern unsigned short bat_drv_rx_cnt;
Nextern char bat_drv_rx_buff[512];
Nextern char bat_drv_rx_in;
N
Nextern short can_plazma;
N
N//-----------------------------------------------
N//Климатконтроль TELECORE2015	
N#ifdef UKU_TELECORE2015
Sextern signed short TELECORE2015_KLIMAT_WARM_SIGNAL;
Sextern signed short TELECORE2015_KLIMAT_VENT_SIGNAL;
Sextern signed short TELECORE2015_KLIMAT_WARM_ON;
Sextern signed short TELECORE2015_KLIMAT_WARM_OFF;
Sextern signed short TELECORE2015_KLIMAT_CAP;
Sextern signed short TELECORE2015_KLIMAT_VENT_ON;
Sextern signed short TELECORE2015_KLIMAT_VENT_OFF;
Sextern signed short TELECORE2015_KLIMAT_VVENT_ON;
Sextern signed short TELECORE2015_KLIMAT_VVENT_OFF;
N#endif
N
N
N#ifndef FALSE
N#define FALSE   (0)
N#endif
N
N#ifndef TRUE
N#define TRUE    (1)
N#endif
N
N//-----------------------------------------------
N//Ускоренный заряд
Nextern signed short speedChrgCurr;			//максимальный ток ускоренного заряда, отображение из ЕЕПРОМ
Nextern signed short speedChrgVolt;			//максимальное напряжение ускоренного заряда, отображение из ЕЕПРОМ
Nextern signed short speedChrgTimeInHour; 	//максимальное время ускоренного заряда в часах, отображение из ЕЕПРОМ
Nextern signed short speedChrgAvtEn;	 		//Автоматическое включение Ускоренного заряда включено/выключено
Nextern signed short speedChrgDU;	    	//Просадка напряжения необходимая для включения ускоренного заряда
Nextern signed short speedChIsOn;			//Текущее состояние ускоренного заряда вкл/выкл
Nextern signed long  speedChTimeCnt;			//Счетчик времени прямой ускоренного заряда
Nextern signed short speedChrgBlckSrc;		//Источник сигнала блокировки, 0-выкл., 1-СК1, 2-СК2
Nextern signed short speedChrgBlckLog;		//Логика сигнала блокировки, 1 - блокировка по замкнутому СК, 0 - по разомкнутому
Nextern signed short speedChrgBlckStat;		//Сигнал блокировки для выравнивающего и ускоренного заряда.
Nextern char  		speedChrgShowCnt;		//Счетчик показа информационного сообщения
N
N//-----------------------------------------------
N//Блокировка ИПС
Nextern signed short ipsBlckSrc;
Nextern signed short ipsBlckLog;
Nextern signed short ipsBlckStat;
N
N//-----------------------------------------------
N//Контроль выходного напряжения
Nextern signed short outVoltContrHndlCnt;		//Счетчик, считает в плюс в случае выполнения условия аварии
Nextern signed short outVoltContrHndlCnt_;		//Счетчик, считает в плюс в случае отсутствия выполнения условия аварии
Nextern char uout_av;
N
N//-----------------------------------------------
N//Контроль работы вольтдобавки
Nextern char bVDISWORK;
Nextern char vd_is_work_cnt;
N
Nextern short plazma_numOfCells;
Nextern short plazma_numOfTemperCells;
Nextern short plazma_numOfPacks;
N
Nextern char plazma_ztt[2];
Nextern char plazma1809;
N
Nextern U8 socket_tcp;
N
N//-----------------------------------------------
N//Выравнивание токов ИПС
Nextern char ica_plazma[10];
Nextern char ica_timer_cnt;
Nextern signed short ica_my_current;
Nextern signed short ica_your_current;
Nextern signed short ica_u_necc;
Nextern U8 tcp_soc_avg;
Nextern U8 tcp_connect_stat;
N
N//-----------------------------------------------
N//Авария по перегрузке
Nextern short overloadHndlCnt;
Nextern char overloadAvar;
N
N//-----------------------------------------------
N//Авария по выходному напряжению
Nextern short uAvarHndlOutUMaxCnt,uAvarHndlOutUMinCnt;
Nextern char uOutAvar;
N
N//-----------------------------------------------
N//Авария по входному напряжению
Nextern short uAvarHndlInUMaxCnt,uAvarHndlInUMinCnt;
Nextern char uInAvar;
N
N//-----------------------------------------------
N//Авария по температуре системы
Nextern short sysTAvarHndlCnt;
Nextern char sysTAvar;
N
N//***********************************************
N//Состояния аварий для реле
Nextern short rele_av_flags;
Nextern short avar_vd_stat;
N
Nextern short pvlk;
N//-----------------------------------------------
N//Ресурс вентиляторов
N//extern char vent_resurs_temp[4];
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
L 5 "sc16is7xx.c" 2
N#include "modbus.h"
L 1 "modbus.h" 1
N
Nextern unsigned char modbus_buf[20];
Nextern short modbus_crc16;
Nextern char modbus_timeout_cnt;
Nextern char bMODBUS_TIMEOUT;
Nextern unsigned char modbus_rx_buffer[30];	//Буфер, куда складывает принимаемые даннные обработчик прерывания по приему УАРТа
Nextern unsigned char modbus_an_buffer[30];	//Буфер, куда они потом копируются для анализа
Nextern unsigned char modbus_rx_buffer_ptr;	//Указатель на текущую позицию принимающего буфера
Nextern unsigned char modbus_rx_counter;		//Количество принятых байт, используется при анализе целостности посылки и при расшифровке
N
Nextern short modbus_plazma;				//Отладка
Nextern short modbus_plazma1;				//Отладка
Nextern short modbus_plazma2;				//Отладка
Nextern short modbus_plazma3;				//Отладка
N
Nextern unsigned short modbus_rx_arg0;		//встроенный в посылку первый аргумент
Nextern unsigned short modbus_rx_arg1;		//встроенный в посылку второй аргумент
Nextern unsigned short modbus_rx_arg2;		//встроенный в посылку третий аргумент
Nextern unsigned short modbus_rx_arg3;		//встроенный в посылку четвертый аргумент
N
Nextern char modbus_tx_buff[100];
N
N//extern char modbus_registers[200];
N//-----------------------------------------------
Nunsigned short CRC16_2(char* buf, short len);
N//-----------------------------------------------
N//void modbus_registers_transmit(unsigned char adr,unsigned char func,unsigned short reg_adr,unsigned short reg_quantity);
N//-----------------------------------------------
N//void modbus_register_transmit(unsigned char adr,unsigned char func,unsigned short reg_adr);
N//-----------------------------------------------
Nvoid modbus_hold_registers_transmit(unsigned char adr,unsigned char func,unsigned short reg_adr,unsigned short reg_quantity, char prot);
N//-----------------------------------------------
Nvoid modbus_input_registers_transmit(unsigned char adr,unsigned char func,unsigned short reg_adr,unsigned short reg_quantity, char prot);
N//-----------------------------------------------
N//void modbus_hold_register_transmit(unsigned char adr,unsigned char func,unsigned short reg_adr);
N
N
N
L 6 "sc16is7xx.c" 2
N
Nchar sc16is700ByteAvailable;
Nchar sc16is700TxFifoLevel;
Nchar tx_buffer_sc16is700[TX_BUFFER_SIZE_SC16IS700];//программный буфер передачи
Xchar tx_buffer_sc16is700[32];
Nchar tx_wr_index_sc16is700;//указатель записи в программный буфер передачи
Nchar tx_rd_index_sc16is700;//указатель чтения из программного буфера передачи
Nchar sc16is700TxFifoEmptyCnt; //Временной счетчик свободности ФИФО передачи
Nchar sc16is700TxPossibleFlag;//Флаг возможности передачи
Nchar sc16is700RecieveDisableFlag;
N
N//----------------------------------------------- 
N//настройка SPI1
Nvoid sc16is700_spi_init(void)
N{
NSET_REG( LPC_PINCON->PINSEL0, 0, 0*2, 2);
X((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL0 = ( (((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL0 & ~((0xffffffff>>(32-2))<<0*2)) | (0 << 0*2) );
W "sc16is7xx.c" 21 1 integer operation result is out of range
W "sc16is7xx.c" 21 1 integer conversion resulted in a change of sign
NSET_REG( LPC_PINCON->PINSEL0, 3, 15*2, 2);
X((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL0 = ( (((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL0 & ~((0xffffffff>>(32-2))<<15*2)) | (3 << 15*2) );
NSET_REG( LPC_PINCON->PINSEL1, 0, (16-16)*2, 2);
X((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL1 = ( (((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL1 & ~((0xffffffff>>(32-2))<<(16-16)*2)) | (0 << (16-16)*2) );
NSET_REG( LPC_PINCON->PINSEL1, 3, (17-16)*2, 2);
X((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL1 = ( (((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL1 & ~((0xffffffff>>(32-2))<<(17-16)*2)) | (3 << (17-16)*2) );
NSET_REG( LPC_PINCON->PINSEL1, 3, (18-16)*2, 2); 
X((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL1 = ( (((LPC_PINCON_TypeDef *) ((0x40000000UL) + 0x2C000) )->PINSEL1 & ~((0xffffffff>>(32-2))<<(18-16)*2)) | (3 << (18-16)*2) ); 
N/*
NS1SPCCR=100;
NS1SPCR=0x3f; */
N
NLPC_SPI->SPCCR=20;
X((LPC_SPI_TypeDef *) ((0x40000000UL) + 0x20000) )->SPCCR=20;
NLPC_SPI->SPCR=0x20;
X((LPC_SPI_TypeDef *) ((0x40000000UL) + 0x20000) )->SPCR=0x20;
N}
N
N//----------------------------------------------- 
N//Отправка num байт из программного буфера передачи в sc16is700
Nvoid sc16is700_wr_buff(char reg_num,char num)
N{
Nshort i;
Nsc16is700_spi_init();
Ndelay_us(2);
X{long xx; xx=(unsigned long)2 * 12UL; while(xx)xx--;};
Nsc16is700_CS_ON 
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIODIR|=(1<<0);((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIOCLR|=(1<<0); 
W "sc16is7xx.c" 41 1 function "spi1" declared implicitly
Nspi1((reg_num&0x0f)<<3);
Nfor (i=0;i<num;i++)spi1(tx_buffer_sc16is700[i]);
Nsc16is700_CS_OFF
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIODIR|=(1<<0);((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIOSET|=(1<<0);
N}
N
Nvoid sc16is700_wr_byte(char reg_num,char data)
N{
Nsc16is700_spi_init();
Ndelay_us(2);
X{long xx; xx=(unsigned long)2 * 12UL; while(xx)xx--;};
Nsc16is700_CS_ON
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIODIR|=(1<<0);((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIOCLR|=(1<<0);
W "sc16is7xx.c" 51 1 function "spi1" declared implicitly
Nspi1((reg_num&0x0f)<<3);
Nspi1(data);
Nsc16is700_CS_OFF
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIODIR|=(1<<0);((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIOSET|=(1<<0);
N}
N
N
Nchar sc16is700_rd_byte(char reg_num)
N{
Nchar out;
Nsc16is700_spi_init();
Ndelay_us(2);
X{long xx; xx=(unsigned long)2 * 12UL; while(xx)xx--;};
Nsc16is700_CS_ON
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIODIR|=(1<<0);((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIOCLR|=(1<<0);
W "sc16is7xx.c" 63 1 function "spi1" declared implicitly
Nspi1(((reg_num&0x0f)<<3)|0x80);
Nout = spi1(0xff);
Nsc16is700_CS_OFF
X((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIODIR|=(1<<0);((LPC_GPIO_TypeDef *) ((0x2009C000UL) + 0x00000) )->FIOSET|=(1<<0);
Nreturn out;
N}
N
Nvoid sc16is700_init_(void)
N{
Nsc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
Xsc16is700_wr_byte(0x03, 0x80);
Nsc16is700_wr_byte(CS16IS7xx_DLL, 0x41);
Xsc16is700_wr_byte(0x00, 0x41);
Nsc16is700_wr_byte(CS16IS7xx_DLH, 0x00);
Xsc16is700_wr_byte(0x01, 0x00);
Nsc16is700_wr_byte(CS16IS7xx_LCR, 0xBF);
Xsc16is700_wr_byte(0x03, 0xBF);
Nsc16is700_wr_byte(CS16IS7xx_EFR, 0X10);
Xsc16is700_wr_byte(0x02, 0X10);
Nsc16is700_wr_byte(CS16IS7xx_LCR, 0x03);
Xsc16is700_wr_byte(0x03, 0x03);
Nsc16is700_wr_byte(CS16IS7xx_FCR, 0x06);
Xsc16is700_wr_byte(0x02, 0x06);
Nsc16is700_wr_byte(CS16IS7xx_FCR, 0x01);
Xsc16is700_wr_byte(0x02, 0x01);
Nsc16is700_wr_byte(CS16IS7xx_EFCR, 0X30);
Xsc16is700_wr_byte(0x0f, 0X30);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N}
N
N
N
Nvoid sc16is700_init(uint32_t baudrate)
N{
N
Nunsigned char baud_h,baud_l;
N
Nbaud_h = (char)((10000000U/16U/baudrate)>>8);
Nbaud_l = (char)((10000000U/16U/baudrate)); 
N
Nsc16is700_wr_byte(CS16IS7xx_LCR, 0x80);
Xsc16is700_wr_byte(0x03, 0x80);
Nsc16is700_wr_byte(CS16IS7xx_DLL, baud_l);
Xsc16is700_wr_byte(0x00, baud_l);
Nsc16is700_wr_byte(CS16IS7xx_DLH, baud_h);
Xsc16is700_wr_byte(0x01, baud_h);
Nsc16is700_wr_byte(CS16IS7xx_LCR, 0xBF);
Xsc16is700_wr_byte(0x03, 0xBF);
Nsc16is700_wr_byte(CS16IS7xx_EFR, 0X10);
Xsc16is700_wr_byte(0x02, 0X10);
Nsc16is700_wr_byte(CS16IS7xx_LCR, 0x03);
Xsc16is700_wr_byte(0x03, 0x03);
Nsc16is700_wr_byte(CS16IS7xx_FCR, 0x06);
Xsc16is700_wr_byte(0x02, 0x06);
Nsc16is700_wr_byte(CS16IS7xx_FCR, 0x01);
Xsc16is700_wr_byte(0x02, 0x01);
Nsc16is700_wr_byte(CS16IS7xx_EFCR, 0X30);
Xsc16is700_wr_byte(0x0f, 0X30);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N//sc16is700_wr_byte(CS16IS7xx_DLH, 0x04);
N}
N
N/*
NVoid SC16IS752_Init_ChA (void) // program channel A for SPI-UART
N{ // set 115200 baud, 8N1
NSPI_wr_752 (LCR, 0x80, 0); // 0x80 to program baud rate
NSPI_wr_752 (DLL, 0x08, 0); // 0x08 = 115.2K with X1 = 14.7456 MHz
NSPI_wr_752 (DLM, 0x00, 0); // divisor = 0x0008 for 115200 bps
NSPI_wr_752 (LCR, 0xBF, 0); // access EFR register
NSPI_wr_752 (EFR, 0X10, 0); // enable enhanced registers
NSPI_wr_752 (LCR, 0x03, 0); // 8 data bit, 1 stop bit, no parity
NSPI_wr_752 (FCR, 0x01, 0); // enable FIFO mode
NSPI_wr_752 (SPR, 'A', 0); // scratch pad = character A (0x41)
NSPI_wr_752 (IODIR, 0xFF, 0); // set GPIO [7:0] to output
N// (default: 0x00=input)
NSPI_wr_752 (IOSTATE, 0x00, 0); // set GPIO [7:0] to 0x00 (LEDs on)
NSPI_wr_752 (IER, 0x01, 0); // enable Rx data ready interrupt
N}*/
N
N//----------------------------------------------- 
N//Посылка байта через sc16is700
Nvoid putchar_sc16is700(char out_byte)
N{
Ntx_buffer_sc16is700[tx_wr_index_sc16is700]=out_byte;
Nif (++tx_wr_index_sc16is700 == TX_BUFFER_SIZE_SC16IS700) tx_wr_index_sc16is700=0;
Xif (++tx_wr_index_sc16is700 == 32) tx_wr_index_sc16is700=0;
N}
N
N
N//----------------------------------------------- 
N//Обработчик sc16is700
Nvoid sc16is700_uart_hndl(void)
N{
N
Nsc16is700ByteAvailable=sc16is700_rd_byte(CS16IS7xx_RXLVL); //Читаем состояние ФИФО приема микросхемы
Xsc16is700ByteAvailable=sc16is700_rd_byte(0x09); 
N
Nif(sc16is700ByteAvailable) //Если в приемном ФИФО	микросхемы есть данные
N	{
N	char i;
N	for(i=0;(i<sc16is700ByteAvailable)&&(i<5);i++) //Читаем их пачками не больше 5 в программный буфер модбас
N		{
N		if(!sc16is700RecieveDisableFlag)
N			{
N			modbus_rx_buffer[modbus_rx_buffer_ptr]=sc16is700_rd_byte(CS16IS7xx_RHR);
X			modbus_rx_buffer[modbus_rx_buffer_ptr]=sc16is700_rd_byte(0x00);
N			modbus_rx_buffer_ptr++;
N			modbus_timeout_cnt=0;   //Запускаем таймер опознавания конца посылки 
N			//pvlk++;
N			}
N		else sc16is700_rd_byte(CS16IS7xx_RHR);
X		else sc16is700_rd_byte(0x00);
N		}
N	}
N
N
N
Nsc16is700TxFifoLevel=sc16is700_rd_byte(CS16IS7xx_TXLVL);//Читаем состояние ФИФО передачи
Xsc16is700TxFifoLevel=sc16is700_rd_byte(0x08);
N
Nif(sc16is700TxFifoLevel!=64) sc16is700TxFifoEmptyCnt=0;//Если ФИФО не пустой обнуляем счетчик свободности ФИФО передачи
Nif(sc16is700TxFifoLevel==64) //если ФИФО пустой то плюсуем счетчик если он меньше константы
N	{
N	if(sc16is700TxFifoEmptyCnt<SC16IS700TXFIFOEMPTYCNTMAX)sc16is700TxFifoEmptyCnt++;
X	if(sc16is700TxFifoEmptyCnt<5)sc16is700TxFifoEmptyCnt++;
N	}
Nif(sc16is700TxFifoEmptyCnt==SC16IS700TXFIFOEMPTYCNTMAX) sc16is700TxPossibleFlag=1;//Если счетчик сравнялся с константой поднимаем флаг возможности передачи
Xif(sc16is700TxFifoEmptyCnt==5) sc16is700TxPossibleFlag=1;
Nelse sc16is700TxPossibleFlag=0;//Если не сравнялся - флаг сбрасываем.
N
N
Nif((tx_wr_index_sc16is700)&&(tx_wr_index_sc16is700!=tx_rd_index_sc16is700)) //Если программный буфер передачи не пуст
N	{
N	if(sc16is700TxPossibleFlag)//проверяем возможность передачи
N		{
N		//char i;
N		//for(;tx_rd_index_sc16is700++;tx_rd_index_sc16is700<=tx_wr_index_sc16is700)
N			//{
N		sc16is700RecieveDisableFlag=1;
N		sc16is700_wr_buff(CS16IS7xx_THR, tx_wr_index_sc16is700);
X		sc16is700_wr_buff(0x00, tx_wr_index_sc16is700);
N			//}
N		tx_wr_index_sc16is700=0;
N		}
N	}
N
Nif((sc16is700_rd_byte(CS16IS7xx_LSR))&0x40)	sc16is700RecieveDisableFlag=0;
Xif((sc16is700_rd_byte(0x05))&0x40)	sc16is700RecieveDisableFlag=0;
N
N
N}
