; generated by ARM C/C++ Compiler, 4.1 [Build 644]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\EXE\graphic.o --asm_dir=.\ --list_dir=.\ --depend=.\EXE\graphic.d --feedback=.\EXE\UKU_VD.fed --cpu=Cortex-M3 --apcs=interwork -O1 -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\INC\NXP\LPC17xx -D__MICROLIB -DUKU_VD -DUKU_220_IPS_TERMOKOMPENSAT -DUKU2071x --omf_browse=.\EXE\graphic.crf graphic.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  draw PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;8      {
000004  9c09              LDR      r4,[sp,#0x24]
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  2920              CMP      r1,#0x20
000008  d23d              BCS      |L1.134|
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000a  17cd              ASRS     r5,r1,#31
00000c  eb017555          ADD      r5,r1,r5,LSR #29
000010  10ee              ASRS     r6,r5,#3
000012  4637              MOV      r7,r6
000014  f06f0c3c          MVN      r12,#0x3c
000018  fb06f60c          MUL      r6,r6,r12
00001c  f44f7cb7          MOV      r12,#0x16e
000020  eb0c0646          ADD      r6,r12,r6,LSL #1
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
000024  f0250507          BIC      r5,r5,#7
000028  4406              ADD      r6,r6,r0              ;25
00002a  eba10805          SUB      r8,r1,r5
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
00002e  f04f0c01          MOV      r12,#1
000032  4dff              LDR      r5,|L1.1072|
000034  2a00              CMP      r2,#0                 ;23
000036  d04b              BEQ      |L1.208|
000038  b2b0              UXTH     r0,r6                 ;25
00003a  f1c80107          RSB      r1,r8,#7              ;28
00003e  b2c9              UXTB     r1,r1                 ;28
000040  dd23              BLE      |L1.138|
000042  eb000302          ADD      r3,r0,r2              ;31
000046  e01c              B        |L1.130|
                  |L1.72|
000048  b124              CBZ      r4,|L1.84|
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004a  2c01              CMP      r4,#1
00004c  d009              BEQ      |L1.98|
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
00004e  2c02              CMP      r4,#2
000050  d00e              BEQ      |L1.112|
000052  e013              B        |L1.124|
                  |L1.84|
000054  5c2a              LDRB     r2,[r5,r0]            ;33
000056  fa0cf601          LSL      r6,r12,r1             ;33
00005a  ea420206          ORR      r2,r2,r6              ;33
00005e  542a              STRB     r2,[r5,r0]            ;33
000060  e00c              B        |L1.124|
                  |L1.98|
000062  5c2a              LDRB     r2,[r5,r0]            ;34
000064  fa0cf601          LSL      r6,r12,r1             ;34
000068  ea820206          EOR      r2,r2,r6              ;34
00006c  542a              STRB     r2,[r5,r0]            ;34
00006e  e005              B        |L1.124|
                  |L1.112|
000070  5c2e              LDRB     r6,[r5,r0]
000072  fa0cf201          LSL      r2,r12,r1
000076  ea060602          AND      r6,r6,r2
00007a  542e              STRB     r6,[r5,r0]
                  |L1.124|
00007c  f1000001          ADD      r0,r0,#1              ;31
000080  b280              UXTH     r0,r0                 ;31
                  |L1.130|
000082  4283              CMP      r3,r0                 ;31
000084  dce0              BGT      |L1.72|
                  |L1.134|
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000086  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.138|
00008a  eb000302          ADD      r3,r0,r2              ;31
00008e  e01c              B        |L1.202|
                  |L1.144|
000090  b124              CBZ      r4,|L1.156|
000092  2c01              CMP      r4,#1                 ;43
000094  d009              BEQ      |L1.170|
000096  2c02              CMP      r4,#2                 ;44
000098  d00e              BEQ      |L1.184|
00009a  e013              B        |L1.196|
                  |L1.156|
00009c  5c2a              LDRB     r2,[r5,r0]            ;42
00009e  fa0cf601          LSL      r6,r12,r1             ;42
0000a2  ea420206          ORR      r2,r2,r6              ;42
0000a6  542a              STRB     r2,[r5,r0]            ;42
0000a8  e00c              B        |L1.196|
                  |L1.170|
0000aa  5c2a              LDRB     r2,[r5,r0]            ;43
0000ac  fa0cf601          LSL      r6,r12,r1             ;43
0000b0  ea820206          EOR      r2,r2,r6              ;43
0000b4  542a              STRB     r2,[r5,r0]            ;43
0000b6  e005              B        |L1.196|
                  |L1.184|
0000b8  5c2a              LDRB     r2,[r5,r0]            ;44
0000ba  fa0cf601          LSL      r6,r12,r1             ;44
0000be  ea020206          AND      r2,r2,r6              ;44
0000c2  542a              STRB     r2,[r5,r0]            ;44
                  |L1.196|
0000c4  f1a00001          SUB      r0,r0,#1              ;40
0000c8  b280              UXTH     r0,r0                 ;40
                  |L1.202|
0000ca  4283              CMP      r3,r0                 ;40
0000cc  dbe0              BLT      |L1.144|
                  |L1.206|
0000ce  e7da              B        |L1.134|
                  |L1.208|
0000d0  f04f0eff          MOV      lr,#0xff              ;70
0000d4  2b00              CMP      r3,#0                 ;48
0000d6  d0d6              BEQ      |L1.134|
0000d8  b2ba              UXTH     r2,r7                 ;51
0000da  eb010603          ADD      r6,r1,r3              ;52
0000de  ea4f77e6          ASR      r7,r6,#31             ;52
0000e2  eb067a57          ADD      r10,r6,r7,LSR #29     ;52
0000e6  f3ca07cf          UBFX     r7,r10,#3,#16         ;52
0000ea  fa1ff988          UXTH     r9,r8                 ;53
0000ee  f02a0807          BIC      r8,r10,#7             ;54
0000f2  eba60608          SUB      r6,r6,r8              ;54
0000f6  fa1ff886          UXTH     r8,r6                 ;54
0000fa  dd46              BLE      |L1.394|
0000fc  42ba              CMP      r2,r7                 ;59
0000fe  d145              BNE      |L1.396|
000100  464e              MOV      r6,r9                 ;61
000102  e040              B        |L1.390|
                  |L1.260|
000104  b124              CBZ      r4,|L1.272|
000106  2c01              CMP      r4,#1                 ;64
000108  d015              BEQ      |L1.310|
00010a  2c02              CMP      r4,#2                 ;65
00010c  d026              BEQ      |L1.348|
00010e  e037              B        |L1.384|
                  |L1.272|
000110  f1c20103          RSB      r1,r2,#3              ;63
000114  eb010a41          ADD      r10,r1,r1,LSL #1      ;63
000118  ebca1181          RSB      r1,r10,r1,LSL #6      ;63
00011c  eb000141          ADD      r1,r0,r1,LSL #1       ;63
000120  f1c60b07          RSB      r11,r6,#7             ;63
000124  f815a001          LDRB     r10,[r5,r1]           ;63
000128  fa0cfb0b          LSL      r11,r12,r11           ;63
00012c  ea4a0a0b          ORR      r10,r10,r11           ;63
000130  f805a001          STRB     r10,[r5,r1]           ;63
000134  e024              B        |L1.384|
                  |L1.310|
000136  f1c20103          RSB      r1,r2,#3              ;64
00013a  eb010a41          ADD      r10,r1,r1,LSL #1      ;64
00013e  ebca1181          RSB      r1,r10,r1,LSL #6      ;64
000142  eb000141          ADD      r1,r0,r1,LSL #1       ;64
000146  f1c60b07          RSB      r11,r6,#7             ;64
00014a  f815a001          LDRB     r10,[r5,r1]           ;64
00014e  fa0cfb0b          LSL      r11,r12,r11           ;64
000152  ea8a0a0b          EOR      r10,r10,r11           ;64
000156  f805a001          STRB     r10,[r5,r1]           ;64
00015a  e011              B        |L1.384|
                  |L1.348|
00015c  f1c20103          RSB      r1,r2,#3              ;65
000160  eb010a41          ADD      r10,r1,r1,LSL #1      ;65
000164  ebca1181          RSB      r1,r10,r1,LSL #6      ;65
000168  eb000141          ADD      r1,r0,r1,LSL #1       ;65
00016c  f1c60b07          RSB      r11,r6,#7             ;65
000170  f815a001          LDRB     r10,[r5,r1]           ;65
000174  fa0cfb0b          LSL      r11,r12,r11           ;65
000178  ea2a0a0b          BIC      r10,r10,r11           ;65
00017c  f805a001          STRB     r10,[r5,r1]           ;65
                  |L1.384|
000180  f1060601          ADD      r6,r6,#1              ;61
000184  b2b6              UXTH     r6,r6                 ;61
                  |L1.390|
000186  4546              CMP      r6,r8                 ;61
000188  d3bc              BCC      |L1.260|
                  |L1.394|
00018a  e09c              B        |L1.710|
                  |L1.396|
00018c  17ce              ASRS     r6,r1,#31             ;25
00018e  eb017b56          ADD      r11,r1,r6,LSR #29     ;25
000192  f3cb06cf          UBFX     r6,r11,#3,#16         ;51
000196  f1c60603          RSB      r6,r6,#3              ;70
00019a  eb060a46          ADD      r10,r6,r6,LSL #1      ;70
00019e  ebca1686          RSB      r6,r10,r6,LSL #6      ;70
0001a2  f02b0a07          BIC      r10,r11,#7            ;28
0001a6  eba10b0a          SUB      r11,r1,r10            ;28
0001aa  f04f0aff          MOV      r10,#0xff             ;70
0001ae  eb000646          ADD      r6,r0,r6,LSL #1       ;70
0001b2  fa2afa0b          LSR      r10,r10,r11           ;70
0001b6  b124              CBZ      r4,|L1.450|
0001b8  2c01              CMP      r4,#1                 ;71
0001ba  d009              BEQ      |L1.464|
0001bc  2c02              CMP      r4,#2                 ;72
0001be  d00e              BEQ      |L1.478|
0001c0  e013              B        |L1.490|
                  |L1.450|
0001c2  f815b006          LDRB     r11,[r5,r6]           ;70
0001c6  ea4b0b0a          ORR      r11,r11,r10           ;70
0001ca  f805b006          STRB     r11,[r5,r6]           ;70
0001ce  e00c              B        |L1.490|
                  |L1.464|
0001d0  f815b006          LDRB     r11,[r5,r6]           ;71
0001d4  ea8b0b0a          EOR      r11,r11,r10           ;71
0001d8  f805b006          STRB     r11,[r5,r6]           ;71
0001dc  e005              B        |L1.490|
                  |L1.478|
0001de  f815b006          LDRB     r11,[r5,r6]           ;72
0001e2  ea2b0b0a          BIC      r11,r11,r10           ;72
0001e6  f805b006          STRB     r11,[r5,r6]           ;72
                  |L1.490|
0001ea  18ce              ADDS     r6,r1,r3              ;52
0001ec  17f1              ASRS     r1,r6,#31             ;52
0001ee  eb067b51          ADD      r11,r6,r1,LSR #29     ;52
0001f2  f3cb01cf          UBFX     r1,r11,#3,#16         ;52
0001f6  f1c10103          RSB      r1,r1,#3              ;74
0001fa  eb010a41          ADD      r10,r1,r1,LSL #1      ;74
0001fe  ebca1181          RSB      r1,r10,r1,LSL #6      ;74
000202  f02b0a07          BIC      r10,r11,#7            ;54
000206  eba6060a          SUB      r6,r6,r10             ;54
00020a  b2b6              UXTH     r6,r6                 ;54
00020c  f1c60a08          RSB      r10,r6,#8             ;74
000210  26ff              MOVS     r6,#0xff              ;70
000212  eb000141          ADD      r1,r0,r1,LSL #1       ;74
000216  fa06f60a          LSL      r6,r6,r10             ;74
00021a  b124              CBZ      r4,|L1.550|
00021c  2c01              CMP      r4,#1                 ;75
00021e  d009              BEQ      |L1.564|
000220  2c02              CMP      r4,#2                 ;76
000222  d00e              BEQ      |L1.578|
000224  e013              B        |L1.590|
                  |L1.550|
000226  f815a001          LDRB     r10,[r5,r1]           ;74
00022a  ea4a0a06          ORR      r10,r10,r6            ;74
00022e  f805a001          STRB     r10,[r5,r1]           ;74
000232  e00c              B        |L1.590|
                  |L1.564|
000234  f815a001          LDRB     r10,[r5,r1]           ;75
000238  ea8a0a06          EOR      r10,r10,r6            ;75
00023c  f805a001          STRB     r10,[r5,r1]           ;75
000240  e005              B        |L1.590|
                  |L1.578|
000242  f815a001          LDRB     r10,[r5,r1]           ;76
000246  ea2a0a06          BIC      r10,r10,r6            ;76
00024a  f805a001          STRB     r10,[r5,r1]           ;76
                  |L1.590|
00024e  1ab9              SUBS     r1,r7,r2              ;78
000250  2901              CMP      r1,#1                 ;78
000252  dd38              BLE      |L1.710|
000254  f1020101          ADD      r1,r2,#1              ;80
000258  b289              UXTH     r1,r1                 ;80
00025a  e032              B        |L1.706|
                  |L1.604|
00025c  b124              CBZ      r4,|L1.616|
00025e  2c01              CMP      r4,#1                 ;83
000260  d011              BEQ      |L1.646|
000262  2c02              CMP      r4,#2                 ;84
000264  d01e              BEQ      |L1.676|
000266  e029              B        |L1.700|
                  |L1.616|
000268  f1c10603          RSB      r6,r1,#3              ;82
00026c  eb060a46          ADD      r10,r6,r6,LSL #1      ;82
000270  ebca1686          RSB      r6,r10,r6,LSL #6      ;82
000274  eb000646          ADD      r6,r0,r6,LSL #1       ;82
000278  f815a006          LDRB     r10,[r5,r6]           ;82
00027c  f04f3aff          MOV      r10,#0xffffffff       ;82
000280  f805a006          STRB     r10,[r5,r6]           ;82
000284  e01a              B        |L1.700|
                  |L1.646|
000286  f1c10603          RSB      r6,r1,#3              ;83
00028a  eb060a46          ADD      r10,r6,r6,LSL #1      ;83
00028e  ebca1686          RSB      r6,r10,r6,LSL #6      ;83
000292  eb000646          ADD      r6,r0,r6,LSL #1       ;83
000296  f815a006          LDRB     r10,[r5,r6]           ;83
00029a  ea6f0a0a          MVN      r10,r10               ;83
00029e  f805a006          STRB     r10,[r5,r6]           ;83
0002a2  e00b              B        |L1.700|
                  |L1.676|
0002a4  f1c10603          RSB      r6,r1,#3              ;84
0002a8  eb060b46          ADD      r11,r6,r6,LSL #1      ;84
0002ac  ebcb1686          RSB      r6,r11,r6,LSL #6      ;84
0002b0  eb000646          ADD      r6,r0,r6,LSL #1       ;84
0002b4  f04f0a00          MOV      r10,#0                ;84
0002b8  f805a006          STRB     r10,[r5,r6]           ;84
                  |L1.700|
0002bc  f1010101          ADD      r1,r1,#1              ;80
0002c0  b289              UXTH     r1,r1                 ;80
                  |L1.706|
0002c2  42b9              CMP      r1,r7                 ;80
0002c4  d3ca              BCC      |L1.604|
                  |L1.710|
0002c6  2b00              CMP      r3,#0                 ;90
0002c8  f6bfaf01          BGE      |L1.206|
0002cc  42ba              CMP      r2,r7                 ;93
0002ce  d142              BNE      |L1.854|
0002d0  f1a90901          SUB      r9,r9,#1              ;95
0002d4  fa1ff189          UXTH     r1,r9                 ;95
0002d8  e03a              B        |L1.848|
                  |L1.730|
0002da  b124              CBZ      r4,|L1.742|
0002dc  2c01              CMP      r4,#1                 ;98
0002de  d013              BEQ      |L1.776|
0002e0  2c02              CMP      r4,#2                 ;99
0002e2  d022              BEQ      |L1.810|
0002e4  e031              B        |L1.842|
                  |L1.742|
0002e6  f1c20303          RSB      r3,r2,#3              ;97
0002ea  eb030643          ADD      r6,r3,r3,LSL #1       ;97
0002ee  ebc61383          RSB      r3,r6,r3,LSL #6       ;97
0002f2  eb000343          ADD      r3,r0,r3,LSL #1       ;97
0002f6  f1c10707          RSB      r7,r1,#7              ;97
0002fa  5cee              LDRB     r6,[r5,r3]            ;97
0002fc  fa0cf707          LSL      r7,r12,r7             ;97
000300  ea460607          ORR      r6,r6,r7              ;97
000304  54ee              STRB     r6,[r5,r3]            ;97
000306  e020              B        |L1.842|
                  |L1.776|
000308  f1c20303          RSB      r3,r2,#3              ;98
00030c  eb030643          ADD      r6,r3,r3,LSL #1       ;98
000310  ebc61383          RSB      r3,r6,r3,LSL #6       ;98
000314  eb000343          ADD      r3,r0,r3,LSL #1       ;98
000318  f1c10707          RSB      r7,r1,#7              ;98
00031c  5cee              LDRB     r6,[r5,r3]            ;98
00031e  fa0cf707          LSL      r7,r12,r7             ;98
000322  ea860607          EOR      r6,r6,r7              ;98
000326  54ee              STRB     r6,[r5,r3]            ;98
000328  e00f              B        |L1.842|
                  |L1.810|
00032a  f1c20303          RSB      r3,r2,#3              ;99
00032e  eb030643          ADD      r6,r3,r3,LSL #1       ;99
000332  ebc61383          RSB      r3,r6,r3,LSL #6       ;99
000336  eb000343          ADD      r3,r0,r3,LSL #1       ;99
00033a  f1c10707          RSB      r7,r1,#7              ;99
00033e  5cee              LDRB     r6,[r5,r3]            ;99
000340  fa0cf707          LSL      r7,r12,r7             ;99
000344  ea260607          BIC      r6,r6,r7              ;99
000348  54ee              STRB     r6,[r5,r3]            ;99
                  |L1.842|
00034a  f1a10101          SUB      r1,r1,#1              ;95
00034e  b289              UXTH     r1,r1                 ;95
                  |L1.848|
000350  4541              CMP      r1,r8                 ;95
000352  d2c2              BCS      |L1.730|
                  |L1.852|
000354  e697              B        |L1.134|
                  |L1.854|
000356  b124              CBZ      r4,|L1.866|
000358  2c01              CMP      r4,#1                 ;105
00035a  d013              BEQ      |L1.900|
00035c  2c02              CMP      r4,#2                 ;106
00035e  d022              BEQ      |L1.934|
000360  e031              B        |L1.966|
                  |L1.866|
000362  f1c20103          RSB      r1,r2,#3              ;104
000366  eb010341          ADD      r3,r1,r1,LSL #1       ;104
00036a  ebc31181          RSB      r1,r3,r1,LSL #6       ;104
00036e  eb000141          ADD      r1,r0,r1,LSL #1       ;104
000372  f1c90608          RSB      r6,r9,#8              ;104
000376  5c6b              LDRB     r3,[r5,r1]            ;104
000378  fa0ef606          LSL      r6,lr,r6              ;104
00037c  ea430306          ORR      r3,r3,r6              ;104
000380  546b              STRB     r3,[r5,r1]            ;104
000382  e020              B        |L1.966|
                  |L1.900|
000384  f1c20103          RSB      r1,r2,#3              ;105
000388  eb010341          ADD      r3,r1,r1,LSL #1       ;105
00038c  ebc31181          RSB      r1,r3,r1,LSL #6       ;105
000390  eb000141          ADD      r1,r0,r1,LSL #1       ;105
000394  f1c90608          RSB      r6,r9,#8              ;105
000398  5c6b              LDRB     r3,[r5,r1]            ;105
00039a  fa0ef606          LSL      r6,lr,r6              ;105
00039e  ea830306          EOR      r3,r3,r6              ;105
0003a2  546b              STRB     r3,[r5,r1]            ;105
0003a4  e00f              B        |L1.966|
                  |L1.934|
0003a6  f1c20103          RSB      r1,r2,#3              ;106
0003aa  eb010341          ADD      r3,r1,r1,LSL #1       ;106
0003ae  ebc31181          RSB      r1,r3,r1,LSL #6       ;106
0003b2  eb000141          ADD      r1,r0,r1,LSL #1       ;106
0003b6  f1c90608          RSB      r6,r9,#8              ;106
0003ba  5c6b              LDRB     r3,[r5,r1]            ;106
0003bc  fa0ef606          LSL      r6,lr,r6              ;106
0003c0  ea230306          BIC      r3,r3,r6              ;106
0003c4  546b              STRB     r3,[r5,r1]            ;106
                  |L1.966|
0003c6  b124              CBZ      r4,|L1.978|
0003c8  2c01              CMP      r4,#1                 ;109
0003ca  d011              BEQ      |L1.1008|
0003cc  2c02              CMP      r4,#2                 ;110
0003ce  d01e              BEQ      |L1.1038|
0003d0  e02b              B        |L1.1066|
                  |L1.978|
0003d2  f1c70103          RSB      r1,r7,#3              ;108
0003d6  eb010341          ADD      r3,r1,r1,LSL #1       ;108
0003da  ebc31181          RSB      r1,r3,r1,LSL #6       ;108
0003de  eb000141          ADD      r1,r0,r1,LSL #1       ;108
0003e2  fa2efe08          LSR      lr,lr,r8              ;108
0003e6  5c6b              LDRB     r3,[r5,r1]            ;108
0003e8  ea43030e          ORR      r3,r3,lr              ;108
0003ec  546b              STRB     r3,[r5,r1]            ;108
0003ee  e01c              B        |L1.1066|
                  |L1.1008|
0003f0  f1c70103          RSB      r1,r7,#3              ;109
0003f4  eb010341          ADD      r3,r1,r1,LSL #1       ;109
0003f8  ebc31181          RSB      r1,r3,r1,LSL #6       ;109
0003fc  eb000141          ADD      r1,r0,r1,LSL #1       ;109
000400  fa2efe08          LSR      lr,lr,r8              ;109
000404  5c6b              LDRB     r3,[r5,r1]            ;109
000406  ea83030e          EOR      r3,r3,lr              ;109
00040a  546b              STRB     r3,[r5,r1]            ;109
00040c  e00d              B        |L1.1066|
                  |L1.1038|
00040e  f1c70103          RSB      r1,r7,#3              ;110
000412  eb010341          ADD      r3,r1,r1,LSL #1       ;110
000416  ebc31181          RSB      r1,r3,r1,LSL #6       ;110
00041a  eb000141          ADD      r1,r0,r1,LSL #1       ;110
00041e  fa2efe08          LSR      lr,lr,r8              ;110
000422  5c6b              LDRB     r3,[r5,r1]            ;110
000424  ea23030e          BIC      r3,r3,lr              ;110
000428  546b              STRB     r3,[r5,r1]            ;110
                  |L1.1066|
00042a  1bd1              SUBS     r1,r2,r7              ;112
00042c  2901              CMP      r1,#1                 ;112
00042e  e001              B        |L1.1076|
                  |L1.1072|
                          DCD      lcd_bitmap
                  |L1.1076|
000434  dd8e              BLE      |L1.852|
000436  f1a20201          SUB      r2,r2,#1              ;114
00043a  b291              UXTH     r1,r2                 ;114
00043c  e02d              B        |L1.1178|
                  |L1.1086|
00043e  b124              CBZ      r4,|L1.1098|
000440  2c01              CMP      r4,#1                 ;117
000442  d00f              BEQ      |L1.1124|
000444  2c02              CMP      r4,#2                 ;118
000446  d01a              BEQ      |L1.1150|
000448  e024              B        |L1.1172|
                  |L1.1098|
00044a  f1c10203          RSB      r2,r1,#3              ;116
00044e  eb020342          ADD      r3,r2,r2,LSL #1       ;116
000452  ebc31282          RSB      r2,r3,r2,LSL #6       ;116
000456  eb000242          ADD      r2,r0,r2,LSL #1       ;116
00045a  5cab              LDRB     r3,[r5,r2]            ;116
00045c  f04f33ff          MOV      r3,#0xffffffff        ;116
000460  54ab              STRB     r3,[r5,r2]            ;116
000462  e017              B        |L1.1172|
                  |L1.1124|
000464  f1c10203          RSB      r2,r1,#3              ;117
000468  eb020342          ADD      r3,r2,r2,LSL #1       ;117
00046c  ebc31282          RSB      r2,r3,r2,LSL #6       ;117
000470  eb000242          ADD      r2,r0,r2,LSL #1       ;117
000474  5cab              LDRB     r3,[r5,r2]            ;117
000476  ea6f0303          MVN      r3,r3                 ;117
00047a  54ab              STRB     r3,[r5,r2]            ;117
00047c  e00a              B        |L1.1172|
                  |L1.1150|
00047e  f1c10203          RSB      r2,r1,#3              ;118
000482  eb020642          ADD      r6,r2,r2,LSL #1       ;118
000486  ebc61282          RSB      r2,r6,r2,LSL #6       ;118
00048a  eb000242          ADD      r2,r0,r2,LSL #1       ;118
00048e  f04f0300          MOV      r3,#0                 ;118
000492  54ab              STRB     r3,[r5,r2]            ;118
                  |L1.1172|
000494  f1a10101          SUB      r1,r1,#1              ;114
000498  b289              UXTH     r1,r1                 ;114
                  |L1.1178|
00049a  42b9              CMP      r1,r7                 ;114
00049c  d8cf              BHI      |L1.1086|
00049e  e5f2              B        |L1.134|
;;;126    //---------------------------------------------
                          ENDP


                          AREA ||area_number.2||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.2||, ||.text||
                  draw_rectangle PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d47f8          PUSH     {r3-r10,lr}
;;;8      {
000004  4604              MOV      r4,r0
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  e9dd0509          LDRD     r0,r5,[sp,#0x24]
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000a  4688              MOV      r8,r1
00000c  4692              MOV      r10,r2
00000e  461f              MOV      r7,r3
000010  eb04060a          ADD      r6,r4,r10
000014  b950              CBNZ     r0,|L2.44|
000016  e00d              B        |L2.52|
                  |L2.24|
000018  463b              MOV      r3,r7
00001a  2200              MOVS     r2,#0
00001c  4641              MOV      r1,r8
00001e  4620              MOV      r0,r4
000020  9500              STR      r5,[sp,#0]
000022  f7fffffe          BL       draw
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
000026  f1040401          ADD      r4,r4,#1
00002a  b224              SXTH     r4,r4
                  |L2.44|
00002c  42a6              CMP      r6,r4
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
00002e  daf3              BGE      |L2.24|
                  |L2.48|
000030  e8bd87f8          POP      {r3-r10,pc}
                  |L2.52|
000034  463b              MOV      r3,r7                 ;23
000036  2200              MOVS     r2,#0                 ;23
000038  4641              MOV      r1,r8                 ;25
00003a  4620              MOV      r0,r4                 ;28
00003c  9500              STR      r5,[sp,#0]            ;28
00003e  f7fffffe          BL       draw
000042  eb080907          ADD      r9,r8,r7              ;31
000046  f1a90001          SUB      r0,r9,#1              ;31
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004a  b201              SXTH     r1,r0
00004c  2300              MOVS     r3,#0
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
00004e  4652              MOV      r2,r10
000050  4620              MOV      r0,r4
000052  9500              STR      r5,[sp,#0]
000054  f7fffffe          BL       draw
000058  1e76              SUBS     r6,r6,#1              ;33
00005a  4278              RSBS     r0,r7,#0              ;33
00005c  b234              SXTH     r4,r6                 ;33
00005e  b203              SXTH     r3,r0                 ;33
000060  fa0ff189          SXTH     r1,r9                 ;33
000064  2200              MOVS     r2,#0                 ;34
000066  4620              MOV      r0,r4                 ;34
000068  9500              STR      r5,[sp,#0]            ;34
00006a  f7fffffe          BL       draw
00006e  f1ca0000          RSB      r0,r10,#0             ;34
000072  b202              SXTH     r2,r0
000074  2300              MOVS     r3,#0
000076  4641              MOV      r1,r8
000078  4620              MOV      r0,r4
00007a  9500              STR      r5,[sp,#0]
00007c  f7fffffe          BL       draw
000080  e7d6              B        |L2.48|
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
;;;126    //---------------------------------------------
                          ENDP


                          AREA ||area_number.3||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.3||, ||.text||
                  draw_ptr PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;8      {
000004  4681              MOV      r9,r0
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  460e              MOV      r6,r1
000008  461d              MOV      r5,r3
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000a  f04f0800          MOV      r8,#0
00000e  b122              CBZ      r2,|L3.26|
000010  2a02              CMP      r2,#2
000012  d11b              BNE      |L3.76|
000014  f04f0400          MOV      r4,#0
000018  e02e              B        |L3.120|
                  |L3.26|
00001a  f04f0400          MOV      r4,#0
00001e  e013              B        |L3.72|
                  |L3.32|
000020  1937              ADDS     r7,r6,r4
000022  1b62              SUBS     r2,r4,r5
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
000024  2300              MOVS     r3,#0
000026  4639              MOV      r1,r7
000028  4648              MOV      r0,r9                 ;25
00002a  f8cd8000          STR      r8,[sp,#0]
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
00002e  f7fffffe          BL       draw
000032  1b2a              SUBS     r2,r5,r4
000034  2300              MOVS     r3,#0                 ;23
000036  4639              MOV      r1,r7                 ;23
000038  4648              MOV      r0,r9                 ;25
00003a  f8cd8000          STR      r8,[sp,#0]            ;28
00003e  f7fffffe          BL       draw
000042  f1040401          ADD      r4,r4,#1              ;31
000046  b2e4              UXTB     r4,r4                 ;31
                  |L3.72|
000048  42ac              CMP      r4,r5
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004a  d3e9              BCC      |L3.32|
                  |L3.76|
00004c  e8bd83f8          POP      {r3-r9,pc}
                  |L3.80|
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000050  1b37              SUBS     r7,r6,r4
000052  1b62              SUBS     r2,r4,r5
000054  2300              MOVS     r3,#0                 ;33
000056  4639              MOV      r1,r7                 ;33
000058  4648              MOV      r0,r9                 ;33
00005a  f8cd8000          STR      r8,[sp,#0]            ;33
00005e  f7fffffe          BL       draw
000062  1b2a              SUBS     r2,r5,r4              ;34
000064  2300              MOVS     r3,#0                 ;34
000066  4639              MOV      r1,r7                 ;34
000068  4648              MOV      r0,r9                 ;34
00006a  f8cd8000          STR      r8,[sp,#0]            ;34
00006e  f7fffffe          BL       draw
000072  f1040401          ADD      r4,r4,#1
000076  b2e4              UXTB     r4,r4
                  |L3.120|
000078  42ac              CMP      r4,r5
00007a  d3e9              BCC      |L3.80|
00007c  e7e6              B        |L3.76|
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
;;;126    //---------------------------------------------
                          ENDP


                          AREA ||area_number.4||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.4||, ||.text||
                  plot PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d47f8          PUSH     {r3-r10,lr}
;;;8      {
000004  f8dd9024          LDR      r9,[sp,#0x24]
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000008  f04f34ff          MOV      r4,#0xffffffff
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000c  f1c30320          RSB      r3,r3,#0x20
000010  fa04f403          LSL      r4,r4,r3
000014  9400              STR      r4,[sp,#0]
000016  9b00              LDR      r3,[sp,#0]
000018  ea030302          AND      r3,r3,r2
00001c  9300              STR      r3,[sp,#0]
00001e  9a00              LDR      r2,[sp,#0]
000020  fa22f201          LSR      r2,r2,r1
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
000024  9200              STR      r2,[sp,#0]
000026  f89d6000          LDRB     r6,[sp,#0]
00002a  f89d7001          LDRB     r7,[sp,#1]
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
00002e  f89dc002          LDRB     r12,[sp,#2]
000032  f89d8003          LDRB     r8,[sp,#3]
000036  f8dfa064          LDR      r10,|L4.156|
00003a  f1b90f00          CMP      r9,#0                 ;28
00003e  eb0a0100          ADD      r1,r10,r0             ;28
000042  f81a2000          LDRB     r2,[r10,r0]           ;31
000046  f891307a          LDRB     r3,[r1,#0x7a]         ;31
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004a  f89140f4          LDRB     r4,[r1,#0xf4]
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
00004e  f891516e          LDRB     r5,[r1,#0x16e]
000052  d011              BEQ      |L4.120|
000054  ea820206          EOR      r2,r2,r6              ;33
000058  f80a2000          STRB     r2,[r10,r0]           ;33
00005c  ea830307          EOR      r3,r3,r7              ;33
000060  f881307a          STRB     r3,[r1,#0x7a]         ;33
000064  ea84040c          EOR      r4,r4,r12             ;34
000068  f88140f4          STRB     r4,[r1,#0xf4]         ;34
00006c  ea850508          EOR      r5,r5,r8              ;34
000070  f881516e          STRB     r5,[r1,#0x16e]
                  |L4.116|
000074  e8bd87f8          POP      {r3-r10,pc}
                  |L4.120|
000078  ea420206          ORR      r2,r2,r6
00007c  f80a2000          STRB     r2,[r10,r0]           ;31
000080  ea430307          ORR      r3,r3,r7              ;31
000084  f881307a          STRB     r3,[r1,#0x7a]         ;31
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000088  ea44040c          ORR      r4,r4,r12
00008c  f88140f4          STRB     r4,[r1,#0xf4]         ;31
000090  ea450508          ORR      r5,r5,r8              ;42
000094  f881516e          STRB     r5,[r1,#0x16e]        ;43
000098  e7ec              B        |L4.116|
;;;126    //---------------------------------------------
                          ENDP

00009a  0000              DCW      0x0000
                  |L4.156|
                          DCD      lcd_bitmap

                          AREA ||area_number.5||, CODE, READONLY, ALIGN=1

                          EXPORTAS ||area_number.5||, ||.text||
                  graphic_print PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4ffc          PUSH     {r2-r11,lr}
;;;8      {
000004  4606              MOV      r6,r0
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  e9dd890d          LDRD     r8,r9,[sp,#0x34]
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000a  9d0c              LDR      r5,[sp,#0x30]
00000c  468a              MOV      r10,r1
00000e  4617              MOV      r7,r2
000010  469b              MOV      r11,r3
000012  f04f0400          MOV      r4,#0
000016  e022              B        |L5.94|
                  |L5.24|
000018  fb048005          MLA      r0,r4,r5,r8
00001c  f1a50101          SUB      r1,r5,#1
000020  5c41              LDRB     r1,[r0,r1]
000022  f88d1007          STRB     r1,[sp,#7]
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
000026  f1a50102          SUB      r1,r5,#2
00002a  5c41              LDRB     r1,[r0,r1]
00002c  f88d1006          STRB     r1,[sp,#6]
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
000030  f1a50103          SUB      r1,r5,#3
000034  5c41              LDRB     r1,[r0,r1]            ;23
000036  f88d1005          STRB     r1,[sp,#5]            ;23
00003a  f1a50104          SUB      r1,r5,#4              ;28
00003e  5c40              LDRB     r0,[r0,r1]            ;28
000040  f88d0004          STRB     r0,[sp,#4]            ;29
000044  eb060004          ADD      r0,r6,r4              ;31
000048  b200              SXTH     r0,r0
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004a  465b              MOV      r3,r11
00004c  f8cd9000          STR      r9,[sp,#0]
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
000050  4651              MOV      r1,r10
000052  9a01              LDR      r2,[sp,#4]
000054  f7fffffe          BL       plot
000058  f1040401          ADD      r4,r4,#1              ;33
00005c  b224              SXTH     r4,r4                 ;33
                  |L5.94|
00005e  42bc              CMP      r4,r7                 ;33
000060  dbda              BLT      |L5.24|
000062  e8bd8ffc          POP      {r2-r11,pc}           ;34
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
;;;126    //---------------------------------------------
                          ENDP


                          AREA ||area_number.6||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.text||
                  graphic_print_text PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;8      {
000004  b095              SUB      sp,sp,#0x54
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  4605              MOV      r5,r0
000008  e9ddc723          LDRD     r12,r7,[sp,#0x8c]
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000c  9e25              LDR      r6,[sp,#0x94]
00000e  9922              LDR      r1,[sp,#0x88]
000010  f04f0000          MOV      r0,#0
000014  f04f0820          MOV      r8,#0x20
000018  ac12              ADD      r4,sp,#0x48
                  |L6.26|
00001a  f8048000          STRB     r8,[r4,r0]
00001e  f1000001          ADD      r0,r0,#1
000022  b200              SXTH     r0,r0
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
000024  280a              CMP      r0,#0xa
000026  dbf8              BLT      |L6.26|
000028  f04f0000          MOV      r0,#0                 ;25
00002c  e006              B        |L6.60|
                  |L6.46|
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
00002e  f8129000          LDRB     r9,[r2,r0]
000032  f8049000          STRB     r9,[r4,r0]
000036  f1000001          ADD      r0,r0,#1              ;23
00003a  b200              SXTH     r0,r0                 ;28
                  |L6.60|
00003c  4298              CMP      r0,r3                 ;28
00003e  dbf6              BLT      |L6.46|
000040  f04f0a2b          MOV      r10,#0x2b             ;29
000044  2900              CMP      r1,#0                 ;31
000046  da04              BGE      |L6.82|
000048  f1c10000          RSB      r0,r1,#0
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004c  b201              SXTH     r1,r0
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
00004e  f04f0a2d          MOV      r10,#0x2d
                  |L6.82|
000052  f04f0000          MOV      r0,#0
000056  f04f0b0a          MOV      r11,#0xa              ;33
00005a  46e9              MOV      r9,sp                 ;33
                  |L6.92|
00005c  fb91f2fb          SDIV     r2,r1,r11             ;33
000060  fb0b1112          MLS      r1,r11,r2,r1          ;33
000064  f8091000          STRB     r1,[r9,r0]            ;34
000068  b211              SXTH     r1,r2                 ;34
00006a  f1000001          ADD      r0,r0,#1              ;34
00006e  b240              SXTB     r0,r0                 ;34
000070  280a              CMP      r0,#0xa
000072  dbf3              BLT      |L6.92|
000074  f04f0001          MOV      r0,#1
000078  f04f0200          MOV      r2,#0
00007c  f04f0109          MOV      r1,#9                 ;31
                  |L6.128|
000080  b148              CBZ      r0,|L6.150|
000082  f819b001          LDRB     r11,[r9,r1]           ;31
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000086  f1bb0f00          CMP      r11,#0
00008a  d104              BNE      |L6.150|
00008c  4561              CMP      r1,r12                ;31
00008e  dd02              BLE      |L6.150|
000090  f8098001          STRB     r8,[r9,r1]            ;42
000094  e00a              B        |L6.172|
                  |L6.150|
000096  f8190001          LDRB     r0,[r9,r1]            ;44
00009a  f1000030          ADD      r0,r0,#0x30           ;44
00009e  f8090001          STRB     r0,[r9,r1]            ;42
0000a2  f04f0000          MOV      r0,#0                 ;42
0000a6  f1020201          ADD      r2,r2,#1              ;42
0000aa  b2d2              UXTB     r2,r2                 ;43
                  |L6.172|
0000ac  f1a10101          SUB      r1,r1,#1              ;43
0000b0  b249              SXTB     r1,r1                 ;43
0000b2  2900              CMP      r1,#0                 ;43
0000b4  dae4              BGE      |L6.128|
0000b6  f1ba0f2d          CMP      r10,#0x2d             ;43
0000ba  d105              BNE      |L6.200|
0000bc  4610              MOV      r0,r2                 ;44
0000be  f1020201          ADD      r2,r2,#1              ;44
0000c2  b2d2              UXTB     r2,r2                 ;44
0000c4  f809a000          STRB     r10,[r9,r0]           ;40
                  |L6.200|
0000c8  f1bc0f00          CMP      r12,#0                ;40
0000cc  d013              BEQ      |L6.246|
0000ce  b251              SXTB     r1,r2
0000d0  e008              B        |L6.228|
                  |L6.210|
0000d2  eb090001          ADD      r0,r9,r1              ;70
0000d6  f8100c01          LDRB     r0,[r0,#-1]           ;48
0000da  f8090001          STRB     r0,[r9,r1]            ;52
0000de  f1a10101          SUB      r1,r1,#1              ;52
0000e2  b249              SXTB     r1,r1                 ;52
                  |L6.228|
0000e4  4561              CMP      r1,r12                ;52
0000e6  dcf4              BGT      |L6.210|
0000e8  f04f002e          MOV      r0,#0x2e              ;52
0000ec  f809000c          STRB     r0,[r9,r12]           ;53
0000f0  f1020201          ADD      r2,r2,#1              ;54
0000f4  b2d2              UXTB     r2,r2                 ;54
                  |L6.246|
0000f6  f04f0100          MOV      r1,#0                 ;54
0000fa  e009              B        |L6.272|
                  |L6.252|
0000fc  eba70c01          SUB      r12,r7,r1             ;59
000100  44a4              ADD      r12,r12,r4            ;61
000102  f8190001          LDRB     r0,[r9,r1]            ;61
000106  f80c0c01          STRB     r0,[r12,#-1]          ;64
00010a  f1010101          ADD      r1,r1,#1              ;65
00010e  b249              SXTB     r1,r1                 ;65
                  |L6.272|
000110  4291              CMP      r1,r2                 ;63
000112  dbf3              BLT      |L6.252|
000114  f04f0100          MOV      r1,#0                 ;63
000118  af03              ADD      r7,sp,#0xc            ;63
00011a  e023              B        |L6.356|
                  |L6.284|
00011c  5c60              LDRB     r0,[r4,r1]            ;63
00011e  f8dfc07c          LDR      r12,|L6.412|
000122  eb000040          ADD      r0,r0,r0,LSL #1       ;63
000126  eb010241          ADD      r2,r1,r1,LSL #1       ;63
00012a  f81c8010          LDRB     r8,[r12,r0,LSL #1]    ;63
00012e  f8078012          STRB     r8,[r7,r2,LSL #1]     ;63
000132  eb0c0040          ADD      r0,r12,r0,LSL #1      ;63
000136  eb070242          ADD      r2,r7,r2,LSL #1       ;64
00013a  f890c001          LDRB     r12,[r0,#1]           ;64
00013e  f882c001          STRB     r12,[r2,#1]           ;64
000142  f890c002          LDRB     r12,[r0,#2]           ;64
000146  f882c002          STRB     r12,[r2,#2]           ;64
00014a  f890c003          LDRB     r12,[r0,#3]           ;64
00014e  f882c003          STRB     r12,[r2,#3]           ;64
000152  f890c004          LDRB     r12,[r0,#4]           ;64
000156  f882c004          STRB     r12,[r2,#4]           ;64
00015a  7940              LDRB     r0,[r0,#5]            ;64
00015c  7150              STRB     r0,[r2,#5]            ;65
00015e  f1010101          ADD      r1,r1,#1              ;65
000162  b209              SXTH     r1,r1                 ;65
                  |L6.356|
000164  4299              CMP      r1,r3                 ;65
000166  dbd9              BLT      |L6.284|
000168  f04f0400          MOV      r4,#0                 ;65
00016c  eb030843          ADD      r8,r3,r3,LSL #1       ;65
000170  e00d              B        |L6.398|
                  |L6.370|
000172  5d38              LDRB     r0,[r7,r4]            ;65
000174  f88d000b          STRB     r0,[sp,#0xb]          ;65
000178  1928              ADDS     r0,r5,r4              ;65
00017a  b200              SXTH     r0,r0                 ;65
00017c  2308              MOVS     r3,#8                 ;65
00017e  9600              STR      r6,[sp,#0]            ;65
000180  9a02              LDR      r2,[sp,#8]            ;61
000182  9916              LDR      r1,[sp,#0x58]         ;61
000184  f7fffffe          BL       plot
000188  f1040401          ADD      r4,r4,#1              ;61
00018c  b224              SXTH     r4,r4                 ;25
                  |L6.398|
00018e  ebb40f48          CMP      r4,r8,LSL #1          ;25
000192  dbee              BLT      |L6.370|
000194  b019              ADD      sp,sp,#0x64           ;51
000196  e8bd8ff0          POP      {r4-r11,pc}           ;70
;;;126    //---------------------------------------------
                          ENDP

00019a  0000              DCW      0x0000
                  |L6.412|
                          DCD      caracter

                          AREA ||area_number.7||, CODE, READONLY, ALIGN=2

                          EXPORTAS ||area_number.7||, ||.text||
                  graphic_print_text_text PROC
;;;6      //-----------------------------------------------
;;;7      void draw(signed short x_b,signed short y_b,signed short x_o,signed short y_o,char inverse)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;8      {
000004  b095              SUB      sp,sp,#0x54
;;;9      unsigned short num_byte;
;;;10     //signed short byte_offset;
;;;11     //unsigned short x_target;
;;;12     unsigned short i;
;;;13     char num_bite;
;;;14     unsigned short y_begin,y_bit_begin;
;;;15     unsigned short y_target,y_bit_target;
;;;16     if((y_b<0)||(y_b>31)) return;
000006  4688              MOV      r8,r1
000008  9f1f              LDR      r7,[sp,#0x7c]
;;;17     /*if((x_b<0)||(x_b>121)) return;
;;;18     
;;;19     if(((x_b+x_o)<0)||((x_b+x_o)>121)) return;
;;;20     if(((y_b+y_o)<0)||((y_b+y_o)>31)) return;
;;;21     if(y_o&&x_o) return;*/
;;;22     
;;;23     if(x_o)
;;;24     	{
;;;25     	num_byte=366-(122*(y_b/8))+(x_b);
00000a  991c              LDR      r1,[sp,#0x70]
00000c  4606              MOV      r6,r0
00000e  f04f0000          MOV      r0,#0
000012  f04f0420          MOV      r4,#0x20
000016  f10d0c48          ADD      r12,sp,#0x48
                  |L7.26|
00001a  f80c4000          STRB     r4,[r12,r0]
00001e  f1000001          ADD      r0,r0,#1
000022  b200              SXTH     r0,r0
;;;26     	//x_target
;;;27     	//byte_offset=x_o;
;;;28     	num_bite=7-(y_b%8);
000024  280a              CMP      r0,#0xa
000026  dbf8              BLT      |L7.26|
000028  f04f0400          MOV      r4,#0                 ;25
00002c  e005              B        |L7.58|
                  |L7.46|
;;;29     	if(x_o>0)
;;;30     		{
;;;31     		for(i=num_byte;i<(num_byte+x_o);i++)
;;;32     			{
;;;33     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
00002e  5d10              LDRB     r0,[r2,r4]
000030  f80c0004          STRB     r0,[r12,r4]
000034  f1040401          ADD      r4,r4,#1              ;23
000038  b224              SXTH     r4,r4                 ;25
                  |L7.58|
00003a  429c              CMP      r4,r3                 ;28
00003c  dbf7              BLT      |L7.46|
00003e  2900              CMP      r1,#0                 ;28
000040  da02              BGE      |L7.72|
000042  f1c10000          RSB      r0,r1,#0              ;31
000046  b201              SXTH     r1,r0                 ;31
                  |L7.72|
000048  f04f0000          MOV      r0,#0
;;;34     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
00004c  466d              MOV      r5,sp
;;;35     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
00004e  f04f020a          MOV      r2,#0xa
                  |L7.82|
000052  fb91f4f2          SDIV     r4,r1,r2
000056  fb021114          MLS      r1,r2,r4,r1           ;33
00005a  5429              STRB     r1,[r5,r0]            ;33
00005c  b221              SXTH     r1,r4                 ;33
00005e  f1000001          ADD      r0,r0,#1              ;33
000062  b240              SXTB     r0,r0                 ;34
000064  280a              CMP      r0,#0xa               ;34
000066  dbf4              BLT      |L7.82|
000068  f04f0200          MOV      r2,#0                 ;34
00006c  f10d090c          ADD      r9,sp,#0xc            ;34
000070  e01b              B        |L7.170|
                  |L7.114|
000072  f81c0002          LDRB     r0,[r12,r2]
000076  4c1b              LDR      r4,|L7.228|
000078  eb000140          ADD      r1,r0,r0,LSL #1
00007c  eb020042          ADD      r0,r2,r2,LSL #1       ;31
000080  f8145011          LDRB     r5,[r4,r1,LSL #1]     ;31
000084  f8095010          STRB     r5,[r9,r0,LSL #1]     ;31
;;;36     			}
;;;37     		}
;;;38     	else if(x_o<0)
;;;39     		{
;;;40     		for(i=num_byte;i>(num_byte+x_o);i--)
;;;41     			{
;;;42     			if(!inverse)lcd_bitmap[i]|=(1<<num_bite);
;;;43     			else if(inverse==1) lcd_bitmap[i]^=(1<<num_bite);
;;;44     			else if(inverse==2) lcd_bitmap[i]&=((1<<num_bite)&0xff);
;;;45     			}
;;;46     		}		
;;;47     	}
;;;48     else if(y_o)
;;;49     	{
;;;50     	num_byte=366-(122*(y_b/8))+(x_b);
;;;51     	y_begin=y_b/8;
;;;52     	y_target=(y_b+y_o)/8;
;;;53     	y_bit_begin=y_b%8;
;;;54     	y_bit_target=(y_b+y_o)%8;	
;;;55     	
;;;56     	if(y_o>0)
;;;57     		{
;;;58     		
;;;59     		if(y_begin==y_target)
;;;60     			{
;;;61     			for(i=y_bit_begin;i<y_bit_target;i++)
;;;62     				{
;;;63     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;64     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;65     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;66     				}
;;;67     			}
;;;68     		else
;;;69     			{
;;;70     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff>>y_bit_begin);
;;;71     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff>>y_bit_begin);
;;;72     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff>>y_bit_begin)^0xff);
;;;73     			
;;;74     			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff<<(8-y_bit_target));
;;;75     			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff<<(8-y_bit_target));
;;;76     			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff<<(8-y_bit_target))^0xff);
;;;77     			
;;;78     			if((y_target-y_begin)>1)
;;;79     				{
;;;80     				for(i=y_begin+1;i<y_target;i++)
;;;81     					{
;;;82     					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;83     					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;84     					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;85     					}
;;;86     				}
;;;87     			}	
;;;88     		
;;;89     		}	
;;;90     	if(y_o<0)
;;;91     		{
;;;92     		
;;;93     		if(y_begin==y_target)
;;;94     			{
;;;95     			for(i=y_bit_begin-1;i>=y_bit_target;i--)
;;;96     				{
;;;97     				if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(1<<(7-i));
;;;98     				else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(1<<(7-i));
;;;99     				else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((1<<(7-i))^0xff);
;;;100    				}
;;;101    			}
;;;102    		else
;;;103    			{
;;;104    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_begin))]|=(0xff<<(8-y_bit_begin));
;;;105    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_begin))]^=(0xff<<(8-y_bit_begin));
;;;106    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_begin))]&=((0xff<<(8-y_bit_begin))^0xff);
;;;107    			
;;;108    			if(!inverse)lcd_bitmap[x_b+(122*(3-y_target))]|=(0xff>>y_bit_target);
;;;109    			else if(inverse==1) lcd_bitmap[x_b+(122*(3-y_target))]^=(0xff>>y_bit_target);
;;;110    			else if(inverse==2) lcd_bitmap[x_b+(122*(3-y_target))]&=((0xff>>y_bit_target)^0xff);
;;;111    			
;;;112    			if((y_begin-y_target)>1)
;;;113    				{
;;;114    				for(i=y_begin-1;i>y_target;i--)
;;;115    					{
;;;116    					if(!inverse)lcd_bitmap[x_b+(122*(3-i))]|=0xff;
;;;117    					else if(inverse==1) lcd_bitmap[x_b+(122*(3-i))]^=0xff;
;;;118    					else if(inverse==2) lcd_bitmap[x_b+(122*(3-i))]&=0;
;;;119    					}
;;;120    				}
;;;121    			}	
;;;122    		
;;;123    		}			
;;;124    	}	
;;;125    }	
000088  eb040441          ADD      r4,r4,r1,LSL #1
00008c  eb090540          ADD      r5,r9,r0,LSL #1       ;31
000090  7861              LDRB     r1,[r4,#1]            ;42
000092  7069              STRB     r1,[r5,#1]            ;43
000094  78a0              LDRB     r0,[r4,#2]            ;43
000096  70a8              STRB     r0,[r5,#2]            ;44
000098  78e0              LDRB     r0,[r4,#3]            ;44
00009a  70e8              STRB     r0,[r5,#3]            ;44
00009c  7920              LDRB     r0,[r4,#4]            ;42
00009e  7128              STRB     r0,[r5,#4]            ;42
0000a0  7960              LDRB     r0,[r4,#5]            ;42
0000a2  7168              STRB     r0,[r5,#5]            ;42
0000a4  f1020201          ADD      r2,r2,#1              ;42
0000a8  b212              SXTH     r2,r2                 ;42
                  |L7.170|
0000aa  429a              CMP      r2,r3                 ;43
0000ac  dbe1              BLT      |L7.114|
0000ae  f04f0400          MOV      r4,#0                 ;43
0000b2  eb030543          ADD      r5,r3,r3,LSL #1       ;43
0000b6  e00e              B        |L7.214|
                  |L7.184|
0000b8  f8190004          LDRB     r0,[r9,r4]            ;44
0000bc  f88d000b          STRB     r0,[sp,#0xb]          ;44
0000c0  1930              ADDS     r0,r6,r4              ;44
0000c2  b200              SXTH     r0,r0                 ;44
0000c4  2308              MOVS     r3,#8                 ;40
0000c6  9700              STR      r7,[sp,#0]            ;40
0000c8  4641              MOV      r1,r8                 ;40
0000ca  9a02              LDR      r2,[sp,#8]            ;40
0000cc  f7fffffe          BL       plot
0000d0  f1040401          ADD      r4,r4,#1              ;70
0000d4  b224              SXTH     r4,r4                 ;48
                  |L7.214|
0000d6  ebb40f45          CMP      r4,r5,LSL #1          ;48
0000da  dbed              BLT      |L7.184|
0000dc  b015              ADD      sp,sp,#0x54           ;52
0000de  e8bd83f0          POP      {r4-r9,pc}            ;52
;;;126    //---------------------------------------------
                          ENDP

0000e2  0000              DCW      0x0000
                  |L7.228|
                          DCD      caracter
